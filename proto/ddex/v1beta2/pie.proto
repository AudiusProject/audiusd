syntax = "proto3";

package ddex.v1beta2;

import "ddex/v1beta2/common.proto";

option go_package = "github.com/AudiusProject/audiusd/pkg/api/ddex/v1beta2";

// Party Identification and Enrichment (PIE) message from the DDEX standard
message PartyIdentificationEnrichment {
  DDEXMessageHeader header = 1;
  // unstructed metadata for the message, limited to 2048 bytes
  bytes metadata = 2;
  // address of the PIE message, must be empty for new PIE messages
  string address = 3;
  // addresses this PIE refers to
  repeated string party_addresses = 4;
  // list of handles for the party
  repeated Handle handle_list = 5;
  // displays whether this party is verified by the signer of the PIE message
  Verified verified = 6;
}

// user handle information
message Handle {
  // type of handle, e.g. "audius", "youtube", "spotify", "apple  "
  string handle_type = 1;
  // value of the handle, e.g. "audius123", "youtube123", "spotify123", "apple123"
  string handle_value = 2;
}

// displays whether this party is verified by the signer of the PIE message
message Verified {
  bool verified = 1;
}

message PartyIdentificationEnrichmentAck {
  string pie_address = 1;
  uint64 nonce = 2;
}
