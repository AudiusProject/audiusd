syntax = "proto3";

package ddex.v1beta2;

option go_package = "github.com/AudiusProject/audiusd/pkg/api/ddex/v1beta2";

// Message control types for ERN operations
enum MessageControlType {
  MESSAGE_CONTROL_TYPE_UNSPECIFIED = 0;
  MESSAGE_CONTROL_TYPE_NEW_RELEASE_MESSAGE = 1;
  MESSAGE_CONTROL_TYPE_UPDATED_RELEASE_MESSAGE = 2;
  MESSAGE_CONTROL_TYPE_TAKEDOWN_RELEASE_MESSAGE = 3;
}

// Root message for Electronic Release Notification
message NewReleaseMessage {
  string avs_version_id = 1;
  string language_and_script_code = 2;
  MessageHeader message_header = 3;
  repeated Party party_list = 4;
  repeated Resource resource_list = 5;
  repeated Release release_list = 6;
  repeated Deal deal_list = 7;
}

// Message header information
message MessageHeader {
  // type of message control, NEW_RELEASE_MESSAGE, UPDATED_RELEASE_MESSAGE, TAKEDOWN_RELEASE_MESSAGE
  MessageControlType message_control_type = 1;
  // address of the party sending the message, must match the recovered address from the signature
  string sender_address = 2;
  // address of the ERN receiving the update or deletion, must be empty for new release messages
  string recipient_address = 3;
}

// party information used to create and update a party individually or within an ERN message
message Party {
  // protocol level address to reference a party
  message PartyAddress {
    string address = 1;
  }

  // IDs defined by the DDEX standard that can be used to reference a party
  message PartyId {
    string dpid = 1;
  }

  // name of the party
  message PartyName {
    string language_and_script_code = 1;
    string full_name = 2;
  }

  // reference defined by the DDEX standard that can be used to reference a party
  PartyAddress party_address = 1;
  string party_reference = 2;
  repeated PartyName party_name = 3;
  PartyId party_id = 4;
}

// resource information used to create and update a resource individually or within an ERN message
message Resource {
  // protocol level address to reference a resource
  message ResourceAddress {
    string address = 1;
  }

  // IDs defined by the DDEX standard that can be used to reference a resource
  message ResourceId {
    string isrc = 1;
    string proprietary_id = 2;
    string proprietary_id_namespace = 3;
  }

  // contributor information for sound recordings
  message Contributor {
    string contributor_party_reference = 1;
    repeated string role = 2;
    repeated string user_defined_role = 3;
    int32 sequence_number = 4;
  }

  // display artist information
  message DisplayArtist {
    string artist_party_reference = 1;
    string display_artist_role = 2;
    string artistic_role = 3;
    int32 sequence_number = 4;
  }

  // sound recording resource
  message SoundRecording {
    // technical details for audio resources using mediorum CID-based storage
    message SoundTechnicalDetails {
      string technical_resource_details_reference = 1;

      // mediorum storage reference
      string cid = 2; // Content Identifier for decentralized storage
      int64 file_size = 3; // Size of the file in bytes
      string hash_sum = 4; // Hash of the file for integrity verification
      string hash_algorithm = 5; // Algorithm used for hashing (e.g., "MD5", "SHA256")

      // audio-specific technical details
      string audio_codec_type = 6;
      int32 number_of_channels = 7;
      float sampling_rate = 8;
      int32 bits_per_sample = 9;

      // optional preview/clip information for audio
      message ClipDetails {
        string clip_cid = 1; // CID for preview clip
        string clip_type = 2; // Type of clip (e.g., "Preview")
        int32 start_point = 3; // Start point in samples
        int32 end_point = 4; // End point in samples
        string duration = 5; // Duration of clip (ISO 8601)
      }
      ClipDetails clip_details = 10;
    }

    ResourceAddress resource_address = 1;
    string resource_reference = 2;
    string type = 3;
    ResourceId resource_id = 4;
    string display_title_text = 5;
    string display_artist_name = 6;
    repeated DisplayArtist display_artist = 7;
    repeated Contributor contributor = 8;
    string duration = 9;
    string first_publication_date = 10;
    string parental_warning_type = 11;
    string language_of_performance = 12;
    SoundTechnicalDetails technical_details = 13;
  }

  // image resource
  message Image {
    // technical details for image resources using mediorum CID-based storage
    message ImageTechnicalDetails {
      string technical_resource_details_reference = 1;

      // mediorum storage reference
      string cid = 2; // Content Identifier for decentralized storage
      int64 file_size = 3; // Size of the file in bytes
      string hash_sum = 4; // Hash of the file for integrity verification
      string hash_algorithm = 5; // Algorithm used for hashing (e.g., "MD5", "SHA256")

      // image-specific technical details
      string image_codec_type = 6;
      int32 image_height = 7;
      int32 image_width = 8;
      int32 image_resolution = 9;
    }

    string resource_reference = 1;
    string type = 2;
    ResourceId resource_id = 3;
    ImageTechnicalDetails technical_details = 4;
  }

  oneof resource {
    SoundRecording sound_recording = 1;
    Image image = 2;
  }
}

message Release {
  // protocol level address to reference a release
  message ReleaseAddress {
    string address = 1;
  }

  message ReleaseId {
    string grid = 1;
    string icpn = 2;
    string catalog_number = 3;
    string catalog_number_namespace = 4;
    string proprietary_id = 5;
    string proprietary_id_namespace = 6;
  }

  // display artist information for releases
  message DisplayArtist {
    string artist_party_reference = 1;
    string display_artist_role = 2;
    int32 sequence_number = 3;
  }

  // genre information
  message Genre {
    string genre_text = 1;
    string applicable_territory_code = 2;
  }

  // P-line information
  message PLine {
    string year = 1;
    string p_line_text = 2;
  }

  // resource group content item
  message ResourceGroupContentItem {
    int32 sequence_number = 1;
    string release_resource_reference = 2;
  }

  // resource group information
  message ResourceGroup {
    string additional_title = 1;
    string title_type = 2;
    int32 sequence_number = 3;
    repeated ResourceGroupContentItem resource_group_content_item = 4;
    repeated string linked_release_resource_reference = 5;
  }

  message MainRelease {
    ReleaseAddress release_address = 1;
    string release_reference = 2;
    // Single, EP, Album, Compilation, Soundtrack, Other
    string release_type = 3;
    ReleaseId release_id = 4;
    string display_title_text = 5;
    string display_artist_name = 6;
    repeated DisplayArtist display_artist = 7;
    string release_label_reference = 8;
    string label_type = 9;
    PLine p_line = 10;
    string duration = 11;
    repeated Genre genre = 13;
    string original_release_date = 14;
    string parental_warning_type = 15;
    repeated ResourceGroup resource_group = 16;
  }

  message TrackRelease {
    ReleaseAddress release_address = 1;
    string release_reference = 2;
    ReleaseId release_id = 3;
    string release_resource_reference = 4;
    string release_label_reference = 5;
    string label_type = 6;
    repeated Genre genre = 7;
  }

  oneof release {
    MainRelease main_release = 1;
    TrackRelease track_release = 2;
  }
}

message Deal {
  // protocol level address to reference a deal
  message DealAddress {
    string address = 1;
  }

  // validity period for deals
  message ValidityPeriod {
    string start_date_time = 1;
    string end_date_time = 2;
  }

  // deal terms information
  message DealTerms {
    repeated string territory_code = 1;
    ValidityPeriod validity_period = 2;
    string commercial_model_type = 3;
    string use_type = 4;
  }

  // release deal information
  message ReleaseDeal {
    DealAddress deal_address = 1;
    string deal_release_reference = 2;
    DealTerms deal_terms = 3;
  }

  oneof deal {
    ReleaseDeal release_deal = 1;
  }
}

// Acknowledgment for processed NewReleaseMessage
message NewReleaseMessageAck {
  message Address {
    uint32 index = 1;
    string address = 2;
  }
  Address release_address = 1; // Where the Release is stored
  repeated Address party_addresses = 2; // Artist, label, publisher addresses
  repeated Address sound_recording_addresses = 3; // Individual track addresses
  repeated Address image_addresses = 4; // Album art, photo addresses
  repeated Address deal_addresses = 5; // Licensing deal addresses
}
