// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AudiusProject/audiusd/pkg/api/rpc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RPCServiceName is the fully-qualified name of the RPCService service.
	RPCServiceName = "rpc.v1.RPCService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RPCServiceGetPlaysProcedure is the fully-qualified name of the RPCService's GetPlays RPC.
	RPCServiceGetPlaysProcedure = "/rpc.v1.RPCService/GetPlays"
)

// RPCServiceClient is a client for the rpc.v1.RPCService service.
type RPCServiceClient interface {
	GetPlays(context.Context, *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error)
}

// NewRPCServiceClient constructs a client for the rpc.v1.RPCService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRPCServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RPCServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	rPCServiceMethods := v1.File_rpc_v1_service_proto.Services().ByName("RPCService").Methods()
	return &rPCServiceClient{
		getPlays: connect.NewClient[v1.GetPlaysRequest, v1.GetPlaysResponse](
			httpClient,
			baseURL+RPCServiceGetPlaysProcedure,
			connect.WithSchema(rPCServiceMethods.ByName("GetPlays")),
			connect.WithClientOptions(opts...),
		),
	}
}

// rPCServiceClient implements RPCServiceClient.
type rPCServiceClient struct {
	getPlays *connect.Client[v1.GetPlaysRequest, v1.GetPlaysResponse]
}

// GetPlays calls rpc.v1.RPCService.GetPlays.
func (c *rPCServiceClient) GetPlays(ctx context.Context, req *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error) {
	return c.getPlays.CallUnary(ctx, req)
}

// RPCServiceHandler is an implementation of the rpc.v1.RPCService service.
type RPCServiceHandler interface {
	GetPlays(context.Context, *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error)
}

// NewRPCServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRPCServiceHandler(svc RPCServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rPCServiceMethods := v1.File_rpc_v1_service_proto.Services().ByName("RPCService").Methods()
	rPCServiceGetPlaysHandler := connect.NewUnaryHandler(
		RPCServiceGetPlaysProcedure,
		svc.GetPlays,
		connect.WithSchema(rPCServiceMethods.ByName("GetPlays")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc.v1.RPCService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RPCServiceGetPlaysProcedure:
			rPCServiceGetPlaysHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRPCServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRPCServiceHandler struct{}

func (UnimplementedRPCServiceHandler) GetPlays(context.Context, *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.v1.RPCService.GetPlays is not implemented"))
}
