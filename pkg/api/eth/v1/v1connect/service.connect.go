// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eth/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AudiusProject/audiusd/pkg/api/eth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EthServiceName is the fully-qualified name of the EthService service.
	EthServiceName = "eth.v1.EthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EthServiceIsReadyProcedure is the fully-qualified name of the EthService's IsReady RPC.
	EthServiceIsReadyProcedure = "/eth.v1.EthService/IsReady"
	// EthServiceGetRegisteredEndpointsProcedure is the fully-qualified name of the EthService's
	// GetRegisteredEndpoints RPC.
	EthServiceGetRegisteredEndpointsProcedure = "/eth.v1.EthService/GetRegisteredEndpoints"
	// EthServiceGetRegisteredEndpointInfoProcedure is the fully-qualified name of the EthService's
	// GetRegisteredEndpointInfo RPC.
	EthServiceGetRegisteredEndpointInfoProcedure = "/eth.v1.EthService/GetRegisteredEndpointInfo"
	// EthServiceGetServiceProvidersProcedure is the fully-qualified name of the EthService's
	// GetServiceProviders RPC.
	EthServiceGetServiceProvidersProcedure = "/eth.v1.EthService/GetServiceProviders"
	// EthServiceGetLatestFundingRoundProcedure is the fully-qualified name of the EthService's
	// GetLatestFundingRound RPC.
	EthServiceGetLatestFundingRoundProcedure = "/eth.v1.EthService/GetLatestFundingRound"
	// EthServiceIsDuplicateDelegateWalletProcedure is the fully-qualified name of the EthService's
	// IsDuplicateDelegateWallet RPC.
	EthServiceIsDuplicateDelegateWalletProcedure = "/eth.v1.EthService/IsDuplicateDelegateWallet"
	// EthServiceRegisterOnEthereumProcedure is the fully-qualified name of the EthService's
	// RegisterOnEthereum RPC.
	EthServiceRegisterOnEthereumProcedure = "/eth.v1.EthService/RegisterOnEthereum"
)

// EthServiceClient is a client for the eth.v1.EthService service.
type EthServiceClient interface {
	IsReady(context.Context, *connect.Request[v1.IsReadyRequest]) (*connect.Response[v1.IsReadyResponse], error)
	GetRegisteredEndpoints(context.Context, *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error)
	GetRegisteredEndpointInfo(context.Context, *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error)
	GetServiceProviders(context.Context, *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error)
	GetLatestFundingRound(context.Context, *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error)
	IsDuplicateDelegateWallet(context.Context, *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error)
	RegisterOnEthereum(context.Context, *connect.Request[v1.RegisterOnEthereumRequest]) (*connect.Response[v1.RegisterOnEthereumResponse], error)
}

// NewEthServiceClient constructs a client for the eth.v1.EthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ethServiceMethods := v1.File_eth_v1_service_proto.Services().ByName("EthService").Methods()
	return &ethServiceClient{
		isReady: connect.NewClient[v1.IsReadyRequest, v1.IsReadyResponse](
			httpClient,
			baseURL+EthServiceIsReadyProcedure,
			connect.WithSchema(ethServiceMethods.ByName("IsReady")),
			connect.WithClientOptions(opts...),
		),
		getRegisteredEndpoints: connect.NewClient[v1.GetRegisteredEndpointsRequest, v1.GetRegisteredEndpointsResponse](
			httpClient,
			baseURL+EthServiceGetRegisteredEndpointsProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpoints")),
			connect.WithClientOptions(opts...),
		),
		getRegisteredEndpointInfo: connect.NewClient[v1.GetRegisteredEndpointInfoRequest, v1.GetRegisteredEndpointInfoResponse](
			httpClient,
			baseURL+EthServiceGetRegisteredEndpointInfoProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpointInfo")),
			connect.WithClientOptions(opts...),
		),
		getServiceProviders: connect.NewClient[v1.GetServiceProvidersRequest, v1.GetServiceProvidersResponse](
			httpClient,
			baseURL+EthServiceGetServiceProvidersProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetServiceProviders")),
			connect.WithClientOptions(opts...),
		),
		getLatestFundingRound: connect.NewClient[v1.GetLatestFundingRoundRequest, v1.GetLatestFundingRoundResponse](
			httpClient,
			baseURL+EthServiceGetLatestFundingRoundProcedure,
			connect.WithSchema(ethServiceMethods.ByName("GetLatestFundingRound")),
			connect.WithClientOptions(opts...),
		),
		isDuplicateDelegateWallet: connect.NewClient[v1.IsDuplicateDelegateWalletRequest, v1.IsDuplicateDelegateWalletResponse](
			httpClient,
			baseURL+EthServiceIsDuplicateDelegateWalletProcedure,
			connect.WithSchema(ethServiceMethods.ByName("IsDuplicateDelegateWallet")),
			connect.WithClientOptions(opts...),
		),
		registerOnEthereum: connect.NewClient[v1.RegisterOnEthereumRequest, v1.RegisterOnEthereumResponse](
			httpClient,
			baseURL+EthServiceRegisterOnEthereumProcedure,
			connect.WithSchema(ethServiceMethods.ByName("RegisterOnEthereum")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ethServiceClient implements EthServiceClient.
type ethServiceClient struct {
	isReady                   *connect.Client[v1.IsReadyRequest, v1.IsReadyResponse]
	getRegisteredEndpoints    *connect.Client[v1.GetRegisteredEndpointsRequest, v1.GetRegisteredEndpointsResponse]
	getRegisteredEndpointInfo *connect.Client[v1.GetRegisteredEndpointInfoRequest, v1.GetRegisteredEndpointInfoResponse]
	getServiceProviders       *connect.Client[v1.GetServiceProvidersRequest, v1.GetServiceProvidersResponse]
	getLatestFundingRound     *connect.Client[v1.GetLatestFundingRoundRequest, v1.GetLatestFundingRoundResponse]
	isDuplicateDelegateWallet *connect.Client[v1.IsDuplicateDelegateWalletRequest, v1.IsDuplicateDelegateWalletResponse]
	registerOnEthereum        *connect.Client[v1.RegisterOnEthereumRequest, v1.RegisterOnEthereumResponse]
}

// IsReady calls eth.v1.EthService.IsReady.
func (c *ethServiceClient) IsReady(ctx context.Context, req *connect.Request[v1.IsReadyRequest]) (*connect.Response[v1.IsReadyResponse], error) {
	return c.isReady.CallUnary(ctx, req)
}

// GetRegisteredEndpoints calls eth.v1.EthService.GetRegisteredEndpoints.
func (c *ethServiceClient) GetRegisteredEndpoints(ctx context.Context, req *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error) {
	return c.getRegisteredEndpoints.CallUnary(ctx, req)
}

// GetRegisteredEndpointInfo calls eth.v1.EthService.GetRegisteredEndpointInfo.
func (c *ethServiceClient) GetRegisteredEndpointInfo(ctx context.Context, req *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error) {
	return c.getRegisteredEndpointInfo.CallUnary(ctx, req)
}

// GetServiceProviders calls eth.v1.EthService.GetServiceProviders.
func (c *ethServiceClient) GetServiceProviders(ctx context.Context, req *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error) {
	return c.getServiceProviders.CallUnary(ctx, req)
}

// GetLatestFundingRound calls eth.v1.EthService.GetLatestFundingRound.
func (c *ethServiceClient) GetLatestFundingRound(ctx context.Context, req *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error) {
	return c.getLatestFundingRound.CallUnary(ctx, req)
}

// IsDuplicateDelegateWallet calls eth.v1.EthService.IsDuplicateDelegateWallet.
func (c *ethServiceClient) IsDuplicateDelegateWallet(ctx context.Context, req *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error) {
	return c.isDuplicateDelegateWallet.CallUnary(ctx, req)
}

// RegisterOnEthereum calls eth.v1.EthService.RegisterOnEthereum.
func (c *ethServiceClient) RegisterOnEthereum(ctx context.Context, req *connect.Request[v1.RegisterOnEthereumRequest]) (*connect.Response[v1.RegisterOnEthereumResponse], error) {
	return c.registerOnEthereum.CallUnary(ctx, req)
}

// EthServiceHandler is an implementation of the eth.v1.EthService service.
type EthServiceHandler interface {
	IsReady(context.Context, *connect.Request[v1.IsReadyRequest]) (*connect.Response[v1.IsReadyResponse], error)
	GetRegisteredEndpoints(context.Context, *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error)
	GetRegisteredEndpointInfo(context.Context, *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error)
	GetServiceProviders(context.Context, *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error)
	GetLatestFundingRound(context.Context, *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error)
	IsDuplicateDelegateWallet(context.Context, *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error)
	RegisterOnEthereum(context.Context, *connect.Request[v1.RegisterOnEthereumRequest]) (*connect.Response[v1.RegisterOnEthereumResponse], error)
}

// NewEthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEthServiceHandler(svc EthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ethServiceMethods := v1.File_eth_v1_service_proto.Services().ByName("EthService").Methods()
	ethServiceIsReadyHandler := connect.NewUnaryHandler(
		EthServiceIsReadyProcedure,
		svc.IsReady,
		connect.WithSchema(ethServiceMethods.ByName("IsReady")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetRegisteredEndpointsHandler := connect.NewUnaryHandler(
		EthServiceGetRegisteredEndpointsProcedure,
		svc.GetRegisteredEndpoints,
		connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpoints")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetRegisteredEndpointInfoHandler := connect.NewUnaryHandler(
		EthServiceGetRegisteredEndpointInfoProcedure,
		svc.GetRegisteredEndpointInfo,
		connect.WithSchema(ethServiceMethods.ByName("GetRegisteredEndpointInfo")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetServiceProvidersHandler := connect.NewUnaryHandler(
		EthServiceGetServiceProvidersProcedure,
		svc.GetServiceProviders,
		connect.WithSchema(ethServiceMethods.ByName("GetServiceProviders")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceGetLatestFundingRoundHandler := connect.NewUnaryHandler(
		EthServiceGetLatestFundingRoundProcedure,
		svc.GetLatestFundingRound,
		connect.WithSchema(ethServiceMethods.ByName("GetLatestFundingRound")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceIsDuplicateDelegateWalletHandler := connect.NewUnaryHandler(
		EthServiceIsDuplicateDelegateWalletProcedure,
		svc.IsDuplicateDelegateWallet,
		connect.WithSchema(ethServiceMethods.ByName("IsDuplicateDelegateWallet")),
		connect.WithHandlerOptions(opts...),
	)
	ethServiceRegisterOnEthereumHandler := connect.NewUnaryHandler(
		EthServiceRegisterOnEthereumProcedure,
		svc.RegisterOnEthereum,
		connect.WithSchema(ethServiceMethods.ByName("RegisterOnEthereum")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eth.v1.EthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EthServiceIsReadyProcedure:
			ethServiceIsReadyHandler.ServeHTTP(w, r)
		case EthServiceGetRegisteredEndpointsProcedure:
			ethServiceGetRegisteredEndpointsHandler.ServeHTTP(w, r)
		case EthServiceGetRegisteredEndpointInfoProcedure:
			ethServiceGetRegisteredEndpointInfoHandler.ServeHTTP(w, r)
		case EthServiceGetServiceProvidersProcedure:
			ethServiceGetServiceProvidersHandler.ServeHTTP(w, r)
		case EthServiceGetLatestFundingRoundProcedure:
			ethServiceGetLatestFundingRoundHandler.ServeHTTP(w, r)
		case EthServiceIsDuplicateDelegateWalletProcedure:
			ethServiceIsDuplicateDelegateWalletHandler.ServeHTTP(w, r)
		case EthServiceRegisterOnEthereumProcedure:
			ethServiceRegisterOnEthereumHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEthServiceHandler struct{}

func (UnimplementedEthServiceHandler) IsReady(context.Context, *connect.Request[v1.IsReadyRequest]) (*connect.Response[v1.IsReadyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.IsReady is not implemented"))
}

func (UnimplementedEthServiceHandler) GetRegisteredEndpoints(context.Context, *connect.Request[v1.GetRegisteredEndpointsRequest]) (*connect.Response[v1.GetRegisteredEndpointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetRegisteredEndpoints is not implemented"))
}

func (UnimplementedEthServiceHandler) GetRegisteredEndpointInfo(context.Context, *connect.Request[v1.GetRegisteredEndpointInfoRequest]) (*connect.Response[v1.GetRegisteredEndpointInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetRegisteredEndpointInfo is not implemented"))
}

func (UnimplementedEthServiceHandler) GetServiceProviders(context.Context, *connect.Request[v1.GetServiceProvidersRequest]) (*connect.Response[v1.GetServiceProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetServiceProviders is not implemented"))
}

func (UnimplementedEthServiceHandler) GetLatestFundingRound(context.Context, *connect.Request[v1.GetLatestFundingRoundRequest]) (*connect.Response[v1.GetLatestFundingRoundResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.GetLatestFundingRound is not implemented"))
}

func (UnimplementedEthServiceHandler) IsDuplicateDelegateWallet(context.Context, *connect.Request[v1.IsDuplicateDelegateWalletRequest]) (*connect.Response[v1.IsDuplicateDelegateWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.IsDuplicateDelegateWallet is not implemented"))
}

func (UnimplementedEthServiceHandler) RegisterOnEthereum(context.Context, *connect.Request[v1.RegisterOnEthereumRequest]) (*connect.Response[v1.RegisterOnEthereumResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eth.v1.EthService.RegisterOnEthereum is not implemented"))
}
