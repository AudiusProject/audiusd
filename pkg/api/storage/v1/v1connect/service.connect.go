// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: storage/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AudiusProject/audiusd/pkg/api/storage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServicePingProcedure is the fully-qualified name of the StorageService's Ping RPC.
	StorageServicePingProcedure = "/storage.v1.StorageService/Ping"
	// StorageServiceGetHealthProcedure is the fully-qualified name of the StorageService's GetHealth
	// RPC.
	StorageServiceGetHealthProcedure = "/storage.v1.StorageService/GetHealth"
	// StorageServiceUploadTrackProcedure is the fully-qualified name of the StorageService's
	// UploadTrack RPC.
	StorageServiceUploadTrackProcedure = "/storage.v1.StorageService/UploadTrack"
	// StorageServiceUploadImageProcedure is the fully-qualified name of the StorageService's
	// UploadImage RPC.
	StorageServiceUploadImageProcedure = "/storage.v1.StorageService/UploadImage"
	// StorageServiceGetUploadProcedure is the fully-qualified name of the StorageService's GetUpload
	// RPC.
	StorageServiceGetUploadProcedure = "/storage.v1.StorageService/GetUpload"
	// StorageServiceStreamTrackProcedure is the fully-qualified name of the StorageService's
	// StreamTrack RPC.
	StorageServiceStreamTrackProcedure = "/storage.v1.StorageService/StreamTrack"
	// StorageServiceStreamImageProcedure is the fully-qualified name of the StorageService's
	// StreamImage RPC.
	StorageServiceStreamImageProcedure = "/storage.v1.StorageService/StreamImage"
)

// StorageServiceClient is a client for the storage.v1.StorageService service.
type StorageServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	UploadTrack(context.Context, *connect.Request[v1.UploadTrackRequest]) (*connect.Response[v1.UploadTrackResponse], error)
	UploadImage(context.Context, *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error)
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest]) (*connect.ServerStreamForClient[v1.StreamTrackResponse], error)
	StreamImage(context.Context, *connect.Request[v1.StreamImageRequest]) (*connect.ServerStreamForClient[v1.StreamImageResponse], error)
}

// NewStorageServiceClient constructs a client for the storage.v1.StorageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := v1.File_storage_v1_service_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+StorageServicePingProcedure,
			connect.WithSchema(storageServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getHealth: connect.NewClient[v1.GetHealthRequest, v1.GetHealthResponse](
			httpClient,
			baseURL+StorageServiceGetHealthProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetHealth")),
			connect.WithClientOptions(opts...),
		),
		uploadTrack: connect.NewClient[v1.UploadTrackRequest, v1.UploadTrackResponse](
			httpClient,
			baseURL+StorageServiceUploadTrackProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UploadTrack")),
			connect.WithClientOptions(opts...),
		),
		uploadImage: connect.NewClient[v1.UploadImageRequest, v1.UploadImageResponse](
			httpClient,
			baseURL+StorageServiceUploadImageProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UploadImage")),
			connect.WithClientOptions(opts...),
		),
		getUpload: connect.NewClient[v1.GetUploadRequest, v1.GetUploadResponse](
			httpClient,
			baseURL+StorageServiceGetUploadProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetUpload")),
			connect.WithClientOptions(opts...),
		),
		streamTrack: connect.NewClient[v1.StreamTrackRequest, v1.StreamTrackResponse](
			httpClient,
			baseURL+StorageServiceStreamTrackProcedure,
			connect.WithSchema(storageServiceMethods.ByName("StreamTrack")),
			connect.WithClientOptions(opts...),
		),
		streamImage: connect.NewClient[v1.StreamImageRequest, v1.StreamImageResponse](
			httpClient,
			baseURL+StorageServiceStreamImageProcedure,
			connect.WithSchema(storageServiceMethods.ByName("StreamImage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	ping        *connect.Client[v1.PingRequest, v1.PingResponse]
	getHealth   *connect.Client[v1.GetHealthRequest, v1.GetHealthResponse]
	uploadTrack *connect.Client[v1.UploadTrackRequest, v1.UploadTrackResponse]
	uploadImage *connect.Client[v1.UploadImageRequest, v1.UploadImageResponse]
	getUpload   *connect.Client[v1.GetUploadRequest, v1.GetUploadResponse]
	streamTrack *connect.Client[v1.StreamTrackRequest, v1.StreamTrackResponse]
	streamImage *connect.Client[v1.StreamImageRequest, v1.StreamImageResponse]
}

// Ping calls storage.v1.StorageService.Ping.
func (c *storageServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetHealth calls storage.v1.StorageService.GetHealth.
func (c *storageServiceClient) GetHealth(ctx context.Context, req *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return c.getHealth.CallUnary(ctx, req)
}

// UploadTrack calls storage.v1.StorageService.UploadTrack.
func (c *storageServiceClient) UploadTrack(ctx context.Context, req *connect.Request[v1.UploadTrackRequest]) (*connect.Response[v1.UploadTrackResponse], error) {
	return c.uploadTrack.CallUnary(ctx, req)
}

// UploadImage calls storage.v1.StorageService.UploadImage.
func (c *storageServiceClient) UploadImage(ctx context.Context, req *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error) {
	return c.uploadImage.CallUnary(ctx, req)
}

// GetUpload calls storage.v1.StorageService.GetUpload.
func (c *storageServiceClient) GetUpload(ctx context.Context, req *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return c.getUpload.CallUnary(ctx, req)
}

// StreamTrack calls storage.v1.StorageService.StreamTrack.
func (c *storageServiceClient) StreamTrack(ctx context.Context, req *connect.Request[v1.StreamTrackRequest]) (*connect.ServerStreamForClient[v1.StreamTrackResponse], error) {
	return c.streamTrack.CallServerStream(ctx, req)
}

// StreamImage calls storage.v1.StorageService.StreamImage.
func (c *storageServiceClient) StreamImage(ctx context.Context, req *connect.Request[v1.StreamImageRequest]) (*connect.ServerStreamForClient[v1.StreamImageResponse], error) {
	return c.streamImage.CallServerStream(ctx, req)
}

// StorageServiceHandler is an implementation of the storage.v1.StorageService service.
type StorageServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	UploadTrack(context.Context, *connect.Request[v1.UploadTrackRequest]) (*connect.Response[v1.UploadTrackResponse], error)
	UploadImage(context.Context, *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error)
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest], *connect.ServerStream[v1.StreamTrackResponse]) error
	StreamImage(context.Context, *connect.Request[v1.StreamImageRequest], *connect.ServerStream[v1.StreamImageResponse]) error
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := v1.File_storage_v1_service_proto.Services().ByName("StorageService").Methods()
	storageServicePingHandler := connect.NewUnaryHandler(
		StorageServicePingProcedure,
		svc.Ping,
		connect.WithSchema(storageServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetHealthHandler := connect.NewUnaryHandler(
		StorageServiceGetHealthProcedure,
		svc.GetHealth,
		connect.WithSchema(storageServiceMethods.ByName("GetHealth")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUploadTrackHandler := connect.NewUnaryHandler(
		StorageServiceUploadTrackProcedure,
		svc.UploadTrack,
		connect.WithSchema(storageServiceMethods.ByName("UploadTrack")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUploadImageHandler := connect.NewUnaryHandler(
		StorageServiceUploadImageProcedure,
		svc.UploadImage,
		connect.WithSchema(storageServiceMethods.ByName("UploadImage")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetUploadHandler := connect.NewUnaryHandler(
		StorageServiceGetUploadProcedure,
		svc.GetUpload,
		connect.WithSchema(storageServiceMethods.ByName("GetUpload")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStreamTrackHandler := connect.NewServerStreamHandler(
		StorageServiceStreamTrackProcedure,
		svc.StreamTrack,
		connect.WithSchema(storageServiceMethods.ByName("StreamTrack")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStreamImageHandler := connect.NewServerStreamHandler(
		StorageServiceStreamImageProcedure,
		svc.StreamImage,
		connect.WithSchema(storageServiceMethods.ByName("StreamImage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServicePingProcedure:
			storageServicePingHandler.ServeHTTP(w, r)
		case StorageServiceGetHealthProcedure:
			storageServiceGetHealthHandler.ServeHTTP(w, r)
		case StorageServiceUploadTrackProcedure:
			storageServiceUploadTrackHandler.ServeHTTP(w, r)
		case StorageServiceUploadImageProcedure:
			storageServiceUploadImageHandler.ServeHTTP(w, r)
		case StorageServiceGetUploadProcedure:
			storageServiceGetUploadHandler.ServeHTTP(w, r)
		case StorageServiceStreamTrackProcedure:
			storageServiceStreamTrackHandler.ServeHTTP(w, r)
		case StorageServiceStreamImageProcedure:
			storageServiceStreamImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.Ping is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetHealth is not implemented"))
}

func (UnimplementedStorageServiceHandler) UploadTrack(context.Context, *connect.Request[v1.UploadTrackRequest]) (*connect.Response[v1.UploadTrackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.UploadTrack is not implemented"))
}

func (UnimplementedStorageServiceHandler) UploadImage(context.Context, *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.UploadImage is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetUpload is not implemented"))
}

func (UnimplementedStorageServiceHandler) StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest], *connect.ServerStream[v1.StreamTrackResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.StreamTrack is not implemented"))
}

func (UnimplementedStorageServiceHandler) StreamImage(context.Context, *connect.Request[v1.StreamImageRequest], *connect.ServerStream[v1.StreamImageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.StreamImage is not implemented"))
}
