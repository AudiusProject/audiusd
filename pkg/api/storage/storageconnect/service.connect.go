// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: storage/service.proto

package storageconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	storage "github.com/AudiusProject/audiusd/pkg/api/storage"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "storage.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceGetSignedStreamUrlProcedure is the fully-qualified name of the StorageService's
	// GetSignedStreamUrl RPC.
	StorageServiceGetSignedStreamUrlProcedure = "/storage.StorageService/GetSignedStreamUrl"
)

// StorageServiceClient is a client for the storage.StorageService service.
type StorageServiceClient interface {
	GetSignedStreamUrl(context.Context, *connect.Request[storage.GetSignedStreamUrlRequest]) (*connect.Response[storage.GetSignedStreamUrlResponse], error)
}

// NewStorageServiceClient constructs a client for the storage.StorageService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := storage.File_storage_service_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		getSignedStreamUrl: connect.NewClient[storage.GetSignedStreamUrlRequest, storage.GetSignedStreamUrlResponse](
			httpClient,
			baseURL+StorageServiceGetSignedStreamUrlProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetSignedStreamUrl")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	getSignedStreamUrl *connect.Client[storage.GetSignedStreamUrlRequest, storage.GetSignedStreamUrlResponse]
}

// GetSignedStreamUrl calls storage.StorageService.GetSignedStreamUrl.
func (c *storageServiceClient) GetSignedStreamUrl(ctx context.Context, req *connect.Request[storage.GetSignedStreamUrlRequest]) (*connect.Response[storage.GetSignedStreamUrlResponse], error) {
	return c.getSignedStreamUrl.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the storage.StorageService service.
type StorageServiceHandler interface {
	GetSignedStreamUrl(context.Context, *connect.Request[storage.GetSignedStreamUrlRequest]) (*connect.Response[storage.GetSignedStreamUrlResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := storage.File_storage_service_proto.Services().ByName("StorageService").Methods()
	storageServiceGetSignedStreamUrlHandler := connect.NewUnaryHandler(
		StorageServiceGetSignedStreamUrlProcedure,
		svc.GetSignedStreamUrl,
		connect.WithSchema(storageServiceMethods.ByName("GetSignedStreamUrl")),
		connect.WithHandlerOptions(opts...),
	)
	return "/storage.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceGetSignedStreamUrlProcedure:
			storageServiceGetSignedStreamUrlHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) GetSignedStreamUrl(context.Context, *connect.Request[storage.GetSignedStreamUrlRequest]) (*connect.Response[storage.GetSignedStreamUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.StorageService.GetSignedStreamUrl is not implemented"))
}
