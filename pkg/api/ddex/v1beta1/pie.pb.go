// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ddex/v1beta1/pie.proto

package v1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Party Identification and Enrichment (PIE) message from the DDEX standard
type PieMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageHeader      *MessageHeader               `protobuf:"bytes,1,opt,name=message_header,json=messageHeader,proto3" json:"message_header,omitempty"`
	MetadataSourceList []*PieMessage_MetadataSource `protobuf:"bytes,2,rep,name=metadata_source_list,json=metadataSourceList,proto3" json:"metadata_source_list,omitempty"`
	PartyList          []*PieMessage_PartyInfo      `protobuf:"bytes,3,rep,name=party_list,json=partyList,proto3" json:"party_list,omitempty"`
}

func (x *PieMessage) Reset() {
	*x = PieMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage) ProtoMessage() {}

func (x *PieMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage.ProtoReflect.Descriptor instead.
func (*PieMessage) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0}
}

func (x *PieMessage) GetMessageHeader() *MessageHeader {
	if x != nil {
		return x.MessageHeader
	}
	return nil
}

func (x *PieMessage) GetMetadataSourceList() []*PieMessage_MetadataSource {
	if x != nil {
		return x.MetadataSourceList
	}
	return nil
}

func (x *PieMessage) GetPartyList() []*PieMessage_PartyInfo {
	if x != nil {
		return x.PartyList
	}
	return nil
}

type PieMessage_MetadataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceReference    string `protobuf:"bytes,1,opt,name=source_reference,json=sourceReference,proto3" json:"source_reference,omitempty"`
	PartyName          string `protobuf:"bytes,2,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyId            string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	MetadataSourceType string `protobuf:"bytes,4,opt,name=metadata_source_type,json=metadataSourceType,proto3" json:"metadata_source_type,omitempty"` // e.g. "VerifiedSource", "CommunitySource"
}

func (x *PieMessage_MetadataSource) Reset() {
	*x = PieMessage_MetadataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_MetadataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_MetadataSource) ProtoMessage() {}

func (x *PieMessage_MetadataSource) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_MetadataSource.ProtoReflect.Descriptor instead.
func (*PieMessage_MetadataSource) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PieMessage_MetadataSource) GetSourceReference() string {
	if x != nil {
		return x.SourceReference
	}
	return ""
}

func (x *PieMessage_MetadataSource) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

func (x *PieMessage_MetadataSource) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PieMessage_MetadataSource) GetMetadataSourceType() string {
	if x != nil {
		return x.MetadataSourceType
	}
	return ""
}

type PieMessage_PartyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyReference        string                                    `protobuf:"bytes,1,opt,name=party_reference,json=partyReference,proto3" json:"party_reference,omitempty"`
	PartyId               *PieMessage_PartyInfo_PartyId             `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyName             []*PieMessage_PartyInfo_PartyName         `protobuf:"bytes,3,rep,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyType             string                                    `protobuf:"bytes,4,opt,name=party_type,json=partyType,proto3" json:"party_type,omitempty"` // e.g. "Person", "Corporation"
	Event                 []*PieMessage_PartyInfo_Event             `protobuf:"bytes,5,rep,name=event,proto3" json:"event,omitempty"`
	Gender                string                                    `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"` // e.g. "Male", "Female", "Non-Binary"
	Nationality           []*PieMessage_PartyInfo_Nationality       `protobuf:"bytes,7,rep,name=nationality,proto3" json:"nationality,omitempty"`
	PrimaryRole           string                                    `protobuf:"bytes,8,opt,name=primary_role,json=primaryRole,proto3" json:"primary_role,omitempty"` // e.g. "Artist", "Producer", "RecordLabel"
	ArtistType            []string                                  `protobuf:"bytes,9,rep,name=artist_type,json=artistType,proto3" json:"artist_type,omitempty"`    // e.g. "ElectronicMusicProducer", "DJ", "HipHopProducer"
	Biography             []*PieMessage_PartyInfo_Biography         `protobuf:"bytes,10,rep,name=biography,proto3" json:"biography,omitempty"`
	Image                 []*PieMessage_PartyInfo_Image             `protobuf:"bytes,11,rep,name=image,proto3" json:"image,omitempty"`
	SocialMediaUrl        []*PieMessage_PartyInfo_SocialMediaURL    `protobuf:"bytes,12,rep,name=social_media_url,json=socialMediaUrl,proto3" json:"social_media_url,omitempty"`
	RelatedParty          []*PieMessage_PartyInfo_RelatedParty      `protobuf:"bytes,13,rep,name=related_party,json=relatedParty,proto3" json:"related_party,omitempty"`
	ArtisticInfluence     []*PieMessage_PartyInfo_ArtisticInfluence `protobuf:"bytes,14,rep,name=artistic_influence,json=artisticInfluence,proto3" json:"artistic_influence,omitempty"`
	Award                 []*PieMessage_PartyInfo_Award             `protobuf:"bytes,15,rep,name=award,proto3" json:"award,omitempty"`
	LanguageAndScriptCode string                                    `protobuf:"bytes,16,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty"`
}

func (x *PieMessage_PartyInfo) Reset() {
	*x = PieMessage_PartyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo) ProtoMessage() {}

func (x *PieMessage_PartyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PieMessage_PartyInfo) GetPartyReference() string {
	if x != nil {
		return x.PartyReference
	}
	return ""
}

func (x *PieMessage_PartyInfo) GetPartyId() *PieMessage_PartyInfo_PartyId {
	if x != nil {
		return x.PartyId
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetPartyName() []*PieMessage_PartyInfo_PartyName {
	if x != nil {
		return x.PartyName
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetPartyType() string {
	if x != nil {
		return x.PartyType
	}
	return ""
}

func (x *PieMessage_PartyInfo) GetEvent() []*PieMessage_PartyInfo_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PieMessage_PartyInfo) GetNationality() []*PieMessage_PartyInfo_Nationality {
	if x != nil {
		return x.Nationality
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetPrimaryRole() string {
	if x != nil {
		return x.PrimaryRole
	}
	return ""
}

func (x *PieMessage_PartyInfo) GetArtistType() []string {
	if x != nil {
		return x.ArtistType
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetBiography() []*PieMessage_PartyInfo_Biography {
	if x != nil {
		return x.Biography
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetImage() []*PieMessage_PartyInfo_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetSocialMediaUrl() []*PieMessage_PartyInfo_SocialMediaURL {
	if x != nil {
		return x.SocialMediaUrl
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetRelatedParty() []*PieMessage_PartyInfo_RelatedParty {
	if x != nil {
		return x.RelatedParty
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetArtisticInfluence() []*PieMessage_PartyInfo_ArtisticInfluence {
	if x != nil {
		return x.ArtisticInfluence
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetAward() []*PieMessage_PartyInfo_Award {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *PieMessage_PartyInfo) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type PieMessage_PartyInfo_PartyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isni          string                                `protobuf:"bytes,1,opt,name=isni,proto3" json:"isni,omitempty"`
	Dpid          string                                `protobuf:"bytes,2,opt,name=dpid,proto3" json:"dpid,omitempty"`
	IpiNameNumber string                                `protobuf:"bytes,3,opt,name=ipi_name_number,json=ipiNameNumber,proto3" json:"ipi_name_number,omitempty"`
	ProprietaryId []*PieMessage_PartyInfo_ProprietaryId `protobuf:"bytes,4,rep,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty"`
}

func (x *PieMessage_PartyInfo_PartyId) Reset() {
	*x = PieMessage_PartyInfo_PartyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_PartyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_PartyId) ProtoMessage() {}

func (x *PieMessage_PartyInfo_PartyId) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_PartyId.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_PartyId) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PieMessage_PartyInfo_PartyId) GetIsni() string {
	if x != nil {
		return x.Isni
	}
	return ""
}

func (x *PieMessage_PartyInfo_PartyId) GetDpid() string {
	if x != nil {
		return x.Dpid
	}
	return ""
}

func (x *PieMessage_PartyInfo_PartyId) GetIpiNameNumber() string {
	if x != nil {
		return x.IpiNameNumber
	}
	return ""
}

func (x *PieMessage_PartyInfo_PartyId) GetProprietaryId() []*PieMessage_PartyInfo_ProprietaryId {
	if x != nil {
		return x.ProprietaryId
	}
	return nil
}

type PieMessage_PartyInfo_ProprietaryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *PieMessage_PartyInfo_ProprietaryId) Reset() {
	*x = PieMessage_PartyInfo_ProprietaryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_ProprietaryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_ProprietaryId) ProtoMessage() {}

func (x *PieMessage_PartyInfo_ProprietaryId) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_ProprietaryId.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_ProprietaryId) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *PieMessage_PartyInfo_ProprietaryId) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PieMessage_PartyInfo_ProprietaryId) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type PieMessage_PartyInfo_PartyName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataSourceReference *PieMessage_PartyInfo_MetadataSourceReference `protobuf:"bytes,1,opt,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty"`
	FullName                string                                        `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	PartyNameType           string                                        `protobuf:"bytes,3,opt,name=party_name_type,json=partyNameType,proto3" json:"party_name_type,omitempty"` // e.g. "LegalName", "ArtistName", "RegisteredName"
	NameId                  string                                        `protobuf:"bytes,4,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	Pronunciation           *PieMessage_PartyInfo_Pronunciation           `protobuf:"bytes,5,opt,name=pronunciation,proto3" json:"pronunciation,omitempty"`
	ApplicableTerritoryCode string                                        `protobuf:"bytes,6,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty"`
}

func (x *PieMessage_PartyInfo_PartyName) Reset() {
	*x = PieMessage_PartyInfo_PartyName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_PartyName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_PartyName) ProtoMessage() {}

func (x *PieMessage_PartyInfo_PartyName) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_PartyName.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_PartyName) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *PieMessage_PartyInfo_PartyName) GetMetadataSourceReference() *PieMessage_PartyInfo_MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *PieMessage_PartyInfo_PartyName) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *PieMessage_PartyInfo_PartyName) GetPartyNameType() string {
	if x != nil {
		return x.PartyNameType
	}
	return ""
}

func (x *PieMessage_PartyInfo_PartyName) GetNameId() string {
	if x != nil {
		return x.NameId
	}
	return ""
}

func (x *PieMessage_PartyInfo_PartyName) GetPronunciation() *PieMessage_PartyInfo_Pronunciation {
	if x != nil {
		return x.Pronunciation
	}
	return nil
}

func (x *PieMessage_PartyInfo_PartyName) GetApplicableTerritoryCode() string {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return ""
}

type PieMessage_PartyInfo_Pronunciation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodingType string `protobuf:"bytes,1,opt,name=encoding_type,json=encodingType,proto3" json:"encoding_type,omitempty"` // e.g. "IPA"
	Value        string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PieMessage_PartyInfo_Pronunciation) Reset() {
	*x = PieMessage_PartyInfo_Pronunciation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Pronunciation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Pronunciation) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Pronunciation) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Pronunciation.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Pronunciation) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *PieMessage_PartyInfo_Pronunciation) GetEncodingType() string {
	if x != nil {
		return x.EncodingType
	}
	return ""
}

func (x *PieMessage_PartyInfo_Pronunciation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PieMessage_PartyInfo_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataSourceReference *PieMessage_PartyInfo_MetadataSourceReference `protobuf:"bytes,1,opt,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty"`
	EventType               string                                        `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"` // e.g. "Birth", "Formation"
	EventDate               string                                        `protobuf:"bytes,3,opt,name=event_date,json=eventDate,proto3" json:"event_date,omitempty"`
	EventPlace              string                                        `protobuf:"bytes,4,opt,name=event_place,json=eventPlace,proto3" json:"event_place,omitempty"`
	ApplicableTerritoryCode string                                        `protobuf:"bytes,5,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty"`
}

func (x *PieMessage_PartyInfo_Event) Reset() {
	*x = PieMessage_PartyInfo_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Event) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Event) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Event.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Event) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *PieMessage_PartyInfo_Event) GetMetadataSourceReference() *PieMessage_PartyInfo_MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *PieMessage_PartyInfo_Event) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *PieMessage_PartyInfo_Event) GetEventDate() string {
	if x != nil {
		return x.EventDate
	}
	return ""
}

func (x *PieMessage_PartyInfo_Event) GetEventPlace() string {
	if x != nil {
		return x.EventPlace
	}
	return ""
}

func (x *PieMessage_PartyInfo_Event) GetApplicableTerritoryCode() string {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return ""
}

type PieMessage_PartyInfo_Nationality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nationality             string `protobuf:"bytes,1,opt,name=nationality,proto3" json:"nationality,omitempty"`
	ApplicableTerritoryCode string `protobuf:"bytes,2,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty"`
}

func (x *PieMessage_PartyInfo_Nationality) Reset() {
	*x = PieMessage_PartyInfo_Nationality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Nationality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Nationality) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Nationality) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Nationality.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Nationality) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (x *PieMessage_PartyInfo_Nationality) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *PieMessage_PartyInfo_Nationality) GetApplicableTerritoryCode() string {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return ""
}

type PieMessage_PartyInfo_Biography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataSourceReference *PieMessage_PartyInfo_MetadataSourceReference `protobuf:"bytes,1,opt,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty"`
	BiographyText           string                                        `protobuf:"bytes,2,opt,name=biography_text,json=biographyText,proto3" json:"biography_text,omitempty"`
	ApplicableTerritoryCode string                                        `protobuf:"bytes,3,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty"`
	Format                  string                                        `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"` // e.g. "text/plain"
}

func (x *PieMessage_PartyInfo_Biography) Reset() {
	*x = PieMessage_PartyInfo_Biography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Biography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Biography) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Biography) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Biography.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Biography) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 6}
}

func (x *PieMessage_PartyInfo_Biography) GetMetadataSourceReference() *PieMessage_PartyInfo_MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *PieMessage_PartyInfo_Biography) GetBiographyText() string {
	if x != nil {
		return x.BiographyText
	}
	return ""
}

func (x *PieMessage_PartyInfo_Biography) GetApplicableTerritoryCode() string {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return ""
}

func (x *PieMessage_PartyInfo_Biography) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type PieMessage_PartyInfo_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataSourceReference *PieMessage_PartyInfo_MetadataSourceReference `protobuf:"bytes,1,opt,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty"`
	File                    *PieMessage_PartyInfo_Image_File              `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	ImageType               string                                        `protobuf:"bytes,3,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"` // e.g. "FrontCoverImage"
}

func (x *PieMessage_PartyInfo_Image) Reset() {
	*x = PieMessage_PartyInfo_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Image) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Image) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Image.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Image) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 7}
}

func (x *PieMessage_PartyInfo_Image) GetMetadataSourceReference() *PieMessage_PartyInfo_MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *PieMessage_PartyInfo_Image) GetFile() *PieMessage_PartyInfo_Image_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *PieMessage_PartyInfo_Image) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

type PieMessage_PartyInfo_SocialMediaURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataSourceReference *PieMessage_PartyInfo_MetadataSourceReference `protobuf:"bytes,1,opt,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty"`
	Url                     string                                        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	SocialMediaType         string                                        `protobuf:"bytes,3,opt,name=social_media_type,json=socialMediaType,proto3" json:"social_media_type,omitempty"` // e.g. "MusicStreamingPlatform"
	ApplicableTerritoryCode string                                        `protobuf:"bytes,4,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty"`
}

func (x *PieMessage_PartyInfo_SocialMediaURL) Reset() {
	*x = PieMessage_PartyInfo_SocialMediaURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_SocialMediaURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_SocialMediaURL) ProtoMessage() {}

func (x *PieMessage_PartyInfo_SocialMediaURL) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_SocialMediaURL.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_SocialMediaURL) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 8}
}

func (x *PieMessage_PartyInfo_SocialMediaURL) GetMetadataSourceReference() *PieMessage_PartyInfo_MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *PieMessage_PartyInfo_SocialMediaURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PieMessage_PartyInfo_SocialMediaURL) GetSocialMediaType() string {
	if x != nil {
		return x.SocialMediaType
	}
	return ""
}

func (x *PieMessage_PartyInfo_SocialMediaURL) GetApplicableTerritoryCode() string {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return ""
}

type PieMessage_PartyInfo_RelatedParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyReference   string                                            `protobuf:"bytes,1,opt,name=party_reference,json=partyReference,proto3" json:"party_reference,omitempty"`
	RelationshipType string                                            `protobuf:"bytes,2,opt,name=relationship_type,json=relationshipType,proto3" json:"relationship_type,omitempty"` // e.g. "SignedArtist"
	ValidityPeriod   *PieMessage_PartyInfo_RelatedParty_ValidityPeriod `protobuf:"bytes,3,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
}

func (x *PieMessage_PartyInfo_RelatedParty) Reset() {
	*x = PieMessage_PartyInfo_RelatedParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_RelatedParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_RelatedParty) ProtoMessage() {}

func (x *PieMessage_PartyInfo_RelatedParty) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_RelatedParty.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_RelatedParty) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 9}
}

func (x *PieMessage_PartyInfo_RelatedParty) GetPartyReference() string {
	if x != nil {
		return x.PartyReference
	}
	return ""
}

func (x *PieMessage_PartyInfo_RelatedParty) GetRelationshipType() string {
	if x != nil {
		return x.RelationshipType
	}
	return ""
}

func (x *PieMessage_PartyInfo_RelatedParty) GetValidityPeriod() *PieMessage_PartyInfo_RelatedParty_ValidityPeriod {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

type PieMessage_PartyInfo_ArtisticInfluence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfluencedParty *PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty `protobuf:"bytes,1,opt,name=influenced_party,json=influencedParty,proto3" json:"influenced_party,omitempty"`
	InfluenceType   string                                                  `protobuf:"bytes,2,opt,name=influence_type,json=influenceType,proto3" json:"influence_type,omitempty"` // e.g. "Collaborator"
}

func (x *PieMessage_PartyInfo_ArtisticInfluence) Reset() {
	*x = PieMessage_PartyInfo_ArtisticInfluence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_ArtisticInfluence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_ArtisticInfluence) ProtoMessage() {}

func (x *PieMessage_PartyInfo_ArtisticInfluence) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_ArtisticInfluence.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_ArtisticInfluence) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 10}
}

func (x *PieMessage_PartyInfo_ArtisticInfluence) GetInfluencedParty() *PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty {
	if x != nil {
		return x.InfluencedParty
	}
	return nil
}

func (x *PieMessage_PartyInfo_ArtisticInfluence) GetInfluenceType() string {
	if x != nil {
		return x.InfluenceType
	}
	return ""
}

type PieMessage_PartyInfo_Award struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataSourceReference *PieMessage_PartyInfo_MetadataSourceReference `protobuf:"bytes,1,opt,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty"`
	AwardName               string                                        `protobuf:"bytes,2,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`
	AwardingInstitution     string                                        `protobuf:"bytes,3,opt,name=awarding_institution,json=awardingInstitution,proto3" json:"awarding_institution,omitempty"`
	AwardDate               string                                        `protobuf:"bytes,4,opt,name=award_date,json=awardDate,proto3" json:"award_date,omitempty"`
}

func (x *PieMessage_PartyInfo_Award) Reset() {
	*x = PieMessage_PartyInfo_Award{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Award) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Award) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Award.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Award) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 11}
}

func (x *PieMessage_PartyInfo_Award) GetMetadataSourceReference() *PieMessage_PartyInfo_MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *PieMessage_PartyInfo_Award) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *PieMessage_PartyInfo_Award) GetAwardingInstitution() string {
	if x != nil {
		return x.AwardingInstitution
	}
	return ""
}

func (x *PieMessage_PartyInfo_Award) GetAwardDate() string {
	if x != nil {
		return x.AwardDate
	}
	return ""
}

type PieMessage_PartyInfo_MetadataSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceReference   string                 `protobuf:"bytes,1,opt,name=source_reference,json=sourceReference,proto3" json:"source_reference,omitempty"`
	AssertionDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=assertion_date_time,json=assertionDateTime,proto3" json:"assertion_date_time,omitempty"`
	Status            string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // e.g. "Verified", "CommunityVerified"
}

func (x *PieMessage_PartyInfo_MetadataSourceReference) Reset() {
	*x = PieMessage_PartyInfo_MetadataSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_MetadataSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_MetadataSourceReference) ProtoMessage() {}

func (x *PieMessage_PartyInfo_MetadataSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_MetadataSourceReference.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_MetadataSourceReference) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 12}
}

func (x *PieMessage_PartyInfo_MetadataSourceReference) GetSourceReference() string {
	if x != nil {
		return x.SourceReference
	}
	return ""
}

func (x *PieMessage_PartyInfo_MetadataSourceReference) GetAssertionDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AssertionDateTime
	}
	return nil
}

func (x *PieMessage_PartyInfo_MetadataSourceReference) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PieMessage_PartyInfo_Image_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileSize uint64 `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
}

func (x *PieMessage_PartyInfo_Image_File) Reset() {
	*x = PieMessage_PartyInfo_Image_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_Image_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_Image_File) ProtoMessage() {}

func (x *PieMessage_PartyInfo_Image_File) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_Image_File.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_Image_File) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 7, 0}
}

func (x *PieMessage_PartyInfo_Image_File) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *PieMessage_PartyInfo_Image_File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *PieMessage_PartyInfo_Image_File) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type PieMessage_PartyInfo_RelatedParty_ValidityPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *PieMessage_PartyInfo_RelatedParty_ValidityPeriod) Reset() {
	*x = PieMessage_PartyInfo_RelatedParty_ValidityPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_RelatedParty_ValidityPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_RelatedParty_ValidityPeriod) ProtoMessage() {}

func (x *PieMessage_PartyInfo_RelatedParty_ValidityPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_RelatedParty_ValidityPeriod.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_RelatedParty_ValidityPeriod) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 9, 0}
}

func (x *PieMessage_PartyInfo_RelatedParty_ValidityPeriod) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *PieMessage_PartyInfo_RelatedParty_ValidityPeriod) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyReference string `protobuf:"bytes,1,opt,name=party_reference,json=partyReference,proto3" json:"party_reference,omitempty"`
}

func (x *PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty) Reset() {
	*x = PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty) ProtoMessage() {}

func (x *PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 10, 0}
}

func (x *PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty) GetPartyReference() string {
	if x != nil {
		return x.PartyReference
	}
	return ""
}

var File_ddex_v1beta1_pie_proto protoreflect.FileDescriptor

var file_ddex_v1beta1_pie_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70,
	0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x19, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc1, 0x21, 0x0a, 0x0a, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa6, 0x1e,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x50, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x69, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x52, 0x0e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x54,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73,
	0x6e, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x70, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x69, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xf5, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x4a,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9a, 0x02, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x6b, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0xfe, 0x01, 0x0a, 0x09, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x12, 0x76, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xb5, 0x02, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x76, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x52, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x82, 0x02,
	0x0a, 0x0e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c,
	0x12, 0x76, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x99, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x1a, 0x4a, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xe7,
	0x01, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0f,
	0x49, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xf0, 0x01, 0x0a, 0x05, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x76, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x17,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x75, 0x73, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ddex_v1beta1_pie_proto_rawDescOnce sync.Once
	file_ddex_v1beta1_pie_proto_rawDescData = file_ddex_v1beta1_pie_proto_rawDesc
)

func file_ddex_v1beta1_pie_proto_rawDescGZIP() []byte {
	file_ddex_v1beta1_pie_proto_rawDescOnce.Do(func() {
		file_ddex_v1beta1_pie_proto_rawDescData = protoimpl.X.CompressGZIP(file_ddex_v1beta1_pie_proto_rawDescData)
	})
	return file_ddex_v1beta1_pie_proto_rawDescData
}

var file_ddex_v1beta1_pie_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ddex_v1beta1_pie_proto_goTypes = []interface{}{
	(*PieMessage)(nil),                                             // 0: ddex.v1beta1.PieMessage
	(*PieMessage_MetadataSource)(nil),                              // 1: ddex.v1beta1.PieMessage.MetadataSource
	(*PieMessage_PartyInfo)(nil),                                   // 2: ddex.v1beta1.PieMessage.PartyInfo
	(*PieMessage_PartyInfo_PartyId)(nil),                           // 3: ddex.v1beta1.PieMessage.PartyInfo.PartyId
	(*PieMessage_PartyInfo_ProprietaryId)(nil),                     // 4: ddex.v1beta1.PieMessage.PartyInfo.ProprietaryId
	(*PieMessage_PartyInfo_PartyName)(nil),                         // 5: ddex.v1beta1.PieMessage.PartyInfo.PartyName
	(*PieMessage_PartyInfo_Pronunciation)(nil),                     // 6: ddex.v1beta1.PieMessage.PartyInfo.Pronunciation
	(*PieMessage_PartyInfo_Event)(nil),                             // 7: ddex.v1beta1.PieMessage.PartyInfo.Event
	(*PieMessage_PartyInfo_Nationality)(nil),                       // 8: ddex.v1beta1.PieMessage.PartyInfo.Nationality
	(*PieMessage_PartyInfo_Biography)(nil),                         // 9: ddex.v1beta1.PieMessage.PartyInfo.Biography
	(*PieMessage_PartyInfo_Image)(nil),                             // 10: ddex.v1beta1.PieMessage.PartyInfo.Image
	(*PieMessage_PartyInfo_SocialMediaURL)(nil),                    // 11: ddex.v1beta1.PieMessage.PartyInfo.SocialMediaURL
	(*PieMessage_PartyInfo_RelatedParty)(nil),                      // 12: ddex.v1beta1.PieMessage.PartyInfo.RelatedParty
	(*PieMessage_PartyInfo_ArtisticInfluence)(nil),                 // 13: ddex.v1beta1.PieMessage.PartyInfo.ArtisticInfluence
	(*PieMessage_PartyInfo_Award)(nil),                             // 14: ddex.v1beta1.PieMessage.PartyInfo.Award
	(*PieMessage_PartyInfo_MetadataSourceReference)(nil),           // 15: ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	(*PieMessage_PartyInfo_Image_File)(nil),                        // 16: ddex.v1beta1.PieMessage.PartyInfo.Image.File
	(*PieMessage_PartyInfo_RelatedParty_ValidityPeriod)(nil),       // 17: ddex.v1beta1.PieMessage.PartyInfo.RelatedParty.ValidityPeriod
	(*PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty)(nil), // 18: ddex.v1beta1.PieMessage.PartyInfo.ArtisticInfluence.InfluencedParty
	(*MessageHeader)(nil),                                          // 19: ddex.v1beta1.MessageHeader
	(*timestamppb.Timestamp)(nil),                                  // 20: google.protobuf.Timestamp
}
var file_ddex_v1beta1_pie_proto_depIdxs = []int32{
	19, // 0: ddex.v1beta1.PieMessage.message_header:type_name -> ddex.v1beta1.MessageHeader
	1,  // 1: ddex.v1beta1.PieMessage.metadata_source_list:type_name -> ddex.v1beta1.PieMessage.MetadataSource
	2,  // 2: ddex.v1beta1.PieMessage.party_list:type_name -> ddex.v1beta1.PieMessage.PartyInfo
	3,  // 3: ddex.v1beta1.PieMessage.PartyInfo.party_id:type_name -> ddex.v1beta1.PieMessage.PartyInfo.PartyId
	5,  // 4: ddex.v1beta1.PieMessage.PartyInfo.party_name:type_name -> ddex.v1beta1.PieMessage.PartyInfo.PartyName
	7,  // 5: ddex.v1beta1.PieMessage.PartyInfo.event:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Event
	8,  // 6: ddex.v1beta1.PieMessage.PartyInfo.nationality:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Nationality
	9,  // 7: ddex.v1beta1.PieMessage.PartyInfo.biography:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Biography
	10, // 8: ddex.v1beta1.PieMessage.PartyInfo.image:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Image
	11, // 9: ddex.v1beta1.PieMessage.PartyInfo.social_media_url:type_name -> ddex.v1beta1.PieMessage.PartyInfo.SocialMediaURL
	12, // 10: ddex.v1beta1.PieMessage.PartyInfo.related_party:type_name -> ddex.v1beta1.PieMessage.PartyInfo.RelatedParty
	13, // 11: ddex.v1beta1.PieMessage.PartyInfo.artistic_influence:type_name -> ddex.v1beta1.PieMessage.PartyInfo.ArtisticInfluence
	14, // 12: ddex.v1beta1.PieMessage.PartyInfo.award:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Award
	4,  // 13: ddex.v1beta1.PieMessage.PartyInfo.PartyId.proprietary_id:type_name -> ddex.v1beta1.PieMessage.PartyInfo.ProprietaryId
	15, // 14: ddex.v1beta1.PieMessage.PartyInfo.PartyName.metadata_source_reference:type_name -> ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	6,  // 15: ddex.v1beta1.PieMessage.PartyInfo.PartyName.pronunciation:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Pronunciation
	15, // 16: ddex.v1beta1.PieMessage.PartyInfo.Event.metadata_source_reference:type_name -> ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	15, // 17: ddex.v1beta1.PieMessage.PartyInfo.Biography.metadata_source_reference:type_name -> ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	15, // 18: ddex.v1beta1.PieMessage.PartyInfo.Image.metadata_source_reference:type_name -> ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	16, // 19: ddex.v1beta1.PieMessage.PartyInfo.Image.file:type_name -> ddex.v1beta1.PieMessage.PartyInfo.Image.File
	15, // 20: ddex.v1beta1.PieMessage.PartyInfo.SocialMediaURL.metadata_source_reference:type_name -> ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	17, // 21: ddex.v1beta1.PieMessage.PartyInfo.RelatedParty.validity_period:type_name -> ddex.v1beta1.PieMessage.PartyInfo.RelatedParty.ValidityPeriod
	18, // 22: ddex.v1beta1.PieMessage.PartyInfo.ArtisticInfluence.influenced_party:type_name -> ddex.v1beta1.PieMessage.PartyInfo.ArtisticInfluence.InfluencedParty
	15, // 23: ddex.v1beta1.PieMessage.PartyInfo.Award.metadata_source_reference:type_name -> ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference
	20, // 24: ddex.v1beta1.PieMessage.PartyInfo.MetadataSourceReference.assertion_date_time:type_name -> google.protobuf.Timestamp
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ddex_v1beta1_pie_proto_init() }
func file_ddex_v1beta1_pie_proto_init() {
	if File_ddex_v1beta1_pie_proto != nil {
		return
	}
	file_ddex_v1beta1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ddex_v1beta1_pie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_MetadataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_PartyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_ProprietaryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_PartyName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Pronunciation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Nationality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Biography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_SocialMediaURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_RelatedParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_ArtisticInfluence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Award); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_MetadataSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_Image_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_RelatedParty_ValidityPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyInfo_ArtisticInfluence_InfluencedParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ddex_v1beta1_pie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddex_v1beta1_pie_proto_goTypes,
		DependencyIndexes: file_ddex_v1beta1_pie_proto_depIdxs,
		MessageInfos:      file_ddex_v1beta1_pie_proto_msgTypes,
	}.Build()
	File_ddex_v1beta1_pie_proto = out.File
	file_ddex_v1beta1_pie_proto_rawDesc = nil
	file_ddex_v1beta1_pie_proto_goTypes = nil
	file_ddex_v1beta1_pie_proto_depIdxs = nil
}
