// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ddex/v1beta1/pie.proto

package v1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Party Identification and Enrichment (PIE) message from the DDEX standard
type PieMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageHeader *MessageHeader        `protobuf:"bytes,1,opt,name=message_header,json=messageHeader,proto3" json:"message_header,omitempty"`
	PartyList     *PieMessage_PartyList `protobuf:"bytes,2,opt,name=party_list,json=partyList,proto3" json:"party_list,omitempty"`
}

func (x *PieMessage) Reset() {
	*x = PieMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage) ProtoMessage() {}

func (x *PieMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage.ProtoReflect.Descriptor instead.
func (*PieMessage) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0}
}

func (x *PieMessage) GetMessageHeader() *MessageHeader {
	if x != nil {
		return x.MessageHeader
	}
	return nil
}

func (x *PieMessage) GetPartyList() *PieMessage_PartyList {
	if x != nil {
		return x.PartyList
	}
	return nil
}

type PieMessage_PartyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party []*PieMessage_Party `protobuf:"bytes,1,rep,name=party,proto3" json:"party,omitempty"`
}

func (x *PieMessage_PartyList) Reset() {
	*x = PieMessage_PartyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_PartyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_PartyList) ProtoMessage() {}

func (x *PieMessage_PartyList) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_PartyList.ProtoReflect.Descriptor instead.
func (*PieMessage_PartyList) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PieMessage_PartyList) GetParty() []*PieMessage_Party {
	if x != nil {
		return x.Party
	}
	return nil
}

type PieMessage_Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyReference string                      `protobuf:"bytes,1,opt,name=party_reference,json=partyReference,proto3" json:"party_reference,omitempty"`
	PartyId        *Party_PartyId              `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyName      *Party_PartyName            `protobuf:"bytes,3,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyType      *PieMessage_Party_PartyType `protobuf:"bytes,4,opt,name=party_type,json=partyType,proto3" json:"party_type,omitempty"`
	// optional enrichment fields
	Handles  []*PieMessage_Handle   `protobuf:"bytes,5,rep,name=handles,proto3" json:"handles,omitempty"`
	Verified []*PieMessage_Verified `protobuf:"bytes,6,rep,name=verified,proto3" json:"verified,omitempty"`
	Awards   []*PieMessage_Award    `protobuf:"bytes,7,rep,name=awards,proto3" json:"awards,omitempty"`
}

func (x *PieMessage_Party) Reset() {
	*x = PieMessage_Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Party) ProtoMessage() {}

func (x *PieMessage_Party) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Party.ProtoReflect.Descriptor instead.
func (*PieMessage_Party) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PieMessage_Party) GetPartyReference() string {
	if x != nil {
		return x.PartyReference
	}
	return ""
}

func (x *PieMessage_Party) GetPartyId() *Party_PartyId {
	if x != nil {
		return x.PartyId
	}
	return nil
}

func (x *PieMessage_Party) GetPartyName() *Party_PartyName {
	if x != nil {
		return x.PartyName
	}
	return nil
}

func (x *PieMessage_Party) GetPartyType() *PieMessage_Party_PartyType {
	if x != nil {
		return x.PartyType
	}
	return nil
}

func (x *PieMessage_Party) GetHandles() []*PieMessage_Handle {
	if x != nil {
		return x.Handles
	}
	return nil
}

func (x *PieMessage_Party) GetVerified() []*PieMessage_Verified {
	if x != nil {
		return x.Verified
	}
	return nil
}

func (x *PieMessage_Party) GetAwards() []*PieMessage_Award {
	if x != nil {
		return x.Awards
	}
	return nil
}

type PieMessage_Handle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "audius" or "twitter"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the handle value, e.g. "audius_user_id" or "twitter_handle"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PieMessage_Handle) Reset() {
	*x = PieMessage_Handle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Handle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Handle) ProtoMessage() {}

func (x *PieMessage_Handle) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Handle.ProtoReflect.Descriptor instead.
func (*PieMessage_Handle) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PieMessage_Handle) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PieMessage_Handle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PieMessage_Verified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "audius" or "twitter"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// true if the handle is verified, false otherwise
	Verified bool `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *PieMessage_Verified) Reset() {
	*x = PieMessage_Verified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Verified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Verified) ProtoMessage() {}

func (x *PieMessage_Verified) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Verified.ProtoReflect.Descriptor instead.
func (*PieMessage_Verified) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PieMessage_Verified) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PieMessage_Verified) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

// Official DDEX Award structure based on PIE specification
type PieMessage_Award struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardingBody *PieMessage_Award_AwardingBody `protobuf:"bytes,1,opt,name=awarding_body,json=awardingBody,proto3" json:"awarding_body,omitempty"`
	AwardedParty *PieMessage_Award_AwardedParty `protobuf:"bytes,2,opt,name=awarded_party,json=awardedParty,proto3" json:"awarded_party,omitempty"`
	AwardName    string                         `protobuf:"bytes,3,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`
	Date         string                         `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"` // ISO 8601 format: YYYY-MM-DD
	IsWinner     bool                           `protobuf:"varint,5,opt,name=is_winner,json=isWinner,proto3" json:"is_winner,omitempty"`
	Comment      *string                        `protobuf:"bytes,6,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *PieMessage_Award) Reset() {
	*x = PieMessage_Award{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Award) ProtoMessage() {}

func (x *PieMessage_Award) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Award.ProtoReflect.Descriptor instead.
func (*PieMessage_Award) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PieMessage_Award) GetAwardingBody() *PieMessage_Award_AwardingBody {
	if x != nil {
		return x.AwardingBody
	}
	return nil
}

func (x *PieMessage_Award) GetAwardedParty() *PieMessage_Award_AwardedParty {
	if x != nil {
		return x.AwardedParty
	}
	return nil
}

func (x *PieMessage_Award) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *PieMessage_Award) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PieMessage_Award) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *PieMessage_Award) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PieMessage_Party_PartyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PieMessage_Party_PartyType) Reset() {
	*x = PieMessage_Party_PartyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Party_PartyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Party_PartyType) ProtoMessage() {}

func (x *PieMessage_Party_PartyType) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Party_PartyType.ProtoReflect.Descriptor instead.
func (*PieMessage_Party_PartyType) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PieMessage_Party_PartyType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PieMessage_Award_AwardingBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyName *Party_PartyName `protobuf:"bytes,1,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyId   *Party_PartyId   `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3,oneof" json:"party_id,omitempty"`
}

func (x *PieMessage_Award_AwardingBody) Reset() {
	*x = PieMessage_Award_AwardingBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Award_AwardingBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Award_AwardingBody) ProtoMessage() {}

func (x *PieMessage_Award_AwardingBody) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Award_AwardingBody.ProtoReflect.Descriptor instead.
func (*PieMessage_Award_AwardingBody) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *PieMessage_Award_AwardingBody) GetPartyName() *Party_PartyName {
	if x != nil {
		return x.PartyName
	}
	return nil
}

func (x *PieMessage_Award_AwardingBody) GetPartyId() *Party_PartyId {
	if x != nil {
		return x.PartyId
	}
	return nil
}

type PieMessage_Award_AwardedParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyName *Party_PartyName `protobuf:"bytes,1,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyId   *Party_PartyId   `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3,oneof" json:"party_id,omitempty"`
}

func (x *PieMessage_Award_AwardedParty) Reset() {
	*x = PieMessage_Award_AwardedParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta1_pie_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieMessage_Award_AwardedParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieMessage_Award_AwardedParty) ProtoMessage() {}

func (x *PieMessage_Award_AwardedParty) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta1_pie_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieMessage_Award_AwardedParty.ProtoReflect.Descriptor instead.
func (*PieMessage_Award_AwardedParty) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta1_pie_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *PieMessage_Award_AwardedParty) GetPartyName() *Party_PartyName {
	if x != nil {
		return x.PartyName
	}
	return nil
}

func (x *PieMessage_Award_AwardedParty) GetPartyId() *Party_PartyId {
	if x != nil {
		return x.PartyId
	}
	return nil
}

var File_ddex_v1beta1_pie_proto protoreflect.FileDescriptor

var file_ddex_v1beta1_pie_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70,
	0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x19, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x0a, 0x0a, 0x0a,
	0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x41, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x1a, 0xc4, 0x03, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x21, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x32, 0x0a, 0x06, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x3a, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xd8, 0x04, 0x0a, 0x05,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x69,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x96, 0x01, 0x0a, 0x0c, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x1a, 0x96, 0x01, 0x0a, 0x0c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x75, 0x73, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ddex_v1beta1_pie_proto_rawDescOnce sync.Once
	file_ddex_v1beta1_pie_proto_rawDescData = file_ddex_v1beta1_pie_proto_rawDesc
)

func file_ddex_v1beta1_pie_proto_rawDescGZIP() []byte {
	file_ddex_v1beta1_pie_proto_rawDescOnce.Do(func() {
		file_ddex_v1beta1_pie_proto_rawDescData = protoimpl.X.CompressGZIP(file_ddex_v1beta1_pie_proto_rawDescData)
	})
	return file_ddex_v1beta1_pie_proto_rawDescData
}

var file_ddex_v1beta1_pie_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ddex_v1beta1_pie_proto_goTypes = []interface{}{
	(*PieMessage)(nil),                    // 0: ddex.v1beta1.PieMessage
	(*PieMessage_PartyList)(nil),          // 1: ddex.v1beta1.PieMessage.PartyList
	(*PieMessage_Party)(nil),              // 2: ddex.v1beta1.PieMessage.Party
	(*PieMessage_Handle)(nil),             // 3: ddex.v1beta1.PieMessage.Handle
	(*PieMessage_Verified)(nil),           // 4: ddex.v1beta1.PieMessage.Verified
	(*PieMessage_Award)(nil),              // 5: ddex.v1beta1.PieMessage.Award
	(*PieMessage_Party_PartyType)(nil),    // 6: ddex.v1beta1.PieMessage.Party.PartyType
	(*PieMessage_Award_AwardingBody)(nil), // 7: ddex.v1beta1.PieMessage.Award.AwardingBody
	(*PieMessage_Award_AwardedParty)(nil), // 8: ddex.v1beta1.PieMessage.Award.AwardedParty
	(*MessageHeader)(nil),                 // 9: ddex.v1beta1.MessageHeader
	(*Party_PartyId)(nil),                 // 10: ddex.v1beta1.Party.PartyId
	(*Party_PartyName)(nil),               // 11: ddex.v1beta1.Party.PartyName
}
var file_ddex_v1beta1_pie_proto_depIdxs = []int32{
	9,  // 0: ddex.v1beta1.PieMessage.message_header:type_name -> ddex.v1beta1.MessageHeader
	1,  // 1: ddex.v1beta1.PieMessage.party_list:type_name -> ddex.v1beta1.PieMessage.PartyList
	2,  // 2: ddex.v1beta1.PieMessage.PartyList.party:type_name -> ddex.v1beta1.PieMessage.Party
	10, // 3: ddex.v1beta1.PieMessage.Party.party_id:type_name -> ddex.v1beta1.Party.PartyId
	11, // 4: ddex.v1beta1.PieMessage.Party.party_name:type_name -> ddex.v1beta1.Party.PartyName
	6,  // 5: ddex.v1beta1.PieMessage.Party.party_type:type_name -> ddex.v1beta1.PieMessage.Party.PartyType
	3,  // 6: ddex.v1beta1.PieMessage.Party.handles:type_name -> ddex.v1beta1.PieMessage.Handle
	4,  // 7: ddex.v1beta1.PieMessage.Party.verified:type_name -> ddex.v1beta1.PieMessage.Verified
	5,  // 8: ddex.v1beta1.PieMessage.Party.awards:type_name -> ddex.v1beta1.PieMessage.Award
	7,  // 9: ddex.v1beta1.PieMessage.Award.awarding_body:type_name -> ddex.v1beta1.PieMessage.Award.AwardingBody
	8,  // 10: ddex.v1beta1.PieMessage.Award.awarded_party:type_name -> ddex.v1beta1.PieMessage.Award.AwardedParty
	11, // 11: ddex.v1beta1.PieMessage.Award.AwardingBody.party_name:type_name -> ddex.v1beta1.Party.PartyName
	10, // 12: ddex.v1beta1.PieMessage.Award.AwardingBody.party_id:type_name -> ddex.v1beta1.Party.PartyId
	11, // 13: ddex.v1beta1.PieMessage.Award.AwardedParty.party_name:type_name -> ddex.v1beta1.Party.PartyName
	10, // 14: ddex.v1beta1.PieMessage.Award.AwardedParty.party_id:type_name -> ddex.v1beta1.Party.PartyId
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ddex_v1beta1_pie_proto_init() }
func file_ddex_v1beta1_pie_proto_init() {
	if File_ddex_v1beta1_pie_proto != nil {
		return
	}
	file_ddex_v1beta1_common_proto_init()
	file_ddex_v1beta1_party_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ddex_v1beta1_pie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_PartyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Handle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Verified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Award); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Party_PartyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Award_AwardingBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta1_pie_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieMessage_Award_AwardedParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ddex_v1beta1_pie_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_ddex_v1beta1_pie_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_ddex_v1beta1_pie_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ddex_v1beta1_pie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddex_v1beta1_pie_proto_goTypes,
		DependencyIndexes: file_ddex_v1beta1_pie_proto_depIdxs,
		MessageInfos:      file_ddex_v1beta1_pie_proto_msgTypes,
	}.Build()
	File_ddex_v1beta1_pie_proto = out.File
	file_ddex_v1beta1_pie_proto_rawDesc = nil
	file_ddex_v1beta1_pie_proto_goTypes = nil
	file_ddex_v1beta1_pie_proto_depIdxs = nil
}
