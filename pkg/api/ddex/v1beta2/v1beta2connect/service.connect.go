// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ddex/v1beta2/service.proto

package v1beta2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta2 "github.com/AudiusProject/audiusd/pkg/api/ddex/v1beta2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DDEXServiceName is the fully-qualified name of the DDEXService service.
	DDEXServiceName = "ddex.v1beta2.DDEXService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DDEXServiceProcessNewReleaseMessageProcedure is the fully-qualified name of the DDEXService's
	// ProcessNewReleaseMessage RPC.
	DDEXServiceProcessNewReleaseMessageProcedure = "/ddex.v1beta2.DDEXService/ProcessNewReleaseMessage"
	// DDEXServiceGetReleaseProcedure is the fully-qualified name of the DDEXService's GetRelease RPC.
	DDEXServiceGetReleaseProcedure = "/ddex.v1beta2.DDEXService/GetRelease"
	// DDEXServiceSearchReleasesProcedure is the fully-qualified name of the DDEXService's
	// SearchReleases RPC.
	DDEXServiceSearchReleasesProcedure = "/ddex.v1beta2.DDEXService/SearchReleases"
	// DDEXServiceGetSoundRecordingProcedure is the fully-qualified name of the DDEXService's
	// GetSoundRecording RPC.
	DDEXServiceGetSoundRecordingProcedure = "/ddex.v1beta2.DDEXService/GetSoundRecording"
	// DDEXServiceValidateMessageProcedure is the fully-qualified name of the DDEXService's
	// ValidateMessage RPC.
	DDEXServiceValidateMessageProcedure = "/ddex.v1beta2.DDEXService/ValidateMessage"
)

// DDEXServiceClient is a client for the ddex.v1beta2.DDEXService service.
type DDEXServiceClient interface {
	// Process a new release message
	ProcessNewReleaseMessage(context.Context, *connect.Request[v1beta2.ProcessNewReleaseMessageRequest]) (*connect.Response[v1beta2.ProcessNewReleaseMessageResponse], error)
	// Get release information by ID
	GetRelease(context.Context, *connect.Request[v1beta2.GetReleaseRequest]) (*connect.Response[v1beta2.GetReleaseResponse], error)
	// Search for releases
	SearchReleases(context.Context, *connect.Request[v1beta2.SearchReleasesRequest]) (*connect.Response[v1beta2.SearchReleasesResponse], error)
	// Get sound recording information
	GetSoundRecording(context.Context, *connect.Request[v1beta2.GetSoundRecordingRequest]) (*connect.Response[v1beta2.GetSoundRecordingResponse], error)
	// Validate a DDEX message
	ValidateMessage(context.Context, *connect.Request[v1beta2.ValidateMessageRequest]) (*connect.Response[v1beta2.ValidateMessageResponse], error)
}

// NewDDEXServiceClient constructs a client for the ddex.v1beta2.DDEXService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDDEXServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DDEXServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dDEXServiceMethods := v1beta2.File_ddex_v1beta2_service_proto.Services().ByName("DDEXService").Methods()
	return &dDEXServiceClient{
		processNewReleaseMessage: connect.NewClient[v1beta2.ProcessNewReleaseMessageRequest, v1beta2.ProcessNewReleaseMessageResponse](
			httpClient,
			baseURL+DDEXServiceProcessNewReleaseMessageProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("ProcessNewReleaseMessage")),
			connect.WithClientOptions(opts...),
		),
		getRelease: connect.NewClient[v1beta2.GetReleaseRequest, v1beta2.GetReleaseResponse](
			httpClient,
			baseURL+DDEXServiceGetReleaseProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("GetRelease")),
			connect.WithClientOptions(opts...),
		),
		searchReleases: connect.NewClient[v1beta2.SearchReleasesRequest, v1beta2.SearchReleasesResponse](
			httpClient,
			baseURL+DDEXServiceSearchReleasesProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("SearchReleases")),
			connect.WithClientOptions(opts...),
		),
		getSoundRecording: connect.NewClient[v1beta2.GetSoundRecordingRequest, v1beta2.GetSoundRecordingResponse](
			httpClient,
			baseURL+DDEXServiceGetSoundRecordingProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("GetSoundRecording")),
			connect.WithClientOptions(opts...),
		),
		validateMessage: connect.NewClient[v1beta2.ValidateMessageRequest, v1beta2.ValidateMessageResponse](
			httpClient,
			baseURL+DDEXServiceValidateMessageProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("ValidateMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dDEXServiceClient implements DDEXServiceClient.
type dDEXServiceClient struct {
	processNewReleaseMessage *connect.Client[v1beta2.ProcessNewReleaseMessageRequest, v1beta2.ProcessNewReleaseMessageResponse]
	getRelease               *connect.Client[v1beta2.GetReleaseRequest, v1beta2.GetReleaseResponse]
	searchReleases           *connect.Client[v1beta2.SearchReleasesRequest, v1beta2.SearchReleasesResponse]
	getSoundRecording        *connect.Client[v1beta2.GetSoundRecordingRequest, v1beta2.GetSoundRecordingResponse]
	validateMessage          *connect.Client[v1beta2.ValidateMessageRequest, v1beta2.ValidateMessageResponse]
}

// ProcessNewReleaseMessage calls ddex.v1beta2.DDEXService.ProcessNewReleaseMessage.
func (c *dDEXServiceClient) ProcessNewReleaseMessage(ctx context.Context, req *connect.Request[v1beta2.ProcessNewReleaseMessageRequest]) (*connect.Response[v1beta2.ProcessNewReleaseMessageResponse], error) {
	return c.processNewReleaseMessage.CallUnary(ctx, req)
}

// GetRelease calls ddex.v1beta2.DDEXService.GetRelease.
func (c *dDEXServiceClient) GetRelease(ctx context.Context, req *connect.Request[v1beta2.GetReleaseRequest]) (*connect.Response[v1beta2.GetReleaseResponse], error) {
	return c.getRelease.CallUnary(ctx, req)
}

// SearchReleases calls ddex.v1beta2.DDEXService.SearchReleases.
func (c *dDEXServiceClient) SearchReleases(ctx context.Context, req *connect.Request[v1beta2.SearchReleasesRequest]) (*connect.Response[v1beta2.SearchReleasesResponse], error) {
	return c.searchReleases.CallUnary(ctx, req)
}

// GetSoundRecording calls ddex.v1beta2.DDEXService.GetSoundRecording.
func (c *dDEXServiceClient) GetSoundRecording(ctx context.Context, req *connect.Request[v1beta2.GetSoundRecordingRequest]) (*connect.Response[v1beta2.GetSoundRecordingResponse], error) {
	return c.getSoundRecording.CallUnary(ctx, req)
}

// ValidateMessage calls ddex.v1beta2.DDEXService.ValidateMessage.
func (c *dDEXServiceClient) ValidateMessage(ctx context.Context, req *connect.Request[v1beta2.ValidateMessageRequest]) (*connect.Response[v1beta2.ValidateMessageResponse], error) {
	return c.validateMessage.CallUnary(ctx, req)
}

// DDEXServiceHandler is an implementation of the ddex.v1beta2.DDEXService service.
type DDEXServiceHandler interface {
	// Process a new release message
	ProcessNewReleaseMessage(context.Context, *connect.Request[v1beta2.ProcessNewReleaseMessageRequest]) (*connect.Response[v1beta2.ProcessNewReleaseMessageResponse], error)
	// Get release information by ID
	GetRelease(context.Context, *connect.Request[v1beta2.GetReleaseRequest]) (*connect.Response[v1beta2.GetReleaseResponse], error)
	// Search for releases
	SearchReleases(context.Context, *connect.Request[v1beta2.SearchReleasesRequest]) (*connect.Response[v1beta2.SearchReleasesResponse], error)
	// Get sound recording information
	GetSoundRecording(context.Context, *connect.Request[v1beta2.GetSoundRecordingRequest]) (*connect.Response[v1beta2.GetSoundRecordingResponse], error)
	// Validate a DDEX message
	ValidateMessage(context.Context, *connect.Request[v1beta2.ValidateMessageRequest]) (*connect.Response[v1beta2.ValidateMessageResponse], error)
}

// NewDDEXServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDDEXServiceHandler(svc DDEXServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dDEXServiceMethods := v1beta2.File_ddex_v1beta2_service_proto.Services().ByName("DDEXService").Methods()
	dDEXServiceProcessNewReleaseMessageHandler := connect.NewUnaryHandler(
		DDEXServiceProcessNewReleaseMessageProcedure,
		svc.ProcessNewReleaseMessage,
		connect.WithSchema(dDEXServiceMethods.ByName("ProcessNewReleaseMessage")),
		connect.WithHandlerOptions(opts...),
	)
	dDEXServiceGetReleaseHandler := connect.NewUnaryHandler(
		DDEXServiceGetReleaseProcedure,
		svc.GetRelease,
		connect.WithSchema(dDEXServiceMethods.ByName("GetRelease")),
		connect.WithHandlerOptions(opts...),
	)
	dDEXServiceSearchReleasesHandler := connect.NewUnaryHandler(
		DDEXServiceSearchReleasesProcedure,
		svc.SearchReleases,
		connect.WithSchema(dDEXServiceMethods.ByName("SearchReleases")),
		connect.WithHandlerOptions(opts...),
	)
	dDEXServiceGetSoundRecordingHandler := connect.NewUnaryHandler(
		DDEXServiceGetSoundRecordingProcedure,
		svc.GetSoundRecording,
		connect.WithSchema(dDEXServiceMethods.ByName("GetSoundRecording")),
		connect.WithHandlerOptions(opts...),
	)
	dDEXServiceValidateMessageHandler := connect.NewUnaryHandler(
		DDEXServiceValidateMessageProcedure,
		svc.ValidateMessage,
		connect.WithSchema(dDEXServiceMethods.ByName("ValidateMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ddex.v1beta2.DDEXService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DDEXServiceProcessNewReleaseMessageProcedure:
			dDEXServiceProcessNewReleaseMessageHandler.ServeHTTP(w, r)
		case DDEXServiceGetReleaseProcedure:
			dDEXServiceGetReleaseHandler.ServeHTTP(w, r)
		case DDEXServiceSearchReleasesProcedure:
			dDEXServiceSearchReleasesHandler.ServeHTTP(w, r)
		case DDEXServiceGetSoundRecordingProcedure:
			dDEXServiceGetSoundRecordingHandler.ServeHTTP(w, r)
		case DDEXServiceValidateMessageProcedure:
			dDEXServiceValidateMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDDEXServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDDEXServiceHandler struct{}

func (UnimplementedDDEXServiceHandler) ProcessNewReleaseMessage(context.Context, *connect.Request[v1beta2.ProcessNewReleaseMessageRequest]) (*connect.Response[v1beta2.ProcessNewReleaseMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.ProcessNewReleaseMessage is not implemented"))
}

func (UnimplementedDDEXServiceHandler) GetRelease(context.Context, *connect.Request[v1beta2.GetReleaseRequest]) (*connect.Response[v1beta2.GetReleaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.GetRelease is not implemented"))
}

func (UnimplementedDDEXServiceHandler) SearchReleases(context.Context, *connect.Request[v1beta2.SearchReleasesRequest]) (*connect.Response[v1beta2.SearchReleasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.SearchReleases is not implemented"))
}

func (UnimplementedDDEXServiceHandler) GetSoundRecording(context.Context, *connect.Request[v1beta2.GetSoundRecordingRequest]) (*connect.Response[v1beta2.GetSoundRecordingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.GetSoundRecording is not implemented"))
}

func (UnimplementedDDEXServiceHandler) ValidateMessage(context.Context, *connect.Request[v1beta2.ValidateMessageRequest]) (*connect.Response[v1beta2.ValidateMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.ValidateMessage is not implemented"))
}
