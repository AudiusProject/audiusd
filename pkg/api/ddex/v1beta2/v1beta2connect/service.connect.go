// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ddex/v1beta2/service.proto

package v1beta2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta2 "github.com/AudiusProject/audiusd/pkg/api/ddex/v1beta2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DDEXServiceName is the fully-qualified name of the DDEXService service.
	DDEXServiceName = "ddex.v1beta2.DDEXService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DDEXServiceSubmitERNProcedure is the fully-qualified name of the DDEXService's SubmitERN RPC.
	DDEXServiceSubmitERNProcedure = "/ddex.v1beta2.DDEXService/SubmitERN"
	// DDEXServiceGetERNProcedure is the fully-qualified name of the DDEXService's GetERN RPC.
	DDEXServiceGetERNProcedure = "/ddex.v1beta2.DDEXService/GetERN"
)

// DDEXServiceClient is a client for the ddex.v1beta2.DDEXService service.
type DDEXServiceClient interface {
	SubmitERN(context.Context, *connect.Request[v1beta2.SubmitERNRequest]) (*connect.Response[v1beta2.SubmitERNResponse], error)
	GetERN(context.Context, *connect.Request[v1beta2.GetERNRequest]) (*connect.Response[v1beta2.GetERNResponse], error)
}

// NewDDEXServiceClient constructs a client for the ddex.v1beta2.DDEXService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDDEXServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DDEXServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dDEXServiceMethods := v1beta2.File_ddex_v1beta2_service_proto.Services().ByName("DDEXService").Methods()
	return &dDEXServiceClient{
		submitERN: connect.NewClient[v1beta2.SubmitERNRequest, v1beta2.SubmitERNResponse](
			httpClient,
			baseURL+DDEXServiceSubmitERNProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("SubmitERN")),
			connect.WithClientOptions(opts...),
		),
		getERN: connect.NewClient[v1beta2.GetERNRequest, v1beta2.GetERNResponse](
			httpClient,
			baseURL+DDEXServiceGetERNProcedure,
			connect.WithSchema(dDEXServiceMethods.ByName("GetERN")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dDEXServiceClient implements DDEXServiceClient.
type dDEXServiceClient struct {
	submitERN *connect.Client[v1beta2.SubmitERNRequest, v1beta2.SubmitERNResponse]
	getERN    *connect.Client[v1beta2.GetERNRequest, v1beta2.GetERNResponse]
}

// SubmitERN calls ddex.v1beta2.DDEXService.SubmitERN.
func (c *dDEXServiceClient) SubmitERN(ctx context.Context, req *connect.Request[v1beta2.SubmitERNRequest]) (*connect.Response[v1beta2.SubmitERNResponse], error) {
	return c.submitERN.CallUnary(ctx, req)
}

// GetERN calls ddex.v1beta2.DDEXService.GetERN.
func (c *dDEXServiceClient) GetERN(ctx context.Context, req *connect.Request[v1beta2.GetERNRequest]) (*connect.Response[v1beta2.GetERNResponse], error) {
	return c.getERN.CallUnary(ctx, req)
}

// DDEXServiceHandler is an implementation of the ddex.v1beta2.DDEXService service.
type DDEXServiceHandler interface {
	SubmitERN(context.Context, *connect.Request[v1beta2.SubmitERNRequest]) (*connect.Response[v1beta2.SubmitERNResponse], error)
	GetERN(context.Context, *connect.Request[v1beta2.GetERNRequest]) (*connect.Response[v1beta2.GetERNResponse], error)
}

// NewDDEXServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDDEXServiceHandler(svc DDEXServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dDEXServiceMethods := v1beta2.File_ddex_v1beta2_service_proto.Services().ByName("DDEXService").Methods()
	dDEXServiceSubmitERNHandler := connect.NewUnaryHandler(
		DDEXServiceSubmitERNProcedure,
		svc.SubmitERN,
		connect.WithSchema(dDEXServiceMethods.ByName("SubmitERN")),
		connect.WithHandlerOptions(opts...),
	)
	dDEXServiceGetERNHandler := connect.NewUnaryHandler(
		DDEXServiceGetERNProcedure,
		svc.GetERN,
		connect.WithSchema(dDEXServiceMethods.ByName("GetERN")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ddex.v1beta2.DDEXService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DDEXServiceSubmitERNProcedure:
			dDEXServiceSubmitERNHandler.ServeHTTP(w, r)
		case DDEXServiceGetERNProcedure:
			dDEXServiceGetERNHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDDEXServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDDEXServiceHandler struct{}

func (UnimplementedDDEXServiceHandler) SubmitERN(context.Context, *connect.Request[v1beta2.SubmitERNRequest]) (*connect.Response[v1beta2.SubmitERNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.SubmitERN is not implemented"))
}

func (UnimplementedDDEXServiceHandler) GetERN(context.Context, *connect.Request[v1beta2.GetERNRequest]) (*connect.Response[v1beta2.GetERNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ddex.v1beta2.DDEXService.GetERN is not implemented"))
}
