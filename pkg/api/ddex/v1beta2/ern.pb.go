// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ddex/v1beta2/ern.proto

package v1beta2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message control types for ERN operations
type MessageControlType int32

const (
	MessageControlType_MESSAGE_CONTROL_TYPE_UNSPECIFIED              MessageControlType = 0
	MessageControlType_MESSAGE_CONTROL_TYPE_NEW_RELEASE_MESSAGE      MessageControlType = 1
	MessageControlType_MESSAGE_CONTROL_TYPE_UPDATED_RELEASE_MESSAGE  MessageControlType = 2
	MessageControlType_MESSAGE_CONTROL_TYPE_TAKEDOWN_RELEASE_MESSAGE MessageControlType = 3
)

// Enum value maps for MessageControlType.
var (
	MessageControlType_name = map[int32]string{
		0: "MESSAGE_CONTROL_TYPE_UNSPECIFIED",
		1: "MESSAGE_CONTROL_TYPE_NEW_RELEASE_MESSAGE",
		2: "MESSAGE_CONTROL_TYPE_UPDATED_RELEASE_MESSAGE",
		3: "MESSAGE_CONTROL_TYPE_TAKEDOWN_RELEASE_MESSAGE",
	}
	MessageControlType_value = map[string]int32{
		"MESSAGE_CONTROL_TYPE_UNSPECIFIED":              0,
		"MESSAGE_CONTROL_TYPE_NEW_RELEASE_MESSAGE":      1,
		"MESSAGE_CONTROL_TYPE_UPDATED_RELEASE_MESSAGE":  2,
		"MESSAGE_CONTROL_TYPE_TAKEDOWN_RELEASE_MESSAGE": 3,
	}
)

func (x MessageControlType) Enum() *MessageControlType {
	p := new(MessageControlType)
	*p = x
	return p
}

func (x MessageControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_v1beta2_ern_proto_enumTypes[0].Descriptor()
}

func (MessageControlType) Type() protoreflect.EnumType {
	return &file_ddex_v1beta2_ern_proto_enumTypes[0]
}

func (x MessageControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageControlType.Descriptor instead.
func (MessageControlType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{0}
}

// Root message for Electronic Release Notification
type ElectronicReleaseNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageHeader *MessageHeader `protobuf:"bytes,1,opt,name=message_header,json=messageHeader,proto3" json:"message_header,omitempty"`
	PartyList     []*Party       `protobuf:"bytes,2,rep,name=party_list,json=partyList,proto3" json:"party_list,omitempty"`
	ResourceList  []*Resource    `protobuf:"bytes,3,rep,name=resource_list,json=resourceList,proto3" json:"resource_list,omitempty"`
	ReleaseList   []*Release     `protobuf:"bytes,4,rep,name=release_list,json=releaseList,proto3" json:"release_list,omitempty"`
	DealList      []*Deal        `protobuf:"bytes,5,rep,name=deal_list,json=dealList,proto3" json:"deal_list,omitempty"`
}

func (x *ElectronicReleaseNotification) Reset() {
	*x = ElectronicReleaseNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronicReleaseNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronicReleaseNotification) ProtoMessage() {}

func (x *ElectronicReleaseNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronicReleaseNotification.ProtoReflect.Descriptor instead.
func (*ElectronicReleaseNotification) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{0}
}

func (x *ElectronicReleaseNotification) GetMessageHeader() *MessageHeader {
	if x != nil {
		return x.MessageHeader
	}
	return nil
}

func (x *ElectronicReleaseNotification) GetPartyList() []*Party {
	if x != nil {
		return x.PartyList
	}
	return nil
}

func (x *ElectronicReleaseNotification) GetResourceList() []*Resource {
	if x != nil {
		return x.ResourceList
	}
	return nil
}

func (x *ElectronicReleaseNotification) GetReleaseList() []*Release {
	if x != nil {
		return x.ReleaseList
	}
	return nil
}

func (x *ElectronicReleaseNotification) GetDealList() []*Deal {
	if x != nil {
		return x.DealList
	}
	return nil
}

// Message header information
type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of message control, NEW_RELEASE_MESSAGE, UPDATED_RELEASE_MESSAGE, TAKEDOWN_RELEASE_MESSAGE
	MessageControlType MessageControlType `protobuf:"varint,1,opt,name=message_control_type,json=messageControlType,proto3,enum=ddex.v1beta2.MessageControlType" json:"message_control_type,omitempty"`
	// address of the party sending the message, must match the recovered address from the signature
	SenderAddress string `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// address of the ERN receiving the update or deletion, must be empty for new release messages
	ErnAddress string `protobuf:"bytes,3,opt,name=ern_address,json=ernAddress,proto3" json:"ern_address,omitempty"`
	// nonce of the ERN message. Used for replay protection, ordering, and race conditions
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{1}
}

func (x *MessageHeader) GetMessageControlType() MessageControlType {
	if x != nil {
		return x.MessageControlType
	}
	return MessageControlType_MESSAGE_CONTROL_TYPE_UNSPECIFIED
}

func (x *MessageHeader) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *MessageHeader) GetErnAddress() string {
	if x != nil {
		return x.ErnAddress
	}
	return ""
}

func (x *MessageHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// party information used to create and update a party individually or within an ERN message
type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference defined by the DDEX standard that can be used to reference a party
	PartyReference string             `protobuf:"bytes,1,opt,name=party_reference,json=partyReference,proto3" json:"party_reference,omitempty"`
	PartyName      []*Party_PartyName `protobuf:"bytes,2,rep,name=party_name,json=partyName,proto3" json:"party_name,omitempty"`
	PartyId        *Party_PartyId     `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{2}
}

func (x *Party) GetPartyReference() string {
	if x != nil {
		return x.PartyReference
	}
	return ""
}

func (x *Party) GetPartyName() []*Party_PartyName {
	if x != nil {
		return x.PartyName
	}
	return nil
}

func (x *Party) GetPartyId() *Party_PartyId {
	if x != nil {
		return x.PartyId
	}
	return nil
}

// resource information used to create and update a resource individually or within an ERN message
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*Resource_SoundRecording_
	//	*Resource_Image_
	Resource isResource_Resource `protobuf_oneof:"resource"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3}
}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Resource) GetSoundRecording() *Resource_SoundRecording {
	if x, ok := x.GetResource().(*Resource_SoundRecording_); ok {
		return x.SoundRecording
	}
	return nil
}

func (x *Resource) GetImage() *Resource_Image {
	if x, ok := x.GetResource().(*Resource_Image_); ok {
		return x.Image
	}
	return nil
}

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_SoundRecording_ struct {
	SoundRecording *Resource_SoundRecording `protobuf:"bytes,1,opt,name=sound_recording,json=soundRecording,proto3,oneof"`
}

type Resource_Image_ struct {
	Image *Resource_Image `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

func (*Resource_SoundRecording_) isResource_Resource() {}

func (*Resource_Image_) isResource_Resource() {}

type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Release:
	//
	//	*Release_MainRelease_
	//	*Release_TrackRelease_
	Release isRelease_Release `protobuf_oneof:"release"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4}
}

func (m *Release) GetRelease() isRelease_Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (x *Release) GetMainRelease() *Release_MainRelease {
	if x, ok := x.GetRelease().(*Release_MainRelease_); ok {
		return x.MainRelease
	}
	return nil
}

func (x *Release) GetTrackRelease() *Release_TrackRelease {
	if x, ok := x.GetRelease().(*Release_TrackRelease_); ok {
		return x.TrackRelease
	}
	return nil
}

type isRelease_Release interface {
	isRelease_Release()
}

type Release_MainRelease_ struct {
	MainRelease *Release_MainRelease `protobuf:"bytes,1,opt,name=main_release,json=mainRelease,proto3,oneof"`
}

type Release_TrackRelease_ struct {
	TrackRelease *Release_TrackRelease `protobuf:"bytes,2,opt,name=track_release,json=trackRelease,proto3,oneof"`
}

func (*Release_MainRelease_) isRelease_Release() {}

func (*Release_TrackRelease_) isRelease_Release() {}

type Deal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Deal:
	//
	//	*Deal_ReleaseDeal_
	Deal isDeal_Deal `protobuf_oneof:"deal"`
}

func (x *Deal) Reset() {
	*x = Deal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal) ProtoMessage() {}

func (x *Deal) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal.ProtoReflect.Descriptor instead.
func (*Deal) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{5}
}

func (m *Deal) GetDeal() isDeal_Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (x *Deal) GetReleaseDeal() *Deal_ReleaseDeal {
	if x, ok := x.GetDeal().(*Deal_ReleaseDeal_); ok {
		return x.ReleaseDeal
	}
	return nil
}

type isDeal_Deal interface {
	isDeal_Deal()
}

type Deal_ReleaseDeal_ struct {
	ReleaseDeal *Deal_ReleaseDeal `protobuf:"bytes,1,opt,name=release_deal,json=releaseDeal,proto3,oneof"`
}

func (*Deal_ReleaseDeal_) isDeal_Deal() {}

// Acknowledgment for processed NewReleaseMessage
type ElectronicReleaseNotificationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location of the ERN messsage in the protocol
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// nonce of the ERN message, 1 after a new ERN message is created
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ElectronicReleaseNotificationAck) Reset() {
	*x = ElectronicReleaseNotificationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronicReleaseNotificationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronicReleaseNotificationAck) ProtoMessage() {}

func (x *ElectronicReleaseNotificationAck) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronicReleaseNotificationAck.ProtoReflect.Descriptor instead.
func (*ElectronicReleaseNotificationAck) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{6}
}

func (x *ElectronicReleaseNotificationAck) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ElectronicReleaseNotificationAck) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// IDs defined by the DDEX standard that can be used to reference a party
type Party_PartyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dpid string `protobuf:"bytes,1,opt,name=dpid,proto3" json:"dpid,omitempty"`
}

func (x *Party_PartyId) Reset() {
	*x = Party_PartyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_PartyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_PartyId) ProtoMessage() {}

func (x *Party_PartyId) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_PartyId.ProtoReflect.Descriptor instead.
func (*Party_PartyId) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Party_PartyId) GetDpid() string {
	if x != nil {
		return x.Dpid
	}
	return ""
}

// name of the party
type Party_PartyName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageAndScriptCode string `protobuf:"bytes,1,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty"`
	FullName              string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *Party_PartyName) Reset() {
	*x = Party_PartyName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_PartyName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_PartyName) ProtoMessage() {}

func (x *Party_PartyName) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_PartyName.ProtoReflect.Descriptor instead.
func (*Party_PartyName) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Party_PartyName) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *Party_PartyName) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

// IDs defined by the DDEX standard that can be used to reference a resource
type Resource_ResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isrc                   string `protobuf:"bytes,1,opt,name=isrc,proto3" json:"isrc,omitempty"`
	ProprietaryId          string `protobuf:"bytes,2,opt,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty"`
	ProprietaryIdNamespace string `protobuf:"bytes,3,opt,name=proprietary_id_namespace,json=proprietaryIdNamespace,proto3" json:"proprietary_id_namespace,omitempty"`
}

func (x *Resource_ResourceId) Reset() {
	*x = Resource_ResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_ResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_ResourceId) ProtoMessage() {}

func (x *Resource_ResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_ResourceId.ProtoReflect.Descriptor instead.
func (*Resource_ResourceId) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Resource_ResourceId) GetIsrc() string {
	if x != nil {
		return x.Isrc
	}
	return ""
}

func (x *Resource_ResourceId) GetProprietaryId() string {
	if x != nil {
		return x.ProprietaryId
	}
	return ""
}

func (x *Resource_ResourceId) GetProprietaryIdNamespace() string {
	if x != nil {
		return x.ProprietaryIdNamespace
	}
	return ""
}

// contributor information for sound recordings
type Resource_Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContributorPartyReference string   `protobuf:"bytes,1,opt,name=contributor_party_reference,json=contributorPartyReference,proto3" json:"contributor_party_reference,omitempty"`
	Role                      []string `protobuf:"bytes,2,rep,name=role,proto3" json:"role,omitempty"`
	UserDefinedRole           []string `protobuf:"bytes,3,rep,name=user_defined_role,json=userDefinedRole,proto3" json:"user_defined_role,omitempty"`
	SequenceNumber            int32    `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *Resource_Contributor) Reset() {
	*x = Resource_Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_Contributor) ProtoMessage() {}

func (x *Resource_Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_Contributor.ProtoReflect.Descriptor instead.
func (*Resource_Contributor) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Resource_Contributor) GetContributorPartyReference() string {
	if x != nil {
		return x.ContributorPartyReference
	}
	return ""
}

func (x *Resource_Contributor) GetRole() []string {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Resource_Contributor) GetUserDefinedRole() []string {
	if x != nil {
		return x.UserDefinedRole
	}
	return nil
}

func (x *Resource_Contributor) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// display artist information
type Resource_DisplayArtist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistPartyReference string `protobuf:"bytes,1,opt,name=artist_party_reference,json=artistPartyReference,proto3" json:"artist_party_reference,omitempty"`
	DisplayArtistRole    string `protobuf:"bytes,2,opt,name=display_artist_role,json=displayArtistRole,proto3" json:"display_artist_role,omitempty"`
	ArtisticRole         string `protobuf:"bytes,3,opt,name=artistic_role,json=artisticRole,proto3" json:"artistic_role,omitempty"`
	SequenceNumber       int32  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *Resource_DisplayArtist) Reset() {
	*x = Resource_DisplayArtist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_DisplayArtist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_DisplayArtist) ProtoMessage() {}

func (x *Resource_DisplayArtist) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_DisplayArtist.ProtoReflect.Descriptor instead.
func (*Resource_DisplayArtist) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Resource_DisplayArtist) GetArtistPartyReference() string {
	if x != nil {
		return x.ArtistPartyReference
	}
	return ""
}

func (x *Resource_DisplayArtist) GetDisplayArtistRole() string {
	if x != nil {
		return x.DisplayArtistRole
	}
	return ""
}

func (x *Resource_DisplayArtist) GetArtisticRole() string {
	if x != nil {
		return x.ArtisticRole
	}
	return ""
}

func (x *Resource_DisplayArtist) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// sound recording resource
type Resource_SoundRecording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceReference     string                                         `protobuf:"bytes,1,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
	Type                  string                                         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ResourceId            *Resource_ResourceId                           `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	DisplayTitleText      string                                         `protobuf:"bytes,4,opt,name=display_title_text,json=displayTitleText,proto3" json:"display_title_text,omitempty"`
	DisplayArtistName     string                                         `protobuf:"bytes,5,opt,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty"`
	DisplayArtist         []*Resource_DisplayArtist                      `protobuf:"bytes,6,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty"`
	Contributor           []*Resource_Contributor                        `protobuf:"bytes,7,rep,name=contributor,proto3" json:"contributor,omitempty"`
	Duration              string                                         `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	FirstPublicationDate  string                                         `protobuf:"bytes,9,opt,name=first_publication_date,json=firstPublicationDate,proto3" json:"first_publication_date,omitempty"`
	ParentalWarningType   string                                         `protobuf:"bytes,10,opt,name=parental_warning_type,json=parentalWarningType,proto3" json:"parental_warning_type,omitempty"`
	LanguageOfPerformance string                                         `protobuf:"bytes,11,opt,name=language_of_performance,json=languageOfPerformance,proto3" json:"language_of_performance,omitempty"`
	TechnicalDetails      *Resource_SoundRecording_SoundTechnicalDetails `protobuf:"bytes,12,opt,name=technical_details,json=technicalDetails,proto3" json:"technical_details,omitempty"`
}

func (x *Resource_SoundRecording) Reset() {
	*x = Resource_SoundRecording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_SoundRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_SoundRecording) ProtoMessage() {}

func (x *Resource_SoundRecording) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_SoundRecording.ProtoReflect.Descriptor instead.
func (*Resource_SoundRecording) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Resource_SoundRecording) GetResourceReference() string {
	if x != nil {
		return x.ResourceReference
	}
	return ""
}

func (x *Resource_SoundRecording) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Resource_SoundRecording) GetResourceId() *Resource_ResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *Resource_SoundRecording) GetDisplayTitleText() string {
	if x != nil {
		return x.DisplayTitleText
	}
	return ""
}

func (x *Resource_SoundRecording) GetDisplayArtistName() string {
	if x != nil {
		return x.DisplayArtistName
	}
	return ""
}

func (x *Resource_SoundRecording) GetDisplayArtist() []*Resource_DisplayArtist {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

func (x *Resource_SoundRecording) GetContributor() []*Resource_Contributor {
	if x != nil {
		return x.Contributor
	}
	return nil
}

func (x *Resource_SoundRecording) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Resource_SoundRecording) GetFirstPublicationDate() string {
	if x != nil {
		return x.FirstPublicationDate
	}
	return ""
}

func (x *Resource_SoundRecording) GetParentalWarningType() string {
	if x != nil {
		return x.ParentalWarningType
	}
	return ""
}

func (x *Resource_SoundRecording) GetLanguageOfPerformance() string {
	if x != nil {
		return x.LanguageOfPerformance
	}
	return ""
}

func (x *Resource_SoundRecording) GetTechnicalDetails() *Resource_SoundRecording_SoundTechnicalDetails {
	if x != nil {
		return x.TechnicalDetails
	}
	return nil
}

// image resource
type Resource_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceReference string                                `protobuf:"bytes,1,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
	Type              string                                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ResourceId        *Resource_ResourceId                  `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	TechnicalDetails  *Resource_Image_ImageTechnicalDetails `protobuf:"bytes,4,opt,name=technical_details,json=technicalDetails,proto3" json:"technical_details,omitempty"`
}

func (x *Resource_Image) Reset() {
	*x = Resource_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_Image) ProtoMessage() {}

func (x *Resource_Image) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_Image.ProtoReflect.Descriptor instead.
func (*Resource_Image) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Resource_Image) GetResourceReference() string {
	if x != nil {
		return x.ResourceReference
	}
	return ""
}

func (x *Resource_Image) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Resource_Image) GetResourceId() *Resource_ResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *Resource_Image) GetTechnicalDetails() *Resource_Image_ImageTechnicalDetails {
	if x != nil {
		return x.TechnicalDetails
	}
	return nil
}

// technical details for audio resources using mediorum CID-based storage
type Resource_SoundRecording_SoundTechnicalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TechnicalResourceDetailsReference string `protobuf:"bytes,1,opt,name=technical_resource_details_reference,json=technicalResourceDetailsReference,proto3" json:"technical_resource_details_reference,omitempty"`
	// mediorum storage reference
	Cid           string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`                                          // Content Identifier for decentralized storage
	FileSize      int64  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`               // Size of the file in bytes
	HashSum       string `protobuf:"bytes,4,opt,name=hash_sum,json=hashSum,proto3" json:"hash_sum,omitempty"`                   // Hash of the file for integrity verification
	HashAlgorithm string `protobuf:"bytes,5,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"` // Algorithm used for hashing (e.g., "MD5", "SHA256")
	// audio-specific technical details
	AudioCodecType   string                                                     `protobuf:"bytes,6,opt,name=audio_codec_type,json=audioCodecType,proto3" json:"audio_codec_type,omitempty"`
	NumberOfChannels int32                                                      `protobuf:"varint,7,opt,name=number_of_channels,json=numberOfChannels,proto3" json:"number_of_channels,omitempty"`
	SamplingRate     float32                                                    `protobuf:"fixed32,8,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	BitsPerSample    int32                                                      `protobuf:"varint,9,opt,name=bits_per_sample,json=bitsPerSample,proto3" json:"bits_per_sample,omitempty"`
	ClipDetails      *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails `protobuf:"bytes,10,opt,name=clip_details,json=clipDetails,proto3" json:"clip_details,omitempty"`
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) Reset() {
	*x = Resource_SoundRecording_SoundTechnicalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_SoundRecording_SoundTechnicalDetails) ProtoMessage() {}

func (x *Resource_SoundRecording_SoundTechnicalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_SoundRecording_SoundTechnicalDetails.ProtoReflect.Descriptor instead.
func (*Resource_SoundRecording_SoundTechnicalDetails) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 3, 0}
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetTechnicalResourceDetailsReference() string {
	if x != nil {
		return x.TechnicalResourceDetailsReference
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetHashSum() string {
	if x != nil {
		return x.HashSum
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetAudioCodecType() string {
	if x != nil {
		return x.AudioCodecType
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetNumberOfChannels() int32 {
	if x != nil {
		return x.NumberOfChannels
	}
	return 0
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetSamplingRate() float32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetBitsPerSample() int32 {
	if x != nil {
		return x.BitsPerSample
	}
	return 0
}

func (x *Resource_SoundRecording_SoundTechnicalDetails) GetClipDetails() *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails {
	if x != nil {
		return x.ClipDetails
	}
	return nil
}

// optional preview/clip information for audio
type Resource_SoundRecording_SoundTechnicalDetails_ClipDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipCid    string `protobuf:"bytes,1,opt,name=clip_cid,json=clipCid,proto3" json:"clip_cid,omitempty"`           // CID for preview clip
	ClipType   string `protobuf:"bytes,2,opt,name=clip_type,json=clipType,proto3" json:"clip_type,omitempty"`        // Type of clip (e.g., "Preview")
	StartPoint int32  `protobuf:"varint,3,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"` // Start point in samples
	EndPoint   int32  `protobuf:"varint,4,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`       // End point in samples
	Duration   string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`                        // Duration of clip (ISO 8601)
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) Reset() {
	*x = Resource_SoundRecording_SoundTechnicalDetails_ClipDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) ProtoMessage() {}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_SoundRecording_SoundTechnicalDetails_ClipDetails.ProtoReflect.Descriptor instead.
func (*Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 3, 0, 0}
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) GetClipCid() string {
	if x != nil {
		return x.ClipCid
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) GetClipType() string {
	if x != nil {
		return x.ClipType
	}
	return ""
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) GetStartPoint() int32 {
	if x != nil {
		return x.StartPoint
	}
	return 0
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) GetEndPoint() int32 {
	if x != nil {
		return x.EndPoint
	}
	return 0
}

func (x *Resource_SoundRecording_SoundTechnicalDetails_ClipDetails) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

// technical details for image resources using mediorum CID-based storage
type Resource_Image_ImageTechnicalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TechnicalResourceDetailsReference string `protobuf:"bytes,1,opt,name=technical_resource_details_reference,json=technicalResourceDetailsReference,proto3" json:"technical_resource_details_reference,omitempty"`
	// mediorum storage reference
	Cid           string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`                                          // Content Identifier for decentralized storage
	FileSize      int64  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`               // Size of the file in bytes
	HashSum       string `protobuf:"bytes,4,opt,name=hash_sum,json=hashSum,proto3" json:"hash_sum,omitempty"`                   // Hash of the file for integrity verification
	HashAlgorithm string `protobuf:"bytes,5,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"` // Algorithm used for hashing (e.g., "MD5", "SHA256")
	// image-specific technical details
	ImageCodecType  string `protobuf:"bytes,6,opt,name=image_codec_type,json=imageCodecType,proto3" json:"image_codec_type,omitempty"`
	ImageHeight     int32  `protobuf:"varint,7,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"`
	ImageWidth      int32  `protobuf:"varint,8,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`
	ImageResolution int32  `protobuf:"varint,9,opt,name=image_resolution,json=imageResolution,proto3" json:"image_resolution,omitempty"`
}

func (x *Resource_Image_ImageTechnicalDetails) Reset() {
	*x = Resource_Image_ImageTechnicalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_Image_ImageTechnicalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_Image_ImageTechnicalDetails) ProtoMessage() {}

func (x *Resource_Image_ImageTechnicalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_Image_ImageTechnicalDetails.ProtoReflect.Descriptor instead.
func (*Resource_Image_ImageTechnicalDetails) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{3, 4, 0}
}

func (x *Resource_Image_ImageTechnicalDetails) GetTechnicalResourceDetailsReference() string {
	if x != nil {
		return x.TechnicalResourceDetailsReference
	}
	return ""
}

func (x *Resource_Image_ImageTechnicalDetails) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Resource_Image_ImageTechnicalDetails) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Resource_Image_ImageTechnicalDetails) GetHashSum() string {
	if x != nil {
		return x.HashSum
	}
	return ""
}

func (x *Resource_Image_ImageTechnicalDetails) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

func (x *Resource_Image_ImageTechnicalDetails) GetImageCodecType() string {
	if x != nil {
		return x.ImageCodecType
	}
	return ""
}

func (x *Resource_Image_ImageTechnicalDetails) GetImageHeight() int32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *Resource_Image_ImageTechnicalDetails) GetImageWidth() int32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *Resource_Image_ImageTechnicalDetails) GetImageResolution() int32 {
	if x != nil {
		return x.ImageResolution
	}
	return 0
}

type Release_ReleaseId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grid                   string `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Icpn                   string `protobuf:"bytes,2,opt,name=icpn,proto3" json:"icpn,omitempty"`
	CatalogNumber          string `protobuf:"bytes,3,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty"`
	CatalogNumberNamespace string `protobuf:"bytes,4,opt,name=catalog_number_namespace,json=catalogNumberNamespace,proto3" json:"catalog_number_namespace,omitempty"`
	ProprietaryId          string `protobuf:"bytes,5,opt,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty"`
	ProprietaryIdNamespace string `protobuf:"bytes,6,opt,name=proprietary_id_namespace,json=proprietaryIdNamespace,proto3" json:"proprietary_id_namespace,omitempty"`
}

func (x *Release_ReleaseId) Reset() {
	*x = Release_ReleaseId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_ReleaseId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_ReleaseId) ProtoMessage() {}

func (x *Release_ReleaseId) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_ReleaseId.ProtoReflect.Descriptor instead.
func (*Release_ReleaseId) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Release_ReleaseId) GetGrid() string {
	if x != nil {
		return x.Grid
	}
	return ""
}

func (x *Release_ReleaseId) GetIcpn() string {
	if x != nil {
		return x.Icpn
	}
	return ""
}

func (x *Release_ReleaseId) GetCatalogNumber() string {
	if x != nil {
		return x.CatalogNumber
	}
	return ""
}

func (x *Release_ReleaseId) GetCatalogNumberNamespace() string {
	if x != nil {
		return x.CatalogNumberNamespace
	}
	return ""
}

func (x *Release_ReleaseId) GetProprietaryId() string {
	if x != nil {
		return x.ProprietaryId
	}
	return ""
}

func (x *Release_ReleaseId) GetProprietaryIdNamespace() string {
	if x != nil {
		return x.ProprietaryIdNamespace
	}
	return ""
}

// display artist information for releases
type Release_DisplayArtist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistPartyReference string `protobuf:"bytes,1,opt,name=artist_party_reference,json=artistPartyReference,proto3" json:"artist_party_reference,omitempty"`
	DisplayArtistRole    string `protobuf:"bytes,2,opt,name=display_artist_role,json=displayArtistRole,proto3" json:"display_artist_role,omitempty"`
	SequenceNumber       int32  `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *Release_DisplayArtist) Reset() {
	*x = Release_DisplayArtist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_DisplayArtist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_DisplayArtist) ProtoMessage() {}

func (x *Release_DisplayArtist) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_DisplayArtist.ProtoReflect.Descriptor instead.
func (*Release_DisplayArtist) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Release_DisplayArtist) GetArtistPartyReference() string {
	if x != nil {
		return x.ArtistPartyReference
	}
	return ""
}

func (x *Release_DisplayArtist) GetDisplayArtistRole() string {
	if x != nil {
		return x.DisplayArtistRole
	}
	return ""
}

func (x *Release_DisplayArtist) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// genre information
type Release_Genre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenreText               string `protobuf:"bytes,1,opt,name=genre_text,json=genreText,proto3" json:"genre_text,omitempty"`
	ApplicableTerritoryCode string `protobuf:"bytes,2,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty"`
}

func (x *Release_Genre) Reset() {
	*x = Release_Genre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_Genre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_Genre) ProtoMessage() {}

func (x *Release_Genre) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_Genre.ProtoReflect.Descriptor instead.
func (*Release_Genre) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Release_Genre) GetGenreText() string {
	if x != nil {
		return x.GenreText
	}
	return ""
}

func (x *Release_Genre) GetApplicableTerritoryCode() string {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return ""
}

// P-line information
type Release_PLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      string `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	PLineText string `protobuf:"bytes,2,opt,name=p_line_text,json=pLineText,proto3" json:"p_line_text,omitempty"`
}

func (x *Release_PLine) Reset() {
	*x = Release_PLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_PLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_PLine) ProtoMessage() {}

func (x *Release_PLine) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_PLine.ProtoReflect.Descriptor instead.
func (*Release_PLine) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Release_PLine) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *Release_PLine) GetPLineText() string {
	if x != nil {
		return x.PLineText
	}
	return ""
}

// resource group content item
type Release_ResourceGroupContentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber           int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ReleaseResourceReference string `protobuf:"bytes,2,opt,name=release_resource_reference,json=releaseResourceReference,proto3" json:"release_resource_reference,omitempty"`
}

func (x *Release_ResourceGroupContentItem) Reset() {
	*x = Release_ResourceGroupContentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_ResourceGroupContentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_ResourceGroupContentItem) ProtoMessage() {}

func (x *Release_ResourceGroupContentItem) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_ResourceGroupContentItem.ProtoReflect.Descriptor instead.
func (*Release_ResourceGroupContentItem) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Release_ResourceGroupContentItem) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Release_ResourceGroupContentItem) GetReleaseResourceReference() string {
	if x != nil {
		return x.ReleaseResourceReference
	}
	return ""
}

// resource group information
type Release_ResourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalTitle                string                              `protobuf:"bytes,1,opt,name=additional_title,json=additionalTitle,proto3" json:"additional_title,omitempty"`
	TitleType                      string                              `protobuf:"bytes,2,opt,name=title_type,json=titleType,proto3" json:"title_type,omitempty"`
	SequenceNumber                 int32                               `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ResourceGroupContentItem       []*Release_ResourceGroupContentItem `protobuf:"bytes,4,rep,name=resource_group_content_item,json=resourceGroupContentItem,proto3" json:"resource_group_content_item,omitempty"`
	LinkedReleaseResourceReference []string                            `protobuf:"bytes,5,rep,name=linked_release_resource_reference,json=linkedReleaseResourceReference,proto3" json:"linked_release_resource_reference,omitempty"`
}

func (x *Release_ResourceGroup) Reset() {
	*x = Release_ResourceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_ResourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_ResourceGroup) ProtoMessage() {}

func (x *Release_ResourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_ResourceGroup.ProtoReflect.Descriptor instead.
func (*Release_ResourceGroup) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Release_ResourceGroup) GetAdditionalTitle() string {
	if x != nil {
		return x.AdditionalTitle
	}
	return ""
}

func (x *Release_ResourceGroup) GetTitleType() string {
	if x != nil {
		return x.TitleType
	}
	return ""
}

func (x *Release_ResourceGroup) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Release_ResourceGroup) GetResourceGroupContentItem() []*Release_ResourceGroupContentItem {
	if x != nil {
		return x.ResourceGroupContentItem
	}
	return nil
}

func (x *Release_ResourceGroup) GetLinkedReleaseResourceReference() []string {
	if x != nil {
		return x.LinkedReleaseResourceReference
	}
	return nil
}

type Release_MainRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseReference string `protobuf:"bytes,1,opt,name=release_reference,json=releaseReference,proto3" json:"release_reference,omitempty"`
	// Single, EP, Album, Compilation, Soundtrack, Other
	ReleaseType           string                   `protobuf:"bytes,2,opt,name=release_type,json=releaseType,proto3" json:"release_type,omitempty"`
	ReleaseId             *Release_ReleaseId       `protobuf:"bytes,3,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	DisplayTitleText      string                   `protobuf:"bytes,4,opt,name=display_title_text,json=displayTitleText,proto3" json:"display_title_text,omitempty"`
	DisplayArtistName     string                   `protobuf:"bytes,5,opt,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty"`
	DisplayArtist         []*Release_DisplayArtist `protobuf:"bytes,6,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty"`
	ReleaseLabelReference string                   `protobuf:"bytes,7,opt,name=release_label_reference,json=releaseLabelReference,proto3" json:"release_label_reference,omitempty"`
	LabelType             string                   `protobuf:"bytes,8,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`
	PLine                 *Release_PLine           `protobuf:"bytes,9,opt,name=p_line,json=pLine,proto3" json:"p_line,omitempty"`
	Duration              string                   `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
	Genre                 []*Release_Genre         `protobuf:"bytes,11,rep,name=genre,proto3" json:"genre,omitempty"`
	OriginalReleaseDate   string                   `protobuf:"bytes,12,opt,name=original_release_date,json=originalReleaseDate,proto3" json:"original_release_date,omitempty"`
	ParentalWarningType   string                   `protobuf:"bytes,13,opt,name=parental_warning_type,json=parentalWarningType,proto3" json:"parental_warning_type,omitempty"`
	ResourceGroup         []*Release_ResourceGroup `protobuf:"bytes,14,rep,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
}

func (x *Release_MainRelease) Reset() {
	*x = Release_MainRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_MainRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_MainRelease) ProtoMessage() {}

func (x *Release_MainRelease) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_MainRelease.ProtoReflect.Descriptor instead.
func (*Release_MainRelease) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Release_MainRelease) GetReleaseReference() string {
	if x != nil {
		return x.ReleaseReference
	}
	return ""
}

func (x *Release_MainRelease) GetReleaseType() string {
	if x != nil {
		return x.ReleaseType
	}
	return ""
}

func (x *Release_MainRelease) GetReleaseId() *Release_ReleaseId {
	if x != nil {
		return x.ReleaseId
	}
	return nil
}

func (x *Release_MainRelease) GetDisplayTitleText() string {
	if x != nil {
		return x.DisplayTitleText
	}
	return ""
}

func (x *Release_MainRelease) GetDisplayArtistName() string {
	if x != nil {
		return x.DisplayArtistName
	}
	return ""
}

func (x *Release_MainRelease) GetDisplayArtist() []*Release_DisplayArtist {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

func (x *Release_MainRelease) GetReleaseLabelReference() string {
	if x != nil {
		return x.ReleaseLabelReference
	}
	return ""
}

func (x *Release_MainRelease) GetLabelType() string {
	if x != nil {
		return x.LabelType
	}
	return ""
}

func (x *Release_MainRelease) GetPLine() *Release_PLine {
	if x != nil {
		return x.PLine
	}
	return nil
}

func (x *Release_MainRelease) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Release_MainRelease) GetGenre() []*Release_Genre {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *Release_MainRelease) GetOriginalReleaseDate() string {
	if x != nil {
		return x.OriginalReleaseDate
	}
	return ""
}

func (x *Release_MainRelease) GetParentalWarningType() string {
	if x != nil {
		return x.ParentalWarningType
	}
	return ""
}

func (x *Release_MainRelease) GetResourceGroup() []*Release_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return nil
}

type Release_TrackRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseReference         string             `protobuf:"bytes,1,opt,name=release_reference,json=releaseReference,proto3" json:"release_reference,omitempty"`
	ReleaseId                *Release_ReleaseId `protobuf:"bytes,2,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	ReleaseResourceReference string             `protobuf:"bytes,3,opt,name=release_resource_reference,json=releaseResourceReference,proto3" json:"release_resource_reference,omitempty"`
	ReleaseLabelReference    string             `protobuf:"bytes,4,opt,name=release_label_reference,json=releaseLabelReference,proto3" json:"release_label_reference,omitempty"`
	LabelType                string             `protobuf:"bytes,5,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`
	Genre                    []*Release_Genre   `protobuf:"bytes,6,rep,name=genre,proto3" json:"genre,omitempty"`
}

func (x *Release_TrackRelease) Reset() {
	*x = Release_TrackRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_TrackRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_TrackRelease) ProtoMessage() {}

func (x *Release_TrackRelease) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_TrackRelease.ProtoReflect.Descriptor instead.
func (*Release_TrackRelease) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Release_TrackRelease) GetReleaseReference() string {
	if x != nil {
		return x.ReleaseReference
	}
	return ""
}

func (x *Release_TrackRelease) GetReleaseId() *Release_ReleaseId {
	if x != nil {
		return x.ReleaseId
	}
	return nil
}

func (x *Release_TrackRelease) GetReleaseResourceReference() string {
	if x != nil {
		return x.ReleaseResourceReference
	}
	return ""
}

func (x *Release_TrackRelease) GetReleaseLabelReference() string {
	if x != nil {
		return x.ReleaseLabelReference
	}
	return ""
}

func (x *Release_TrackRelease) GetLabelType() string {
	if x != nil {
		return x.LabelType
	}
	return ""
}

func (x *Release_TrackRelease) GetGenre() []*Release_Genre {
	if x != nil {
		return x.Genre
	}
	return nil
}

// validity period for deals
type Deal_ValidityPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDateTime string `protobuf:"bytes,1,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	EndDateTime   string `protobuf:"bytes,2,opt,name=end_date_time,json=endDateTime,proto3" json:"end_date_time,omitempty"`
}

func (x *Deal_ValidityPeriod) Reset() {
	*x = Deal_ValidityPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deal_ValidityPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal_ValidityPeriod) ProtoMessage() {}

func (x *Deal_ValidityPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal_ValidityPeriod.ProtoReflect.Descriptor instead.
func (*Deal_ValidityPeriod) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Deal_ValidityPeriod) GetStartDateTime() string {
	if x != nil {
		return x.StartDateTime
	}
	return ""
}

func (x *Deal_ValidityPeriod) GetEndDateTime() string {
	if x != nil {
		return x.EndDateTime
	}
	return ""
}

// deal terms information
type Deal_DealTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerritoryCode       []string             `protobuf:"bytes,1,rep,name=territory_code,json=territoryCode,proto3" json:"territory_code,omitempty"`
	ValidityPeriod      *Deal_ValidityPeriod `protobuf:"bytes,2,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	CommercialModelType string               `protobuf:"bytes,3,opt,name=commercial_model_type,json=commercialModelType,proto3" json:"commercial_model_type,omitempty"`
	UseType             string               `protobuf:"bytes,4,opt,name=use_type,json=useType,proto3" json:"use_type,omitempty"`
}

func (x *Deal_DealTerms) Reset() {
	*x = Deal_DealTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deal_DealTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal_DealTerms) ProtoMessage() {}

func (x *Deal_DealTerms) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal_DealTerms.ProtoReflect.Descriptor instead.
func (*Deal_DealTerms) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Deal_DealTerms) GetTerritoryCode() []string {
	if x != nil {
		return x.TerritoryCode
	}
	return nil
}

func (x *Deal_DealTerms) GetValidityPeriod() *Deal_ValidityPeriod {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *Deal_DealTerms) GetCommercialModelType() string {
	if x != nil {
		return x.CommercialModelType
	}
	return ""
}

func (x *Deal_DealTerms) GetUseType() string {
	if x != nil {
		return x.UseType
	}
	return ""
}

// release deal information
type Deal_ReleaseDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealReleaseReference string          `protobuf:"bytes,1,opt,name=deal_release_reference,json=dealReleaseReference,proto3" json:"deal_release_reference,omitempty"`
	DealTerms            *Deal_DealTerms `protobuf:"bytes,2,opt,name=deal_terms,json=dealTerms,proto3" json:"deal_terms,omitempty"`
}

func (x *Deal_ReleaseDeal) Reset() {
	*x = Deal_ReleaseDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddex_v1beta2_ern_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deal_ReleaseDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal_ReleaseDeal) ProtoMessage() {}

func (x *Deal_ReleaseDeal) ProtoReflect() protoreflect.Message {
	mi := &file_ddex_v1beta2_ern_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal_ReleaseDeal.ProtoReflect.Descriptor instead.
func (*Deal_ReleaseDeal) Descriptor() ([]byte, []int) {
	return file_ddex_v1beta2_ern_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Deal_ReleaseDeal) GetDealReleaseReference() string {
	if x != nil {
		return x.DealReleaseReference
	}
	return ""
}

func (x *Deal_ReleaseDeal) GetDealTerms() *Deal_DealTerms {
	if x != nil {
		return x.DealTerms
	}
	return nil
}

var File_ddex_v1beta2_ern_proto protoreflect.FileDescriptor

var file_ddex_v1beta2_ern_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x65,
	0x72, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x22, 0xbf, 0x02, 0x0a, 0x1d, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xa8, 0x02, 0x0a,
	0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x1a, 0x1d, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x70, 0x69, 0x64, 0x1a, 0x61, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x14, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x81, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x72, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x1a, 0xb6, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xc3, 0x01, 0x0a, 0x0d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a,
	0xbf, 0x0a, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x10, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0x8c, 0x05, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x24,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x68, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x64, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x9f, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x43, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xe4, 0x04, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x5f, 0x0a, 0x11, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x10, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0xf2, 0x02, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4f, 0x0a,
	0x24, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x68, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xc2, 0x11, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x70, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x70, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x9e, 0x01, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x62, 0x0a, 0x05,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x3b, 0x0a, 0x05, 0x50, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x81, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x1a, 0xbc, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x18, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x21, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x1e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x1a, 0xd5, 0x05, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05,
	0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc3, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x84, 0x04, 0x0a, 0x04, 0x44, 0x65,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x1a, 0x5c, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x09, 0x64,
	0x65, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c,
	0x22, 0x52, 0x0a, 0x20, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x2a, 0xcd, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x03, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x75, 0x73, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ddex_v1beta2_ern_proto_rawDescOnce sync.Once
	file_ddex_v1beta2_ern_proto_rawDescData = file_ddex_v1beta2_ern_proto_rawDesc
)

func file_ddex_v1beta2_ern_proto_rawDescGZIP() []byte {
	file_ddex_v1beta2_ern_proto_rawDescOnce.Do(func() {
		file_ddex_v1beta2_ern_proto_rawDescData = protoimpl.X.CompressGZIP(file_ddex_v1beta2_ern_proto_rawDescData)
	})
	return file_ddex_v1beta2_ern_proto_rawDescData
}

var file_ddex_v1beta2_ern_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ddex_v1beta2_ern_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_ddex_v1beta2_ern_proto_goTypes = []interface{}{
	(MessageControlType)(0),                               // 0: ddex.v1beta2.MessageControlType
	(*ElectronicReleaseNotification)(nil),                 // 1: ddex.v1beta2.ElectronicReleaseNotification
	(*MessageHeader)(nil),                                 // 2: ddex.v1beta2.MessageHeader
	(*Party)(nil),                                         // 3: ddex.v1beta2.Party
	(*Resource)(nil),                                      // 4: ddex.v1beta2.Resource
	(*Release)(nil),                                       // 5: ddex.v1beta2.Release
	(*Deal)(nil),                                          // 6: ddex.v1beta2.Deal
	(*ElectronicReleaseNotificationAck)(nil),              // 7: ddex.v1beta2.ElectronicReleaseNotificationAck
	(*Party_PartyId)(nil),                                 // 8: ddex.v1beta2.Party.PartyId
	(*Party_PartyName)(nil),                               // 9: ddex.v1beta2.Party.PartyName
	(*Resource_ResourceId)(nil),                           // 10: ddex.v1beta2.Resource.ResourceId
	(*Resource_Contributor)(nil),                          // 11: ddex.v1beta2.Resource.Contributor
	(*Resource_DisplayArtist)(nil),                        // 12: ddex.v1beta2.Resource.DisplayArtist
	(*Resource_SoundRecording)(nil),                       // 13: ddex.v1beta2.Resource.SoundRecording
	(*Resource_Image)(nil),                                // 14: ddex.v1beta2.Resource.Image
	(*Resource_SoundRecording_SoundTechnicalDetails)(nil), // 15: ddex.v1beta2.Resource.SoundRecording.SoundTechnicalDetails
	(*Resource_SoundRecording_SoundTechnicalDetails_ClipDetails)(nil), // 16: ddex.v1beta2.Resource.SoundRecording.SoundTechnicalDetails.ClipDetails
	(*Resource_Image_ImageTechnicalDetails)(nil),                      // 17: ddex.v1beta2.Resource.Image.ImageTechnicalDetails
	(*Release_ReleaseId)(nil),                                         // 18: ddex.v1beta2.Release.ReleaseId
	(*Release_DisplayArtist)(nil),                                     // 19: ddex.v1beta2.Release.DisplayArtist
	(*Release_Genre)(nil),                                             // 20: ddex.v1beta2.Release.Genre
	(*Release_PLine)(nil),                                             // 21: ddex.v1beta2.Release.PLine
	(*Release_ResourceGroupContentItem)(nil),                          // 22: ddex.v1beta2.Release.ResourceGroupContentItem
	(*Release_ResourceGroup)(nil),                                     // 23: ddex.v1beta2.Release.ResourceGroup
	(*Release_MainRelease)(nil),                                       // 24: ddex.v1beta2.Release.MainRelease
	(*Release_TrackRelease)(nil),                                      // 25: ddex.v1beta2.Release.TrackRelease
	(*Deal_ValidityPeriod)(nil),                                       // 26: ddex.v1beta2.Deal.ValidityPeriod
	(*Deal_DealTerms)(nil),                                            // 27: ddex.v1beta2.Deal.DealTerms
	(*Deal_ReleaseDeal)(nil),                                          // 28: ddex.v1beta2.Deal.ReleaseDeal
}
var file_ddex_v1beta2_ern_proto_depIdxs = []int32{
	2,  // 0: ddex.v1beta2.ElectronicReleaseNotification.message_header:type_name -> ddex.v1beta2.MessageHeader
	3,  // 1: ddex.v1beta2.ElectronicReleaseNotification.party_list:type_name -> ddex.v1beta2.Party
	4,  // 2: ddex.v1beta2.ElectronicReleaseNotification.resource_list:type_name -> ddex.v1beta2.Resource
	5,  // 3: ddex.v1beta2.ElectronicReleaseNotification.release_list:type_name -> ddex.v1beta2.Release
	6,  // 4: ddex.v1beta2.ElectronicReleaseNotification.deal_list:type_name -> ddex.v1beta2.Deal
	0,  // 5: ddex.v1beta2.MessageHeader.message_control_type:type_name -> ddex.v1beta2.MessageControlType
	9,  // 6: ddex.v1beta2.Party.party_name:type_name -> ddex.v1beta2.Party.PartyName
	8,  // 7: ddex.v1beta2.Party.party_id:type_name -> ddex.v1beta2.Party.PartyId
	13, // 8: ddex.v1beta2.Resource.sound_recording:type_name -> ddex.v1beta2.Resource.SoundRecording
	14, // 9: ddex.v1beta2.Resource.image:type_name -> ddex.v1beta2.Resource.Image
	24, // 10: ddex.v1beta2.Release.main_release:type_name -> ddex.v1beta2.Release.MainRelease
	25, // 11: ddex.v1beta2.Release.track_release:type_name -> ddex.v1beta2.Release.TrackRelease
	28, // 12: ddex.v1beta2.Deal.release_deal:type_name -> ddex.v1beta2.Deal.ReleaseDeal
	10, // 13: ddex.v1beta2.Resource.SoundRecording.resource_id:type_name -> ddex.v1beta2.Resource.ResourceId
	12, // 14: ddex.v1beta2.Resource.SoundRecording.display_artist:type_name -> ddex.v1beta2.Resource.DisplayArtist
	11, // 15: ddex.v1beta2.Resource.SoundRecording.contributor:type_name -> ddex.v1beta2.Resource.Contributor
	15, // 16: ddex.v1beta2.Resource.SoundRecording.technical_details:type_name -> ddex.v1beta2.Resource.SoundRecording.SoundTechnicalDetails
	10, // 17: ddex.v1beta2.Resource.Image.resource_id:type_name -> ddex.v1beta2.Resource.ResourceId
	17, // 18: ddex.v1beta2.Resource.Image.technical_details:type_name -> ddex.v1beta2.Resource.Image.ImageTechnicalDetails
	16, // 19: ddex.v1beta2.Resource.SoundRecording.SoundTechnicalDetails.clip_details:type_name -> ddex.v1beta2.Resource.SoundRecording.SoundTechnicalDetails.ClipDetails
	22, // 20: ddex.v1beta2.Release.ResourceGroup.resource_group_content_item:type_name -> ddex.v1beta2.Release.ResourceGroupContentItem
	18, // 21: ddex.v1beta2.Release.MainRelease.release_id:type_name -> ddex.v1beta2.Release.ReleaseId
	19, // 22: ddex.v1beta2.Release.MainRelease.display_artist:type_name -> ddex.v1beta2.Release.DisplayArtist
	21, // 23: ddex.v1beta2.Release.MainRelease.p_line:type_name -> ddex.v1beta2.Release.PLine
	20, // 24: ddex.v1beta2.Release.MainRelease.genre:type_name -> ddex.v1beta2.Release.Genre
	23, // 25: ddex.v1beta2.Release.MainRelease.resource_group:type_name -> ddex.v1beta2.Release.ResourceGroup
	18, // 26: ddex.v1beta2.Release.TrackRelease.release_id:type_name -> ddex.v1beta2.Release.ReleaseId
	20, // 27: ddex.v1beta2.Release.TrackRelease.genre:type_name -> ddex.v1beta2.Release.Genre
	26, // 28: ddex.v1beta2.Deal.DealTerms.validity_period:type_name -> ddex.v1beta2.Deal.ValidityPeriod
	27, // 29: ddex.v1beta2.Deal.ReleaseDeal.deal_terms:type_name -> ddex.v1beta2.Deal.DealTerms
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_ddex_v1beta2_ern_proto_init() }
func file_ddex_v1beta2_ern_proto_init() {
	if File_ddex_v1beta2_ern_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ddex_v1beta2_ern_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronicReleaseNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronicReleaseNotificationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party_PartyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party_PartyName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_ResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_DisplayArtist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_SoundRecording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_SoundRecording_SoundTechnicalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_SoundRecording_SoundTechnicalDetails_ClipDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_Image_ImageTechnicalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_ReleaseId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_DisplayArtist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_Genre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_PLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_ResourceGroupContentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_ResourceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_MainRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_TrackRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deal_ValidityPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deal_DealTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddex_v1beta2_ern_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deal_ReleaseDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ddex_v1beta2_ern_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Resource_SoundRecording_)(nil),
		(*Resource_Image_)(nil),
	}
	file_ddex_v1beta2_ern_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Release_MainRelease_)(nil),
		(*Release_TrackRelease_)(nil),
	}
	file_ddex_v1beta2_ern_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Deal_ReleaseDeal_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ddex_v1beta2_ern_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddex_v1beta2_ern_proto_goTypes,
		DependencyIndexes: file_ddex_v1beta2_ern_proto_depIdxs,
		EnumInfos:         file_ddex_v1beta2_ern_proto_enumTypes,
		MessageInfos:      file_ddex_v1beta2_ern_proto_msgTypes,
	}.Build()
	File_ddex_v1beta2_ern_proto = out.File
	file_ddex_v1beta2_ern_proto_rawDesc = nil
	file_ddex_v1beta2_ern_proto_goTypes = nil
	file_ddex_v1beta2_ern_proto_depIdxs = nil
}
