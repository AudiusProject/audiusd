// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: etl/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AudiusProject/audiusd/pkg/api/etl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ETLServiceName is the fully-qualified name of the ETLService service.
	ETLServiceName = "etl.v1.ETLService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ETLServicePingProcedure is the fully-qualified name of the ETLService's Ping RPC.
	ETLServicePingProcedure = "/etl.v1.ETLService/Ping"
	// ETLServiceGetHealthProcedure is the fully-qualified name of the ETLService's GetHealth RPC.
	ETLServiceGetHealthProcedure = "/etl.v1.ETLService/GetHealth"
	// ETLServiceGetBlockProcedure is the fully-qualified name of the ETLService's GetBlock RPC.
	ETLServiceGetBlockProcedure = "/etl.v1.ETLService/GetBlock"
	// ETLServiceGetBlocksProcedure is the fully-qualified name of the ETLService's GetBlocks RPC.
	ETLServiceGetBlocksProcedure = "/etl.v1.ETLService/GetBlocks"
	// ETLServiceStreamBlocksProcedure is the fully-qualified name of the ETLService's StreamBlocks RPC.
	ETLServiceStreamBlocksProcedure = "/etl.v1.ETLService/StreamBlocks"
	// ETLServiceGetTransactionProcedure is the fully-qualified name of the ETLService's GetTransaction
	// RPC.
	ETLServiceGetTransactionProcedure = "/etl.v1.ETLService/GetTransaction"
	// ETLServiceGetTransactionsProcedure is the fully-qualified name of the ETLService's
	// GetTransactions RPC.
	ETLServiceGetTransactionsProcedure = "/etl.v1.ETLService/GetTransactions"
	// ETLServiceStreamTransactionsProcedure is the fully-qualified name of the ETLService's
	// StreamTransactions RPC.
	ETLServiceStreamTransactionsProcedure = "/etl.v1.ETLService/StreamTransactions"
	// ETLServiceGetPlaysProcedure is the fully-qualified name of the ETLService's GetPlays RPC.
	ETLServiceGetPlaysProcedure = "/etl.v1.ETLService/GetPlays"
	// ETLServiceGetManageEntitiesProcedure is the fully-qualified name of the ETLService's
	// GetManageEntities RPC.
	ETLServiceGetManageEntitiesProcedure = "/etl.v1.ETLService/GetManageEntities"
	// ETLServiceGetValidatorsProcedure is the fully-qualified name of the ETLService's GetValidators
	// RPC.
	ETLServiceGetValidatorsProcedure = "/etl.v1.ETLService/GetValidators"
	// ETLServiceGetValidatorProcedure is the fully-qualified name of the ETLService's GetValidator RPC.
	ETLServiceGetValidatorProcedure = "/etl.v1.ETLService/GetValidator"
	// ETLServiceGetLocationProcedure is the fully-qualified name of the ETLService's GetLocation RPC.
	ETLServiceGetLocationProcedure = "/etl.v1.ETLService/GetLocation"
	// ETLServiceSearchProcedure is the fully-qualified name of the ETLService's Search RPC.
	ETLServiceSearchProcedure = "/etl.v1.ETLService/Search"
)

// ETLServiceClient is a client for the etl.v1.ETLService service.
type ETLServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	GetBlocks(context.Context, *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error)
	StreamBlocks(context.Context, *connect.Request[v1.StreamBlocksRequest]) (*connect.ServerStreamForClient[v1.StreamBlocksResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	GetTransactions(context.Context, *connect.Request[v1.GetTransactionsRequest]) (*connect.Response[v1.GetTransactionsResponse], error)
	StreamTransactions(context.Context, *connect.Request[v1.StreamTransactionsRequest]) (*connect.ServerStreamForClient[v1.StreamTransactionsResponse], error)
	GetPlays(context.Context, *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error)
	GetManageEntities(context.Context, *connect.Request[v1.GetManageEntitiesRequest]) (*connect.Response[v1.GetManageEntitiesResponse], error)
	GetValidators(context.Context, *connect.Request[v1.GetValidatorsRequest]) (*connect.Response[v1.GetValidatorsResponse], error)
	GetValidator(context.Context, *connect.Request[v1.GetValidatorRequest]) (*connect.Response[v1.GetValidatorResponse], error)
	GetLocation(context.Context, *connect.Request[v1.GetLocationRequest]) (*connect.Response[v1.GetLocationResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
}

// NewETLServiceClient constructs a client for the etl.v1.ETLService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewETLServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ETLServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eTLServiceMethods := v1.File_etl_v1_service_proto.Services().ByName("ETLService").Methods()
	return &eTLServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ETLServicePingProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getHealth: connect.NewClient[v1.GetHealthRequest, v1.GetHealthResponse](
			httpClient,
			baseURL+ETLServiceGetHealthProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetHealth")),
			connect.WithClientOptions(opts...),
		),
		getBlock: connect.NewClient[v1.GetBlockRequest, v1.GetBlockResponse](
			httpClient,
			baseURL+ETLServiceGetBlockProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetBlock")),
			connect.WithClientOptions(opts...),
		),
		getBlocks: connect.NewClient[v1.GetBlocksRequest, v1.GetBlocksResponse](
			httpClient,
			baseURL+ETLServiceGetBlocksProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetBlocks")),
			connect.WithClientOptions(opts...),
		),
		streamBlocks: connect.NewClient[v1.StreamBlocksRequest, v1.StreamBlocksResponse](
			httpClient,
			baseURL+ETLServiceStreamBlocksProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("StreamBlocks")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+ETLServiceGetTransactionProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
		getTransactions: connect.NewClient[v1.GetTransactionsRequest, v1.GetTransactionsResponse](
			httpClient,
			baseURL+ETLServiceGetTransactionsProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetTransactions")),
			connect.WithClientOptions(opts...),
		),
		streamTransactions: connect.NewClient[v1.StreamTransactionsRequest, v1.StreamTransactionsResponse](
			httpClient,
			baseURL+ETLServiceStreamTransactionsProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("StreamTransactions")),
			connect.WithClientOptions(opts...),
		),
		getPlays: connect.NewClient[v1.GetPlaysRequest, v1.GetPlaysResponse](
			httpClient,
			baseURL+ETLServiceGetPlaysProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetPlays")),
			connect.WithClientOptions(opts...),
		),
		getManageEntities: connect.NewClient[v1.GetManageEntitiesRequest, v1.GetManageEntitiesResponse](
			httpClient,
			baseURL+ETLServiceGetManageEntitiesProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetManageEntities")),
			connect.WithClientOptions(opts...),
		),
		getValidators: connect.NewClient[v1.GetValidatorsRequest, v1.GetValidatorsResponse](
			httpClient,
			baseURL+ETLServiceGetValidatorsProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetValidators")),
			connect.WithClientOptions(opts...),
		),
		getValidator: connect.NewClient[v1.GetValidatorRequest, v1.GetValidatorResponse](
			httpClient,
			baseURL+ETLServiceGetValidatorProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetValidator")),
			connect.WithClientOptions(opts...),
		),
		getLocation: connect.NewClient[v1.GetLocationRequest, v1.GetLocationResponse](
			httpClient,
			baseURL+ETLServiceGetLocationProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("GetLocation")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+ETLServiceSearchProcedure,
			connect.WithSchema(eTLServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eTLServiceClient implements ETLServiceClient.
type eTLServiceClient struct {
	ping               *connect.Client[v1.PingRequest, v1.PingResponse]
	getHealth          *connect.Client[v1.GetHealthRequest, v1.GetHealthResponse]
	getBlock           *connect.Client[v1.GetBlockRequest, v1.GetBlockResponse]
	getBlocks          *connect.Client[v1.GetBlocksRequest, v1.GetBlocksResponse]
	streamBlocks       *connect.Client[v1.StreamBlocksRequest, v1.StreamBlocksResponse]
	getTransaction     *connect.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	getTransactions    *connect.Client[v1.GetTransactionsRequest, v1.GetTransactionsResponse]
	streamTransactions *connect.Client[v1.StreamTransactionsRequest, v1.StreamTransactionsResponse]
	getPlays           *connect.Client[v1.GetPlaysRequest, v1.GetPlaysResponse]
	getManageEntities  *connect.Client[v1.GetManageEntitiesRequest, v1.GetManageEntitiesResponse]
	getValidators      *connect.Client[v1.GetValidatorsRequest, v1.GetValidatorsResponse]
	getValidator       *connect.Client[v1.GetValidatorRequest, v1.GetValidatorResponse]
	getLocation        *connect.Client[v1.GetLocationRequest, v1.GetLocationResponse]
	search             *connect.Client[v1.SearchRequest, v1.SearchResponse]
}

// Ping calls etl.v1.ETLService.Ping.
func (c *eTLServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetHealth calls etl.v1.ETLService.GetHealth.
func (c *eTLServiceClient) GetHealth(ctx context.Context, req *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return c.getHealth.CallUnary(ctx, req)
}

// GetBlock calls etl.v1.ETLService.GetBlock.
func (c *eTLServiceClient) GetBlock(ctx context.Context, req *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlocks calls etl.v1.ETLService.GetBlocks.
func (c *eTLServiceClient) GetBlocks(ctx context.Context, req *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error) {
	return c.getBlocks.CallUnary(ctx, req)
}

// StreamBlocks calls etl.v1.ETLService.StreamBlocks.
func (c *eTLServiceClient) StreamBlocks(ctx context.Context, req *connect.Request[v1.StreamBlocksRequest]) (*connect.ServerStreamForClient[v1.StreamBlocksResponse], error) {
	return c.streamBlocks.CallServerStream(ctx, req)
}

// GetTransaction calls etl.v1.ETLService.GetTransaction.
func (c *eTLServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// GetTransactions calls etl.v1.ETLService.GetTransactions.
func (c *eTLServiceClient) GetTransactions(ctx context.Context, req *connect.Request[v1.GetTransactionsRequest]) (*connect.Response[v1.GetTransactionsResponse], error) {
	return c.getTransactions.CallUnary(ctx, req)
}

// StreamTransactions calls etl.v1.ETLService.StreamTransactions.
func (c *eTLServiceClient) StreamTransactions(ctx context.Context, req *connect.Request[v1.StreamTransactionsRequest]) (*connect.ServerStreamForClient[v1.StreamTransactionsResponse], error) {
	return c.streamTransactions.CallServerStream(ctx, req)
}

// GetPlays calls etl.v1.ETLService.GetPlays.
func (c *eTLServiceClient) GetPlays(ctx context.Context, req *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error) {
	return c.getPlays.CallUnary(ctx, req)
}

// GetManageEntities calls etl.v1.ETLService.GetManageEntities.
func (c *eTLServiceClient) GetManageEntities(ctx context.Context, req *connect.Request[v1.GetManageEntitiesRequest]) (*connect.Response[v1.GetManageEntitiesResponse], error) {
	return c.getManageEntities.CallUnary(ctx, req)
}

// GetValidators calls etl.v1.ETLService.GetValidators.
func (c *eTLServiceClient) GetValidators(ctx context.Context, req *connect.Request[v1.GetValidatorsRequest]) (*connect.Response[v1.GetValidatorsResponse], error) {
	return c.getValidators.CallUnary(ctx, req)
}

// GetValidator calls etl.v1.ETLService.GetValidator.
func (c *eTLServiceClient) GetValidator(ctx context.Context, req *connect.Request[v1.GetValidatorRequest]) (*connect.Response[v1.GetValidatorResponse], error) {
	return c.getValidator.CallUnary(ctx, req)
}

// GetLocation calls etl.v1.ETLService.GetLocation.
func (c *eTLServiceClient) GetLocation(ctx context.Context, req *connect.Request[v1.GetLocationRequest]) (*connect.Response[v1.GetLocationResponse], error) {
	return c.getLocation.CallUnary(ctx, req)
}

// Search calls etl.v1.ETLService.Search.
func (c *eTLServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// ETLServiceHandler is an implementation of the etl.v1.ETLService service.
type ETLServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error)
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	GetBlocks(context.Context, *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error)
	StreamBlocks(context.Context, *connect.Request[v1.StreamBlocksRequest], *connect.ServerStream[v1.StreamBlocksResponse]) error
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	GetTransactions(context.Context, *connect.Request[v1.GetTransactionsRequest]) (*connect.Response[v1.GetTransactionsResponse], error)
	StreamTransactions(context.Context, *connect.Request[v1.StreamTransactionsRequest], *connect.ServerStream[v1.StreamTransactionsResponse]) error
	GetPlays(context.Context, *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error)
	GetManageEntities(context.Context, *connect.Request[v1.GetManageEntitiesRequest]) (*connect.Response[v1.GetManageEntitiesResponse], error)
	GetValidators(context.Context, *connect.Request[v1.GetValidatorsRequest]) (*connect.Response[v1.GetValidatorsResponse], error)
	GetValidator(context.Context, *connect.Request[v1.GetValidatorRequest]) (*connect.Response[v1.GetValidatorResponse], error)
	GetLocation(context.Context, *connect.Request[v1.GetLocationRequest]) (*connect.Response[v1.GetLocationResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
}

// NewETLServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewETLServiceHandler(svc ETLServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eTLServiceMethods := v1.File_etl_v1_service_proto.Services().ByName("ETLService").Methods()
	eTLServicePingHandler := connect.NewUnaryHandler(
		ETLServicePingProcedure,
		svc.Ping,
		connect.WithSchema(eTLServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetHealthHandler := connect.NewUnaryHandler(
		ETLServiceGetHealthProcedure,
		svc.GetHealth,
		connect.WithSchema(eTLServiceMethods.ByName("GetHealth")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetBlockHandler := connect.NewUnaryHandler(
		ETLServiceGetBlockProcedure,
		svc.GetBlock,
		connect.WithSchema(eTLServiceMethods.ByName("GetBlock")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetBlocksHandler := connect.NewUnaryHandler(
		ETLServiceGetBlocksProcedure,
		svc.GetBlocks,
		connect.WithSchema(eTLServiceMethods.ByName("GetBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceStreamBlocksHandler := connect.NewServerStreamHandler(
		ETLServiceStreamBlocksProcedure,
		svc.StreamBlocks,
		connect.WithSchema(eTLServiceMethods.ByName("StreamBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetTransactionHandler := connect.NewUnaryHandler(
		ETLServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(eTLServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetTransactionsHandler := connect.NewUnaryHandler(
		ETLServiceGetTransactionsProcedure,
		svc.GetTransactions,
		connect.WithSchema(eTLServiceMethods.ByName("GetTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceStreamTransactionsHandler := connect.NewServerStreamHandler(
		ETLServiceStreamTransactionsProcedure,
		svc.StreamTransactions,
		connect.WithSchema(eTLServiceMethods.ByName("StreamTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetPlaysHandler := connect.NewUnaryHandler(
		ETLServiceGetPlaysProcedure,
		svc.GetPlays,
		connect.WithSchema(eTLServiceMethods.ByName("GetPlays")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetManageEntitiesHandler := connect.NewUnaryHandler(
		ETLServiceGetManageEntitiesProcedure,
		svc.GetManageEntities,
		connect.WithSchema(eTLServiceMethods.ByName("GetManageEntities")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetValidatorsHandler := connect.NewUnaryHandler(
		ETLServiceGetValidatorsProcedure,
		svc.GetValidators,
		connect.WithSchema(eTLServiceMethods.ByName("GetValidators")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetValidatorHandler := connect.NewUnaryHandler(
		ETLServiceGetValidatorProcedure,
		svc.GetValidator,
		connect.WithSchema(eTLServiceMethods.ByName("GetValidator")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceGetLocationHandler := connect.NewUnaryHandler(
		ETLServiceGetLocationProcedure,
		svc.GetLocation,
		connect.WithSchema(eTLServiceMethods.ByName("GetLocation")),
		connect.WithHandlerOptions(opts...),
	)
	eTLServiceSearchHandler := connect.NewUnaryHandler(
		ETLServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(eTLServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	return "/etl.v1.ETLService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ETLServicePingProcedure:
			eTLServicePingHandler.ServeHTTP(w, r)
		case ETLServiceGetHealthProcedure:
			eTLServiceGetHealthHandler.ServeHTTP(w, r)
		case ETLServiceGetBlockProcedure:
			eTLServiceGetBlockHandler.ServeHTTP(w, r)
		case ETLServiceGetBlocksProcedure:
			eTLServiceGetBlocksHandler.ServeHTTP(w, r)
		case ETLServiceStreamBlocksProcedure:
			eTLServiceStreamBlocksHandler.ServeHTTP(w, r)
		case ETLServiceGetTransactionProcedure:
			eTLServiceGetTransactionHandler.ServeHTTP(w, r)
		case ETLServiceGetTransactionsProcedure:
			eTLServiceGetTransactionsHandler.ServeHTTP(w, r)
		case ETLServiceStreamTransactionsProcedure:
			eTLServiceStreamTransactionsHandler.ServeHTTP(w, r)
		case ETLServiceGetPlaysProcedure:
			eTLServiceGetPlaysHandler.ServeHTTP(w, r)
		case ETLServiceGetManageEntitiesProcedure:
			eTLServiceGetManageEntitiesHandler.ServeHTTP(w, r)
		case ETLServiceGetValidatorsProcedure:
			eTLServiceGetValidatorsHandler.ServeHTTP(w, r)
		case ETLServiceGetValidatorProcedure:
			eTLServiceGetValidatorHandler.ServeHTTP(w, r)
		case ETLServiceGetLocationProcedure:
			eTLServiceGetLocationHandler.ServeHTTP(w, r)
		case ETLServiceSearchProcedure:
			eTLServiceSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedETLServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedETLServiceHandler struct{}

func (UnimplementedETLServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.Ping is not implemented"))
}

func (UnimplementedETLServiceHandler) GetHealth(context.Context, *connect.Request[v1.GetHealthRequest]) (*connect.Response[v1.GetHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetHealth is not implemented"))
}

func (UnimplementedETLServiceHandler) GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetBlock is not implemented"))
}

func (UnimplementedETLServiceHandler) GetBlocks(context.Context, *connect.Request[v1.GetBlocksRequest]) (*connect.Response[v1.GetBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetBlocks is not implemented"))
}

func (UnimplementedETLServiceHandler) StreamBlocks(context.Context, *connect.Request[v1.StreamBlocksRequest], *connect.ServerStream[v1.StreamBlocksResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.StreamBlocks is not implemented"))
}

func (UnimplementedETLServiceHandler) GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetTransaction is not implemented"))
}

func (UnimplementedETLServiceHandler) GetTransactions(context.Context, *connect.Request[v1.GetTransactionsRequest]) (*connect.Response[v1.GetTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetTransactions is not implemented"))
}

func (UnimplementedETLServiceHandler) StreamTransactions(context.Context, *connect.Request[v1.StreamTransactionsRequest], *connect.ServerStream[v1.StreamTransactionsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.StreamTransactions is not implemented"))
}

func (UnimplementedETLServiceHandler) GetPlays(context.Context, *connect.Request[v1.GetPlaysRequest]) (*connect.Response[v1.GetPlaysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetPlays is not implemented"))
}

func (UnimplementedETLServiceHandler) GetManageEntities(context.Context, *connect.Request[v1.GetManageEntitiesRequest]) (*connect.Response[v1.GetManageEntitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetManageEntities is not implemented"))
}

func (UnimplementedETLServiceHandler) GetValidators(context.Context, *connect.Request[v1.GetValidatorsRequest]) (*connect.Response[v1.GetValidatorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetValidators is not implemented"))
}

func (UnimplementedETLServiceHandler) GetValidator(context.Context, *connect.Request[v1.GetValidatorRequest]) (*connect.Response[v1.GetValidatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetValidator is not implemented"))
}

func (UnimplementedETLServiceHandler) GetLocation(context.Context, *connect.Request[v1.GetLocationRequest]) (*connect.Response[v1.GetLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.GetLocation is not implemented"))
}

func (UnimplementedETLServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("etl.v1.ETLService.Search is not implemented"))
}
