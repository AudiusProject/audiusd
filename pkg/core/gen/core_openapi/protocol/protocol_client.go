// Code generated by go-swagger; DO NOT EDIT.

package protocol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new protocol API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new protocol API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new protocol API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for protocol API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProtocolForwardTransaction(params *ProtocolForwardTransactionParams, opts ...ClientOption) (*ProtocolForwardTransactionOK, error)

	ProtocolGetBlock(params *ProtocolGetBlockParams, opts ...ClientOption) (*ProtocolGetBlockOK, error)

	ProtocolGetNodeInfo(params *ProtocolGetNodeInfoParams, opts ...ClientOption) (*ProtocolGetNodeInfoOK, error)

	ProtocolGetRegistrationAttestation(params *ProtocolGetRegistrationAttestationParams, opts ...ClientOption) (*ProtocolGetRegistrationAttestationOK, error)

	ProtocolGetTransaction(params *ProtocolGetTransactionParams, opts ...ClientOption) (*ProtocolGetTransactionOK, error)

	ProtocolPing(params *ProtocolPingParams, opts ...ClientOption) (*ProtocolPingOK, error)

	ProtocolSendTransaction(params *ProtocolSendTransactionParams, opts ...ClientOption) (*ProtocolSendTransactionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProtocolForwardTransaction protocol forward transaction API
*/
func (a *Client) ProtocolForwardTransaction(params *ProtocolForwardTransactionParams, opts ...ClientOption) (*ProtocolForwardTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolForwardTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_ForwardTransaction",
		Method:             "POST",
		PathPattern:        "/core/grpc/transaction/forward",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolForwardTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolForwardTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolForwardTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtocolGetBlock protocol get block API
*/
func (a *Client) ProtocolGetBlock(params *ProtocolGetBlockParams, opts ...ClientOption) (*ProtocolGetBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolGetBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_GetBlock",
		Method:             "GET",
		PathPattern:        "/core/grpc/block/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolGetBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolGetBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolGetBlockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtocolGetNodeInfo protocol get node info API
*/
func (a *Client) ProtocolGetNodeInfo(params *ProtocolGetNodeInfoParams, opts ...ClientOption) (*ProtocolGetNodeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolGetNodeInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_GetNodeInfo",
		Method:             "GET",
		PathPattern:        "/core/grpc/node_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolGetNodeInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolGetNodeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolGetNodeInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtocolGetRegistrationAttestation protocol get registration attestation API
*/
func (a *Client) ProtocolGetRegistrationAttestation(params *ProtocolGetRegistrationAttestationParams, opts ...ClientOption) (*ProtocolGetRegistrationAttestationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolGetRegistrationAttestationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_GetRegistrationAttestation",
		Method:             "POST",
		PathPattern:        "/core/grpc/attest/registration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolGetRegistrationAttestationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolGetRegistrationAttestationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolGetRegistrationAttestationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtocolGetTransaction protocol get transaction API
*/
func (a *Client) ProtocolGetTransaction(params *ProtocolGetTransactionParams, opts ...ClientOption) (*ProtocolGetTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolGetTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_GetTransaction",
		Method:             "GET",
		PathPattern:        "/core/grpc/transaction/{txhash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolGetTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolGetTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolGetTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtocolPing protocol ping API
*/
func (a *Client) ProtocolPing(params *ProtocolPingParams, opts ...ClientOption) (*ProtocolPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_Ping",
		Method:             "GET",
		PathPattern:        "/core/grpc/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolPingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtocolSendTransaction protocol send transaction API
*/
func (a *Client) ProtocolSendTransaction(params *ProtocolSendTransactionParams, opts ...ClientOption) (*ProtocolSendTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtocolSendTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Protocol_SendTransaction",
		Method:             "POST",
		PathPattern:        "/core/grpc/transaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProtocolSendTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtocolSendTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtocolSendTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
