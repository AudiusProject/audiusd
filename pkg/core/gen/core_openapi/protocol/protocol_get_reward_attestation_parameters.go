// Code generated by go-swagger; DO NOT EDIT.

package protocol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewProtocolGetRewardAttestationParams creates a new ProtocolGetRewardAttestationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProtocolGetRewardAttestationParams() *ProtocolGetRewardAttestationParams {
	return &ProtocolGetRewardAttestationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProtocolGetRewardAttestationParamsWithTimeout creates a new ProtocolGetRewardAttestationParams object
// with the ability to set a timeout on a request.
func NewProtocolGetRewardAttestationParamsWithTimeout(timeout time.Duration) *ProtocolGetRewardAttestationParams {
	return &ProtocolGetRewardAttestationParams{
		timeout: timeout,
	}
}

// NewProtocolGetRewardAttestationParamsWithContext creates a new ProtocolGetRewardAttestationParams object
// with the ability to set a context for a request.
func NewProtocolGetRewardAttestationParamsWithContext(ctx context.Context) *ProtocolGetRewardAttestationParams {
	return &ProtocolGetRewardAttestationParams{
		Context: ctx,
	}
}

// NewProtocolGetRewardAttestationParamsWithHTTPClient creates a new ProtocolGetRewardAttestationParams object
// with the ability to set a custom HTTPClient for a request.
func NewProtocolGetRewardAttestationParamsWithHTTPClient(client *http.Client) *ProtocolGetRewardAttestationParams {
	return &ProtocolGetRewardAttestationParams{
		HTTPClient: client,
	}
}

/*
ProtocolGetRewardAttestationParams contains all the parameters to send to the API endpoint

	for the protocol get reward attestation operation.

	Typically these are written to a http.Request.
*/
type ProtocolGetRewardAttestationParams struct {

	// EncodedUserID.
	EncodedUserID *string

	// OracleAddress.
	OracleAddress *string

	/* RewardID.

	   might be known as challenge_id elsewhere
	*/
	RewardID *string

	/* Signature.

	   signed sha256 hash of fields concatenated and joined by "+"
	*/
	Signature *string

	// Specifier.
	Specifier *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the protocol get reward attestation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProtocolGetRewardAttestationParams) WithDefaults() *ProtocolGetRewardAttestationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the protocol get reward attestation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProtocolGetRewardAttestationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithTimeout(timeout time.Duration) *ProtocolGetRewardAttestationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithContext(ctx context.Context) *ProtocolGetRewardAttestationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithHTTPClient(client *http.Client) *ProtocolGetRewardAttestationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncodedUserID adds the encodedUserID to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithEncodedUserID(encodedUserID *string) *ProtocolGetRewardAttestationParams {
	o.SetEncodedUserID(encodedUserID)
	return o
}

// SetEncodedUserID adds the encodedUserId to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetEncodedUserID(encodedUserID *string) {
	o.EncodedUserID = encodedUserID
}

// WithOracleAddress adds the oracleAddress to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithOracleAddress(oracleAddress *string) *ProtocolGetRewardAttestationParams {
	o.SetOracleAddress(oracleAddress)
	return o
}

// SetOracleAddress adds the oracleAddress to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetOracleAddress(oracleAddress *string) {
	o.OracleAddress = oracleAddress
}

// WithRewardID adds the rewardID to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithRewardID(rewardID *string) *ProtocolGetRewardAttestationParams {
	o.SetRewardID(rewardID)
	return o
}

// SetRewardID adds the rewardId to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetRewardID(rewardID *string) {
	o.RewardID = rewardID
}

// WithSignature adds the signature to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithSignature(signature *string) *ProtocolGetRewardAttestationParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithSpecifier adds the specifier to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) WithSpecifier(specifier *string) *ProtocolGetRewardAttestationParams {
	o.SetSpecifier(specifier)
	return o
}

// SetSpecifier adds the specifier to the protocol get reward attestation params
func (o *ProtocolGetRewardAttestationParams) SetSpecifier(specifier *string) {
	o.Specifier = specifier
}

// WriteToRequest writes these params to a swagger request
func (o *ProtocolGetRewardAttestationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EncodedUserID != nil {

		// query param encodedUserId
		var qrEncodedUserID string

		if o.EncodedUserID != nil {
			qrEncodedUserID = *o.EncodedUserID
		}
		qEncodedUserID := qrEncodedUserID
		if qEncodedUserID != "" {

			if err := r.SetQueryParam("encodedUserId", qEncodedUserID); err != nil {
				return err
			}
		}
	}

	if o.OracleAddress != nil {

		// query param oracleAddress
		var qrOracleAddress string

		if o.OracleAddress != nil {
			qrOracleAddress = *o.OracleAddress
		}
		qOracleAddress := qrOracleAddress
		if qOracleAddress != "" {

			if err := r.SetQueryParam("oracleAddress", qOracleAddress); err != nil {
				return err
			}
		}
	}

	if o.RewardID != nil {

		// query param rewardId
		var qrRewardID string

		if o.RewardID != nil {
			qrRewardID = *o.RewardID
		}
		qRewardID := qrRewardID
		if qRewardID != "" {

			if err := r.SetQueryParam("rewardId", qRewardID); err != nil {
				return err
			}
		}
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string

		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {

			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}
	}

	if o.Specifier != nil {

		// query param specifier
		var qrSpecifier string

		if o.Specifier != nil {
			qrSpecifier = *o.Specifier
		}
		qSpecifier := qrSpecifier
		if qSpecifier != "" {

			if err := r.SetQueryParam("specifier", qSpecifier); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
