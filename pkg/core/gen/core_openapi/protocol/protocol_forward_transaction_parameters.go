// Code generated by go-swagger; DO NOT EDIT.

package protocol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/AudiusProject/audiusd/pkg/core/gen/models"
)

// NewProtocolForwardTransactionParams creates a new ProtocolForwardTransactionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProtocolForwardTransactionParams() *ProtocolForwardTransactionParams {
	return &ProtocolForwardTransactionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProtocolForwardTransactionParamsWithTimeout creates a new ProtocolForwardTransactionParams object
// with the ability to set a timeout on a request.
func NewProtocolForwardTransactionParamsWithTimeout(timeout time.Duration) *ProtocolForwardTransactionParams {
	return &ProtocolForwardTransactionParams{
		timeout: timeout,
	}
}

// NewProtocolForwardTransactionParamsWithContext creates a new ProtocolForwardTransactionParams object
// with the ability to set a context for a request.
func NewProtocolForwardTransactionParamsWithContext(ctx context.Context) *ProtocolForwardTransactionParams {
	return &ProtocolForwardTransactionParams{
		Context: ctx,
	}
}

// NewProtocolForwardTransactionParamsWithHTTPClient creates a new ProtocolForwardTransactionParams object
// with the ability to set a custom HTTPClient for a request.
func NewProtocolForwardTransactionParamsWithHTTPClient(client *http.Client) *ProtocolForwardTransactionParams {
	return &ProtocolForwardTransactionParams{
		HTTPClient: client,
	}
}

/*
ProtocolForwardTransactionParams contains all the parameters to send to the API endpoint

	for the protocol forward transaction operation.

	Typically these are written to a http.Request.
*/
type ProtocolForwardTransactionParams struct {

	// Deadline.
	//
	// Format: int64
	Deadline *string

	// ForwardedFrom.
	ForwardedFrom *string

	// Signature.
	Signature *string

	// SubmittedAt.
	//
	// Format: date-time
	SubmittedAt *strfmt.DateTime

	// Transaction.
	Transaction *models.ProtocolSignedTransaction

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the protocol forward transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProtocolForwardTransactionParams) WithDefaults() *ProtocolForwardTransactionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the protocol forward transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProtocolForwardTransactionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithTimeout(timeout time.Duration) *ProtocolForwardTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithContext(ctx context.Context) *ProtocolForwardTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithHTTPClient(client *http.Client) *ProtocolForwardTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeadline adds the deadline to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithDeadline(deadline *string) *ProtocolForwardTransactionParams {
	o.SetDeadline(deadline)
	return o
}

// SetDeadline adds the deadline to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetDeadline(deadline *string) {
	o.Deadline = deadline
}

// WithForwardedFrom adds the forwardedFrom to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithForwardedFrom(forwardedFrom *string) *ProtocolForwardTransactionParams {
	o.SetForwardedFrom(forwardedFrom)
	return o
}

// SetForwardedFrom adds the forwardedFrom to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetForwardedFrom(forwardedFrom *string) {
	o.ForwardedFrom = forwardedFrom
}

// WithSignature adds the signature to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithSignature(signature *string) *ProtocolForwardTransactionParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithSubmittedAt adds the submittedAt to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithSubmittedAt(submittedAt *strfmt.DateTime) *ProtocolForwardTransactionParams {
	o.SetSubmittedAt(submittedAt)
	return o
}

// SetSubmittedAt adds the submittedAt to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetSubmittedAt(submittedAt *strfmt.DateTime) {
	o.SubmittedAt = submittedAt
}

// WithTransaction adds the transaction to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) WithTransaction(transaction *models.ProtocolSignedTransaction) *ProtocolForwardTransactionParams {
	o.SetTransaction(transaction)
	return o
}

// SetTransaction adds the transaction to the protocol forward transaction params
func (o *ProtocolForwardTransactionParams) SetTransaction(transaction *models.ProtocolSignedTransaction) {
	o.Transaction = transaction
}

// WriteToRequest writes these params to a swagger request
func (o *ProtocolForwardTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Deadline != nil {

		// query param deadline
		var qrDeadline string

		if o.Deadline != nil {
			qrDeadline = *o.Deadline
		}
		qDeadline := qrDeadline
		if qDeadline != "" {

			if err := r.SetQueryParam("deadline", qDeadline); err != nil {
				return err
			}
		}
	}

	if o.ForwardedFrom != nil {

		// query param forwardedFrom
		var qrForwardedFrom string

		if o.ForwardedFrom != nil {
			qrForwardedFrom = *o.ForwardedFrom
		}
		qForwardedFrom := qrForwardedFrom
		if qForwardedFrom != "" {

			if err := r.SetQueryParam("forwardedFrom", qForwardedFrom); err != nil {
				return err
			}
		}
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string

		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {

			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}
	}

	if o.SubmittedAt != nil {

		// query param submittedAt
		var qrSubmittedAt strfmt.DateTime

		if o.SubmittedAt != nil {
			qrSubmittedAt = *o.SubmittedAt
		}
		qSubmittedAt := qrSubmittedAt.String()
		if qSubmittedAt != "" {

			if err := r.SetQueryParam("submittedAt", qSubmittedAt); err != nil {
				return err
			}
		}
	}
	if o.Transaction != nil {
		if err := r.SetBodyParam(o.Transaction); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
