// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1beta1ReleaseHeader v1beta1 release header
//
// swagger:model v1beta1ReleaseHeader
type V1beta1ReleaseHeader struct {

	// message Id
	MessageID string `json:"messageId,omitempty"`

	// sender
	Sender *V1beta1Party `json:"sender,omitempty"`

	// sent on behalf of
	SentOnBehalfOf *V1beta1Party `json:"sentOnBehalfOf,omitempty"`
}

// Validate validates this v1beta1 release header
func (m *V1beta1ReleaseHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentOnBehalfOf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ReleaseHeader) validateSender(formats strfmt.Registry) error {
	if swag.IsZero(m.Sender) { // not required
		return nil
	}

	if m.Sender != nil {
		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ReleaseHeader) validateSentOnBehalfOf(formats strfmt.Registry) error {
	if swag.IsZero(m.SentOnBehalfOf) { // not required
		return nil
	}

	if m.SentOnBehalfOf != nil {
		if err := m.SentOnBehalfOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sentOnBehalfOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sentOnBehalfOf")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1beta1 release header based on the context it is used
func (m *V1beta1ReleaseHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSentOnBehalfOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1ReleaseHeader) contextValidateSender(ctx context.Context, formats strfmt.Registry) error {

	if m.Sender != nil {

		if swag.IsZero(m.Sender) { // not required
			return nil
		}

		if err := m.Sender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1ReleaseHeader) contextValidateSentOnBehalfOf(ctx context.Context, formats strfmt.Registry) error {

	if m.SentOnBehalfOf != nil {

		if swag.IsZero(m.SentOnBehalfOf) { // not required
			return nil
		}

		if err := m.SentOnBehalfOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sentOnBehalfOf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sentOnBehalfOf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1ReleaseHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1ReleaseHeader) UnmarshalBinary(b []byte) error {
	var res V1beta1ReleaseHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
