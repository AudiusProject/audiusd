// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1NewReleaseMessage v1 new release message
//
// swagger:model v1NewReleaseMessage
type V1NewReleaseMessage struct {

	// release header
	ReleaseHeader *V1ReleaseHeader `json:"releaseHeader,omitempty"`

	// release list
	ReleaseList []*V1Release `json:"releaseList"`

	// resource list
	ResourceList []*V1Resource `json:"resourceList"`
}

// Validate validates this v1 new release message
func (m *V1NewReleaseMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleaseHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1NewReleaseMessage) validateReleaseHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseHeader) { // not required
		return nil
	}

	if m.ReleaseHeader != nil {
		if err := m.ReleaseHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseHeader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseHeader")
			}
			return err
		}
	}

	return nil
}

func (m *V1NewReleaseMessage) validateReleaseList(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseList) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseList); i++ {
		if swag.IsZero(m.ReleaseList[i]) { // not required
			continue
		}

		if m.ReleaseList[i] != nil {
			if err := m.ReleaseList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releaseList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("releaseList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1NewReleaseMessage) validateResourceList(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceList) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceList); i++ {
		if swag.IsZero(m.ResourceList[i]) { // not required
			continue
		}

		if m.ResourceList[i] != nil {
			if err := m.ResourceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 new release message based on the context it is used
func (m *V1NewReleaseMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReleaseHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReleaseList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1NewReleaseMessage) contextValidateReleaseHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.ReleaseHeader != nil {

		if swag.IsZero(m.ReleaseHeader) { // not required
			return nil
		}

		if err := m.ReleaseHeader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseHeader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseHeader")
			}
			return err
		}
	}

	return nil
}

func (m *V1NewReleaseMessage) contextValidateReleaseList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReleaseList); i++ {

		if m.ReleaseList[i] != nil {

			if swag.IsZero(m.ReleaseList[i]) { // not required
				return nil
			}

			if err := m.ReleaseList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releaseList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("releaseList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1NewReleaseMessage) contextValidateResourceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceList); i++ {

		if m.ResourceList[i] != nil {

			if swag.IsZero(m.ResourceList[i]) { // not required
				return nil
			}

			if err := m.ResourceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1NewReleaseMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1NewReleaseMessage) UnmarshalBinary(b []byte) error {
	var res V1NewReleaseMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
