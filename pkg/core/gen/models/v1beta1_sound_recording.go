// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1beta1SoundRecording v1beta1 sound recording
//
// swagger:model v1beta1SoundRecording
type V1beta1SoundRecording struct {

	// cid
	Cid string `json:"cid,omitempty"`

	// contributors
	Contributors []*V1beta1ResourceContributor `json:"contributors"`

	// filename
	Filename string `json:"filename,omitempty"`

	// id
	ID *V1beta1SoundRecordingID `json:"id,omitempty"`

	// indirect contributors
	IndirectContributors []*V1beta1ResourceContributor `json:"indirectContributors"`

	// md5 hash
	Md5Hash string `json:"md5Hash,omitempty"`
}

// Validate validates this v1beta1 sound recording
func (m *V1beta1SoundRecording) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContributors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndirectContributors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1SoundRecording) validateContributors(formats strfmt.Registry) error {
	if swag.IsZero(m.Contributors) { // not required
		return nil
	}

	for i := 0; i < len(m.Contributors); i++ {
		if swag.IsZero(m.Contributors[i]) { // not required
			continue
		}

		if m.Contributors[i] != nil {
			if err := m.Contributors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1SoundRecording) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1SoundRecording) validateIndirectContributors(formats strfmt.Registry) error {
	if swag.IsZero(m.IndirectContributors) { // not required
		return nil
	}

	for i := 0; i < len(m.IndirectContributors); i++ {
		if swag.IsZero(m.IndirectContributors[i]) { // not required
			continue
		}

		if m.IndirectContributors[i] != nil {
			if err := m.IndirectContributors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("indirectContributors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("indirectContributors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1beta1 sound recording based on the context it is used
func (m *V1beta1SoundRecording) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContributors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndirectContributors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1SoundRecording) contextValidateContributors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Contributors); i++ {

		if m.Contributors[i] != nil {

			if swag.IsZero(m.Contributors[i]) { // not required
				return nil
			}

			if err := m.Contributors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1SoundRecording) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {

		if swag.IsZero(m.ID) { // not required
			return nil
		}

		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1SoundRecording) contextValidateIndirectContributors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IndirectContributors); i++ {

		if m.IndirectContributors[i] != nil {

			if swag.IsZero(m.IndirectContributors[i]) { // not required
				return nil
			}

			if err := m.IndirectContributors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("indirectContributors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("indirectContributors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1SoundRecording) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1SoundRecording) UnmarshalBinary(b []byte) error {
	var res V1beta1SoundRecording
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
