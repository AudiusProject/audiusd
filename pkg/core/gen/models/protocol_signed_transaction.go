// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtocolSignedTransaction protocol signed transaction
//
// swagger:model protocolSignedTransaction
type ProtocolSignedTransaction struct {

	// attestation
	Attestation *ProtocolAttestation `json:"attestation,omitempty"`

	// manage entity
	ManageEntity *ProtocolManageEntityLegacy `json:"manageEntity,omitempty"`

	// plays
	Plays *ProtocolTrackPlays `json:"plays,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// signature
	Signature string `json:"signature,omitempty"`

	// sla rollup
	SLARollup *ProtocolSLARollup `json:"slaRollup,omitempty"`

	// storage proof
	StorageProof *ProtocolStorageProof `json:"storageProof,omitempty"`

	// storage proof verification
	StorageProofVerification *ProtocolStorageProofVerification `json:"storageProofVerification,omitempty"`

	// validator deregistration
	ValidatorDeregistration *ProtocolValidatorMisbehaviorDeregistration `json:"validatorDeregistration,omitempty"`

	// validator registration
	ValidatorRegistration *ProtocolValidatorRegistrationLegacy `json:"validatorRegistration,omitempty"`
}

// Validate validates this protocol signed transaction
func (m *ProtocolSignedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManageEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLARollup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageProofVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorDeregistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorRegistration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtocolSignedTransaction) validateAttestation(formats strfmt.Registry) error {
	if swag.IsZero(m.Attestation) { // not required
		return nil
	}

	if m.Attestation != nil {
		if err := m.Attestation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attestation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attestation")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validateManageEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ManageEntity) { // not required
		return nil
	}

	if m.ManageEntity != nil {
		if err := m.ManageEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manageEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manageEntity")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validatePlays(formats strfmt.Registry) error {
	if swag.IsZero(m.Plays) { // not required
		return nil
	}

	if m.Plays != nil {
		if err := m.Plays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plays")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validateSLARollup(formats strfmt.Registry) error {
	if swag.IsZero(m.SLARollup) { // not required
		return nil
	}

	if m.SLARollup != nil {
		if err := m.SLARollup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slaRollup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slaRollup")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validateStorageProof(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageProof) { // not required
		return nil
	}

	if m.StorageProof != nil {
		if err := m.StorageProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageProof")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageProof")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validateStorageProofVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageProofVerification) { // not required
		return nil
	}

	if m.StorageProofVerification != nil {
		if err := m.StorageProofVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageProofVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageProofVerification")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validateValidatorDeregistration(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidatorDeregistration) { // not required
		return nil
	}

	if m.ValidatorDeregistration != nil {
		if err := m.ValidatorDeregistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorDeregistration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorDeregistration")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) validateValidatorRegistration(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidatorRegistration) { // not required
		return nil
	}

	if m.ValidatorRegistration != nil {
		if err := m.ValidatorRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorRegistration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorRegistration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protocol signed transaction based on the context it is used
func (m *ProtocolSignedTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttestation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManageEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSLARollup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageProofVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidatorDeregistration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidatorRegistration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtocolSignedTransaction) contextValidateAttestation(ctx context.Context, formats strfmt.Registry) error {

	if m.Attestation != nil {

		if swag.IsZero(m.Attestation) { // not required
			return nil
		}

		if err := m.Attestation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attestation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attestation")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidateManageEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ManageEntity != nil {

		if swag.IsZero(m.ManageEntity) { // not required
			return nil
		}

		if err := m.ManageEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manageEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manageEntity")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidatePlays(ctx context.Context, formats strfmt.Registry) error {

	if m.Plays != nil {

		if swag.IsZero(m.Plays) { // not required
			return nil
		}

		if err := m.Plays.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plays")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidateSLARollup(ctx context.Context, formats strfmt.Registry) error {

	if m.SLARollup != nil {

		if swag.IsZero(m.SLARollup) { // not required
			return nil
		}

		if err := m.SLARollup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slaRollup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slaRollup")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidateStorageProof(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageProof != nil {

		if swag.IsZero(m.StorageProof) { // not required
			return nil
		}

		if err := m.StorageProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageProof")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageProof")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidateStorageProofVerification(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageProofVerification != nil {

		if swag.IsZero(m.StorageProofVerification) { // not required
			return nil
		}

		if err := m.StorageProofVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageProofVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageProofVerification")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidateValidatorDeregistration(ctx context.Context, formats strfmt.Registry) error {

	if m.ValidatorDeregistration != nil {

		if swag.IsZero(m.ValidatorDeregistration) { // not required
			return nil
		}

		if err := m.ValidatorDeregistration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorDeregistration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorDeregistration")
			}
			return err
		}
	}

	return nil
}

func (m *ProtocolSignedTransaction) contextValidateValidatorRegistration(ctx context.Context, formats strfmt.Registry) error {

	if m.ValidatorRegistration != nil {

		if swag.IsZero(m.ValidatorRegistration) { // not required
			return nil
		}

		if err := m.ValidatorRegistration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorRegistration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorRegistration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtocolSignedTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtocolSignedTransaction) UnmarshalBinary(b []byte) error {
	var res ProtocolSignedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
