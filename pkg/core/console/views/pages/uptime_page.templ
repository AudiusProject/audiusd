package pages

import (
	"fmt"
    "strings"
    "time"
)

type SlaStatus = int

const (
	SlaDead SlaStatus = iota
	SlaPartial
    SlaMet
    SlaExempt
)

type UptimePageView struct {
    ActiveEndpoint Endpoint
    ValidatorUptimes []*Endpoint
    AvgBlockTimeMs   int
}

type Endpoint struct {
    EthAddress   string
    CometAddress string
	Endpoint     string
	Owner        string
    IsEthRegistered  bool
    RegisteredAt time.Time
    ActiveReport *SlaReport
    SlaReports   []*SlaReport
}

type SlaReport struct {
    SlaRollupId         int32
    Status              SlaStatus
	TxHash              string
	BlockStart          int64
	BlockEnd            int64
    BlocksProposed      int32
    Quota               int32
    PoSChallengesFailed int32
    PoSChallengesTotal  int32
	Time                time.Time
}

const (
    slaMeetsThreshold = 0.8
    slaMissThreshold = 0.4
    slaGreen = "#9ef19e"
    slaRed = "#f5bbbb"
    slaDead = "#442222"
    slaExempt = "#a9a9a9"
)

func meetsPoWSla(report *SlaReport) bool {
    if report.BlocksProposed == 0 {
        return false
    }
    faultRatio := 1.0
    if report.Quota > 0 {
        faultRatio = float64(report.BlocksProposed) / float64(report.Quota)
    }
    return faultRatio >= slaMeetsThreshold
}

func meetsPoSSla(report *SlaReport) bool {
    faultRatio := 1.0
    if report.PoSChallengesTotal > 0 {
        faultRatio = 1.0 - (float64(report.PoSChallengesFailed) / float64(report.PoSChallengesTotal))
    }
    return faultRatio >= slaMeetsThreshold
}

func nodeIsDead(report *SlaReport) bool {
    return report.BlocksProposed == 0
}

func meetsSla(report *SlaReport) bool {
    return meetsPoWSla(report) && meetsPoSSla(report)
}

func getUptimeMultiColorForRollup(report *SlaReport, exempt bool) string {
    if exempt {
        return slaExempt
    } else if meetsSla(report) {
        return slaGreen
    } else {
        return slaRed
    }
}

func meetsSlaText(report *SlaReport) string {
    if meetsSla(report) {
        return "Met"
    } else {
        return "Miss"
    }
}

func strippedEndpoint(endpoint string) string {
    res := strings.TrimPrefix(endpoint, "https://")
    res = strings.TrimPrefix(res, "http://")
    return res
}

func getOverallSlaClass(report *SlaReport) templ.CSSClass {
    if nodeIsDead(report) {
        return slaDeadClass()
    }
    if !meetsSla(report) {
        return slaMissClass()
    } else {
        return templ.Class("")
    }
}

func getPoWSlaClass(report *SlaReport) templ.CSSClass {
    if nodeIsDead(report) {
        return slaDeadClass()
    }
    if !meetsPoWSla(report) {
        return slaMissClass()
    } else {
        return templ.Class("")
    }
}

func getPoSSlaClass(report *SlaReport) templ.CSSClass {
    if !meetsPoSSla(report) {
        return slaMissClass()
    } else {
        return templ.Class("")
    }
}


css uptimeBar(report *SlaReport, exempt bool) {
    width: 16px;
    height: 80px;
    display: inline-block;
    margin: 3px;
    border-radius: 0.5rem;
    background-color: { templ.SafeCSSProperty(getUptimeMultiColorForRollup(report, exempt)) };
}

css uptimeBarMini(report *SlaReport) {
    width: 5px;
    height: 18px;
    display: inline-block;
    margin: 1px;
    border-radius: 0.5rem;
    background-color: { templ.SafeCSSProperty(getUptimeMultiColorForRollup(report, false)) };
    vertical-align: middle;
}

css slaMissClass() {
    background-color: { templ.SafeCSSProperty(slaRed) };
}

css slaDeadClass() {
    background-color: { templ.SafeCSSProperty(slaDead) };
    color: white;
}


templ staticUptimeStyles() {
    <style type="text/css">
        a.reportLink {
            display: block;
            width: 100%;
            height: 100%;
        }

        .selectedUptimeBar {
            border: #666666 solid 2px;
        }

        table.validatorReports tr {
            border-bottom: #dedede solid 1px
        }

        table.validatorReports th {
            padding: 12px;
        }

        table.validatorReports td {
            padding: 12px;
        }

        .uptimebarTooltip {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 1;
        }

        li:hover .uptimebarTooltip {
            visibility: visible;
        }

    </style>
}

templ (c *Pages) UptimePageHTML(props *UptimePageView) {
	@c.layout.SiteFrame() {
        @staticUptimeStyles()
        <ul class="m-2">
            for _, r := range props.ActiveEndpoint.SlaReports {
                <li class={ templ.KV("selectedUptimeBar", props.ActiveEndpoint.ActiveReport.BlockEnd == r.BlockEnd), uptimeBar(r, !props.ActiveEndpoint.IsEthRegistered) }>
                    <a class="reportLink" href={ templ.URL(fmt.Sprintf("/console/uptime/%d", r.BlockEnd)) }></a>
                    <span class="uptimebarTooltip">{ r.Time.Format("06-01-02 15:04:05 MST") }</span>
                </li>
            }
        </ul>

        if props.ActiveEndpoint.ActiveReport.BlockEnd <= int64(0) {
            <h1 class="text-xl"> No SLA Rollup with requested ID. </h1>
        } else {
            <h1 class="text-xl">
                SLA Rollup For Blocks { fmt.Sprintf("%d - %d", props.ActiveEndpoint.ActiveReport.BlockStart, props.ActiveEndpoint.ActiveReport.BlockEnd) }
            </h1>
            <h3 class="text-sm">
                TX: <a href={ templ.URL(fmt.Sprintf("/console/tx/%s", props.ActiveEndpoint.ActiveReport.TxHash)) }>{ props.ActiveEndpoint.ActiveReport.TxHash }</a>
            </h3>

            <div class="flex flex-row text-center p-2">
                <div class="basis-1/3 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-lg">
                        { props.ActiveEndpoint.ActiveReport.Time.Format("06-01-02") }
                        <br />
                        { props.ActiveEndpoint.ActiveReport.Time.Format("15:04:05 MST") }
                    </dt>
                    <dd class="text-sm">Date Finalized</dd>
                </div>

                <div class="basis-1/3 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%.1fs", float64(props.AvgBlockTimeMs)/1000.0) }</dt>
                    <dd class="text-sm">Avg Block Time</dd>
                </div>

                <div class="basis-1/3 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", (props.ActiveEndpoint.ActiveReport.BlockEnd - props.ActiveEndpoint.ActiveReport.BlockStart) + 1) }</dt>
                    <dd class="text-sm">Total Blocks in Rollup</dd>
                </div>
            </div>

            <div class="flex flex-row text-center p-2">
                <div class="basis-1/4 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.Quota) }</dt>
                    <dd class="text-sm">Block Quota</dd>
                </div>

                <div class={ "basis-1/4 rounded-md bg-slate-100 py-8 mx-1", templ.KV(slaMissClass(), props.ActiveEndpoint.IsEthRegistered && !meetsPoWSla(props.ActiveEndpoint.ActiveReport)) }>
                    if !props.ActiveEndpoint.IsEthRegistered {
                        <dt class="text-4xl">N/A</dt>
                    } else {
                        <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.BlocksProposed) }</dt>
                    }
                    <dd class="text-sm">Blocks Proposed by Me</dd>
                </div>

                <div class="basis-1/4 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.PoSChallengesTotal) }</dt>
                    <dd class="text-sm">Challenges Received</dd>
                </div>

                <div class={ "basis-1/4 rounded-md bg-slate-100 py-8 mx-1", templ.KV(slaMissClass(), props.ActiveEndpoint.IsEthRegistered && !meetsPoSSla(props.ActiveEndpoint.ActiveReport)) }>
                    <a href={ 
                        templ.URL(
                            fmt.Sprintf(
                                "/console/pos?block_start=%d&block_end=%d",
                                props.ActiveEndpoint.ActiveReport.BlockStart,
                                props.ActiveEndpoint.ActiveReport.BlockEnd,
                            ),
                        ) 
                    }>
                        if !props.ActiveEndpoint.IsEthRegistered {
                            <dt class="text-4xl">N/A</dt>
                        } else {
                            <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveEndpoint.ActiveReport.PoSChallengesFailed) }</dt>
                        }
                        <dd class="text-sm">Challenges Failed</dd>
                    </a>
                </div>
            </div>

            <table class="bg-slate-50 p-2 rounded validatorReports text-left m-4">
                <colgroup>
                    <col />
                    <col class="bg-white" />
                    <col />
                    <col class="bg-white" />
                    <col />
                    <col />
                    <col />
                </colgroup>
                <tr>
                    <th>Validator</th>
                    <th colspan="2" class="text-center">
                        Proof of Work Blocks
                        <div class="flex flex-row text-left">
                            <div class="basis-1/2">Quota</div>
                            <div class="basis-1/2">Proposed</div>
                        </div>
                    </th>
                    <th colspan="2" class="text-center">
                        Proof of Storage Challenges
                        <div class="flex flex-row text-left">
                            <div class="basis-1/2">Received</div>
                            <div class="basis-1/2">Failed</div>
                        </div>
                    </th>
                    <th>SLA</th>
                    <th>History</th>
                </tr>
                for _, up := range props.ValidatorUptimes {
                    @validatorRowReport(up)
                }
            </table>
        }
	}
}

templ validatorRowReport(up *Endpoint) {
    <tr>
        <td class={ getOverallSlaClass(up.ActiveReport) }>
            <a href={ templ.URL(fmt.Sprintf("/console/adjudicate/%s", up.Owner)) }>
                { strippedEndpoint(up.Endpoint) }
            </a>
        </td>
        <td>{ fmt.Sprintf("%d", up.ActiveReport.Quota) }</td>
        <td class={ getPoWSlaClass(up.ActiveReport) }>
            { fmt.Sprintf("%d", up.ActiveReport.BlocksProposed) }
        </td>

        <td>{ fmt.Sprintf("%d", up.ActiveReport.PoSChallengesTotal) }</td>
        <td class={ getPoSSlaClass(up.ActiveReport) }>
            { fmt.Sprintf("%d", up.ActiveReport.PoSChallengesFailed) }
        </td>

        <td class={ getOverallSlaClass(up.ActiveReport) }>
            { meetsSlaText(up.ActiveReport) }
        </td>
        <td class="bg-white">
            for _, h := range up.SlaReports {
                @validatorMiniHistory(h, up.Endpoint)
            }
        </td>
    </tr>
}

templ validatorMiniHistory(report *SlaReport, endpoint string) {
    <li class={ uptimeBarMini(report) }>
        <a class="reportLink" href={ templ.URL(fmt.Sprintf("%s/console/uptime/%d", endpoint, report.BlockEnd)) }></a>
    </li>
}
