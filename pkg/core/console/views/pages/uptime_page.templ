package pages

import (
	"fmt"
    "strings"
    "time"
)

type UptimePageView struct {
    ActiveNodeUptime NodeUptime
    ValidatorUptimes []*NodeUptime
    AvgBlockTimeMs   int
}

type NodeUptime struct {
	Endpoint        string
    Address         string
    IsValidator     bool
    ActiveReport    ProofOfWorkReport
	ReportHistory   []ProofOfWorkReport
}

type ProofOfWorkReport struct {
    SlaRollupId    int32
	TxHash         string
	BlockStart     int64
	BlockEnd       int64
    BlocksProposed int32
    Quota          int32
	Time           time.Time
}

const (
    slaMeetsThreshold = 0.9
    slaMissThreshold = 0.4
    slaGreen = "#9ef19e"
    slaOrange = "#ffd7a4"
    slaRed = "#f5bbbb"
    slaExempt = "#a9a9a9"
)

func createUptimeColorForRollup(report ProofOfWorkReport, exempt bool) string {
    return meetsQuotaColor(report.Quota, report.BlocksProposed, exempt)
}

func meetsQuotaColor(quota, proposed int32, exempt bool) string {
    if exempt {
        return slaExempt
    }
    faultRatio := float32(proposed) / float32(quota)
    if faultRatio >= slaMeetsThreshold {
        return slaGreen
    } else if faultRatio < slaMeetsThreshold && faultRatio >= slaMissThreshold {
        return slaOrange
    } else {
        return slaRed
    }
}

func meetsQuotaText(quota, proposed int32) string {
    faultRatio := float32(proposed) / float32(quota)
    if faultRatio >= slaMeetsThreshold {
        return "Met"
    } else if faultRatio < slaMeetsThreshold && faultRatio >= slaMissThreshold {
        return "Partial"
    } else {
        return "Miss"
    }
}

func strippedEndpoint(endpoint string) string {
    res := strings.TrimPrefix(endpoint, "https://")
    res = strings.TrimPrefix(res, "http://")
    return res
}

css uptimeBar(report ProofOfWorkReport, exempt bool) {
    width: 16px;
    height: 80px;
    display: inline-block;
    margin: 3px;
    border-radius: 0.5rem;
    background-color: { templ.SafeCSSProperty(createUptimeColorForRollup(report, exempt)) };
}

css uptimeBarMini(report ProofOfWorkReport) {
    width: 5px;
    height: 18px;
    display: inline-block;
    margin: 1px;
    border-radius: 0.5rem;
    background-color: { templ.SafeCSSProperty(createUptimeColorForRollup(report, false)) };
    vertical-align: middle;
}


css reportTableRow(blockQuota, blocksProposed int32) {
    background-color: { templ.SafeCSSProperty(meetsQuotaColor(blockQuota, blocksProposed, false)) };
}

css nodeSlaStatusBox(quota, proposed int32, exempt bool) {
    background-color: { templ.SafeCSSProperty(meetsQuotaColor(quota, proposed, exempt)) };
}

templ staticStyles() {
    <style type="text/css">
        a.reportLink {
            display: block;
            width: 100%;
            height: 100%;
        }

        .selectedUptimeBar {
            border: #666666 solid 2px;
        }

        table.validatorReports tr {
            border-bottom: #fafbfb solid 1px
        }

        table.validatorReports th {
            padding: 12px;
        }

        table.validatorReports td {
            padding: 12px;
        }

        .uptimebarTooltip {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 1;
        }

        li:hover .uptimebarTooltip {
            visibility: visible;
        }

    </style>
}

templ (c *Pages) UptimePageHTML(props *UptimePageView) {
	@c.layout.SiteFrame() {
        @staticStyles()
        <ul class="m-2">
            for _, r := range props.ActiveNodeUptime.ReportHistory {
                <li class={ templ.KV("selectedUptimeBar", props.ActiveNodeUptime.ActiveReport.SlaRollupId == r.SlaRollupId), uptimeBar(r, !props.ActiveNodeUptime.IsValidator) }>
                    <a class="reportLink" href={ templ.URL(fmt.Sprintf("/console/uptime/%d", r.SlaRollupId)) }></a>
                    <span class="uptimebarTooltip">{ r.Time.Format("06-01-02 15:04:05 MST") }</span>
                </li>
            }
        </ul>

        if props.ActiveNodeUptime.ActiveReport.BlockEnd <= int64(0) {
            <h1 class="text-xl"> No SLA Rollup with requested ID. </h1>
        } else {
            <h1 class="text-xl">
                SLA Rollup #{ fmt.Sprintf("%d", props.ActiveNodeUptime.ActiveReport.SlaRollupId) } For Blocks { fmt.Sprintf("%d - %d", props.ActiveNodeUptime.ActiveReport.BlockStart, props.ActiveNodeUptime.ActiveReport.BlockEnd) }
            </h1>
            <h3 class="text-sm">
                TX: <a href={ templ.URL(fmt.Sprintf("/console/tx/%s", props.ActiveNodeUptime.ActiveReport.TxHash)) }>{ props.ActiveNodeUptime.ActiveReport.TxHash }</a>
            </h3>

            <div class="flex flex-row text-center p-8 statsBar">
                <div class="basis-1/5 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-lg">
                        { props.ActiveNodeUptime.ActiveReport.Time.Format("06-01-02") }
                        <br />
                        { props.ActiveNodeUptime.ActiveReport.Time.Format("15:04:05 MST") }
                    </dt>
                    <dd class="text-sm">Date Finalized</dd>
                </div>
                <div class="basis-1/5 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%.1fs", float64(props.AvgBlockTimeMs)/1000.0) }</dt>
                    <dd class="text-sm">Avg Block Time</dd>
                </div>
                <div class="basis-1/5 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", (props.ActiveNodeUptime.ActiveReport.BlockEnd - props.ActiveNodeUptime.ActiveReport.BlockStart) + 1) }</dt>
                    <dd class="text-sm">Total Blocks in Rollup</dd>
                </div>
                <div class={ "basis-1/5 rounded-md py-8 mx-1", nodeSlaStatusBox(props.ActiveNodeUptime.ActiveReport.Quota, props.ActiveNodeUptime.ActiveReport.BlocksProposed, !props.ActiveNodeUptime.IsValidator)}>
                    if !props.ActiveNodeUptime.IsValidator {
                        <dt class="text-4xl">N/A</dt>
                    } else {
                        <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveNodeUptime.ActiveReport.BlocksProposed) }</dt>
                    }
                    <dd class="text-sm">Blocks Proposed by Me</dd>
                </div>
                <div class="basis-1/5 rounded-md bg-slate-100 py-8 mx-1">
                    <dt class="text-4xl">{ fmt.Sprintf("%d", props.ActiveNodeUptime.ActiveReport.Quota) }</dt>
                    <dd class="text-sm">Block Quota</dd>
                </div>
            </div>

            <table class="bg-slate-50 p-2 rounded validatorReports text-left m-4">
                <tr>
                    <th>Validator</th>
                    <th>Quota</th>
                    <th>Proposed</th>
                    <th>SLA</th>
                    <th>History</th>
                </tr>
                for _, up := range props.ValidatorUptimes {
                    @validatorRowReport(up)
                }
            </table>
        }
	}
}

templ validatorRowReport(up *NodeUptime) {
    <tr class={ reportTableRow(up.ActiveReport.Quota, up.ActiveReport.BlocksProposed) }>
        <td><a href={ templ.URL(fmt.Sprintf("%s/console/uptime/%d", up.Endpoint, up.ActiveReport.SlaRollupId)) }>{ strippedEndpoint(up.Endpoint) }</a></td>
        <td>{ fmt.Sprintf("%d", up.ActiveReport.Quota) }</td>
        <td>{ fmt.Sprintf("%d", up.ActiveReport.BlocksProposed) }</td>
        <td>{ meetsQuotaText(up.ActiveReport.Quota, up.ActiveReport.BlocksProposed) }</td>
        <td class="bg-white">
            for _, h := range up.ReportHistory {
                @validatorMiniHistory(h, up.Endpoint)
            }
        </td>
    </tr>
}

templ validatorMiniHistory(report ProofOfWorkReport, endpoint string) {
    <li class={ uptimeBarMini(report) }>
        <a class="reportLink" href={ templ.URL(fmt.Sprintf("%s/console/uptime/%d", endpoint, report.SlaRollupId)) }></a>
    </li>
}
