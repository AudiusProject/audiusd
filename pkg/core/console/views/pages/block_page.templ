package pages

import (
	"encoding/json"
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/core/gen/core_proto"
	"github.com/dustin/go-humanize"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"time"
)

type BlockView struct {
	Height    int64
	Hash      string
	Proposer  string
	Timestamp time.Time
	Txs       [][]byte
}

type BlockPageJSONResponse struct {
	Height   string                   `json:"block_height"`
	Hash     string                   `json:"block_hash"`
	Proposer string                   `json:"proposer"`
	Txs      []map[string]interface{} `json:"transactions"`
}

func (p *Pages) BlockPageJSON(data *BlockView) (*BlockPageJSONResponse, error) {
	txs := data.Txs

	jsonDataArray := [][]byte{}

	for _, tx := range txs {
		var transaction core_proto.SignedTransaction
		err := proto.Unmarshal(tx, &transaction)
		if err != nil {
			return nil, fmt.Errorf("could not marshal tx into signed tx: %v", err)
		}

		jsonData, err := protojson.Marshal(&transaction)
		if err != nil {
			return nil, fmt.Errorf("could not marshal proto into json: %v", err)
		}
		jsonDataArray = append(jsonDataArray, jsonData)
	}

	var result []map[string]interface{}

	// Parse each byte array into a map and append to the result slice
	for _, jsonData := range jsonDataArray {
		var obj map[string]interface{}
		if err := json.Unmarshal(jsonData, &obj); err != nil {
			return nil, fmt.Errorf("invalid json")
		}
		result = append(result, obj)
	}

	resTxs := CamelCaseKeys(result)

	return &BlockPageJSONResponse{
		Height:   fmt.Sprint(data.Height),
		Hash:     data.Hash,
		Proposer: data.Proposer,
		Txs:      resTxs,
	}, nil
}

templ (p *Pages) BlockPageHTML(view *BlockView) {
	@p.layout.SiteFrame() {
		<div class="flex justify-between mt-4 text-sm">
			@p.components.Link("/block/%d", view.Height-1) {
				<div>Previous Block</div>
			}
			@p.components.Link("/block/%d", view.Height+1) {
				<div>Next Block</div>
			}
		</div>
		<div class="p-4">
			<h1 class="text-xl">
				Block { fmt.Sprint(view.Height) } Details
			</h1>
			<div class="p-4 h-full">
				// <div>
				// 	@p.components.Link("/block/%s", view.Hash) {
				// 		<div>Hash: { view.Hash }</div>
				// 	}
				// </div>
				// <div>
				// 	@p.components.Link("/nodes/%s", view.Proposer) {
				// 		<div>Proposer: { view.Proposer }</div>
				// 	}
				// </div>
				<div>
					@p.components.Link("/block/%d", view.Height) {
						<div>Height: { fmt.Sprint(view.Height) }</div>
					}
				</div>
				<div>
					Age: { humanize.Time(view.Timestamp) }
				</div>
				<div class="px-4 py-8 p text-md text-l">
					Transactions
					for _, tx := range view.Txs {
						<div class="uk-card-body">
							<div>
								<div>
									@p.components.Link("/tx/%s", p.components.ToTxHash(tx)) {
										<div>Hash: { p.components.ToTxHash(tx) }</div>
									}
								</div>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	}
}
