package pages

import (
	"encoding/json"
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/core/gen/core_proto"
	"github.com/dustin/go-humanize"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"time"
)

type BlockView struct {
	Height     int64
	Hash       string
	Proposer   string
	Timestamp  time.Time
	ChainID    string
	Txs        []Transaction
}

type BlockPageJSONResponse struct {
	Height   string                   `json:"block_height"`
	Hash     string                   `json:"block_hash"`
	Proposer string                   `json:"proposer"`
	Txs      []map[string]interface{} `json:"transactions"`
}

func (p *Pages) BlockPageJSON(data *BlockView) (*BlockPageJSONResponse, error) {
	txs := data.Txs

	jsonDataArray := [][]byte{}

	for _, tx := range txs {
		var transaction core_proto.SignedTransaction
		err := proto.Unmarshal(tx, &transaction)
		if err != nil {
			return nil, fmt.Errorf("could not marshal tx into signed tx: %v", err)
		}

		jsonData, err := protojson.Marshal(&transaction)
		if err != nil {
			return nil, fmt.Errorf("could not marshal proto into json: %v", err)
		}
		jsonDataArray = append(jsonDataArray, jsonData)
	}

	var result []map[string]interface{}

	// Parse each byte array into a map and append to the result slice
	for _, jsonData := range jsonDataArray {
		var obj map[string]interface{}
		if err := json.Unmarshal(jsonData, &obj); err != nil {
			return nil, fmt.Errorf("invalid json")
		}
		result = append(result, obj)
	}

	resTxs := CamelCaseKeys(result)

	return &BlockPageJSONResponse{
		Height:   fmt.Sprint(data.Height),
		Hash:     data.Hash,
		Proposer: data.Proposer,
		Txs:      resTxs,
	}, nil
}

templ (p *Pages) BlockPageHTML(data *BlockView) {
	@p.layout.SiteFrame() {
		<div class="container mx-auto px-4 py-8" x-data="{
			block: null,
			async loadBlock() {
				const height = window.location.pathname.split('/').pop();
				const query = `
					query GetBlock($height: Int) {
						getBlock(height: $height) {
							height
							chainId
							hash
							proposer
							transactions {
								hash
								index
							}
						}
					}
				`;
				
				try {
					const data = await $store.app.query(query, { height: parseInt(height) });
					if (data.getBlock) {
						this.block = data.getBlock;
					}
				} catch (err) {
					console.error('Failed to load block:', err);
				}
			}
		}" x-init="loadBlock()">
			<template x-if="block">
				<div>
					<h1 class="text-3xl font-bold mb-6">Block Details</h1>

					<!-- Block Info Card -->
					<div class="bg-white rounded-lg shadow-lg overflow-hidden mb-8">
						<div class="p-6">
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								<div class="space-y-4">
									<div>
										<h3 class="text-sm font-medium text-gray-500">Height</h3>
										<p class="mt-1 text-lg" x-text="block.height"></p>
									</div>
									<div>
										<h3 class="text-sm font-medium text-gray-500">Chain ID</h3>
										<p class="mt-1 text-lg" x-text="block.chainId"></p>
									</div>
								</div>
								<div class="space-y-4">
									<div>
										<h3 class="text-sm font-medium text-gray-500">Hash</h3>
										<p class="mt-1 text-sm font-mono break-all" x-text="block.hash"></p>
									</div>
									<div>
										<h3 class="text-sm font-medium text-gray-500">Proposer</h3>
										<p class="mt-1">
											<a :href="'/console/node/' + block.proposer" class="text-blue-600 hover:text-blue-800 font-mono" x-text="block.proposer"></a>
										</p>
									</div>
								</div>
							</div>
						</div>
					</div>

					<!-- Transactions Table -->
					<div class="bg-white rounded-lg shadow-lg overflow-hidden">
						<div class="p-6">
							<h2 class="text-xl font-semibold mb-4">Transactions</h2>
							<div class="overflow-x-auto">
								<table class="min-w-full">
									<thead class="bg-gray-50">
										<tr>
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hash</th>
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Index</th>
										</tr>
									</thead>
									<tbody class="divide-y divide-gray-200">
										<template x-for="tx in block.transactions" :key="tx.hash">
											<tr class="hover:bg-gray-50">
												<td class="px-6 py-4 whitespace-nowrap">
													<a :href="'/console/tx/' + tx.hash" class="text-blue-600 hover:text-blue-800 font-mono text-sm" x-text="tx.hash"></a>
												</td>
												<td class="px-6 py-4 whitespace-nowrap text-sm" x-text="tx.index"></td>
											</tr>
										</template>
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</template>

			<!-- Loading State -->
			<div x-show="$store.app.loading" class="flex justify-center items-center py-8">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
			</div>

			<!-- Error State -->
			<div x-show="$store.app.error" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4" role="alert">
				<strong class="font-bold">Error!</strong>
				<span class="block sm:inline" x-text="$store.app.error"></span>
			</div>
		</div>
	}
}
