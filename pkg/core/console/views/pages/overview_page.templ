package pages

import (
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/core/db"
	"github.com/AudiusProject/audiusd/pkg/core/gen/core_proto"
	"github.com/AudiusProject/audiusd/pkg/core/server"
	"github.com/dustin/go-humanize"
	"google.golang.org/protobuf/proto"
)

type TxData struct {
	TxType string
	db.CoreTransaction
}

func NewTxData(tx db.CoreTransaction) *TxData {
	txType := "Unknown"
	var stx core_proto.SignedTransaction
	if err := proto.Unmarshal(tx.Transaction, &stx); err == nil {
		txType = server.GetProtoTypeName(&stx)
	}
	return &TxData{
		TxType:          txType,
		CoreTransaction: tx,
	}
}

type OverviewPageView struct {
	Blocks []BlockView
	Txs    []TxData
}

func (p *Pages) OverviewPageJSON() {}

templ (p *Pages) OverviewPageHTML(data *OverviewPageView) {
	@p.layout.SiteFrame() {
		<div class="uk-grid-small uk-child-width-1-2@s uk-grid-match" uk-grid>
			<div>
				<div class="uk-card uk-card-default uk-card-body">
					<h3 class="uk-card-title">Recent Blocks</h3>
					for _, block := range data.Blocks {
						<div class="text-sm">
							<div class="p-6">
								<div>
									@p.components.Link("/block/%s", block.Hash) {
										<div>Hash: { block.Hash }</div>
									}
								</div>
								<div>
									@p.components.Link("/node/%s", block.Proposer) {
										<div>Proposer: { block.ProposerEndpoint }</div>
									}
								</div>
								<div>
									@p.components.Link("/block/%d", block.Height) {
										<div>Height: { fmt.Sprint(block.Height) }</div>
									}
								</div>
								<div>
									Transactions: { fmt.Sprint(len(block.Txs)) }
								</div>
								<div>
									Age: { humanize.Time(block.Timestamp) }
								</div>
							</div>
						</div>
					}
				</div>
			</div>
			<div>
				<div class="uk-card uk-card-default uk-card-body flex-grow overflow-y-auto">
					<h3 class="uk-card-title">Recent Transactions</h3>
					for _, tx := range data.Txs {
						<div class="text-sm">
							<div class="p-6">
								<div>
									<a href={ templ.URL(fmt.Sprintf("/console/tx/%s", tx.TxHash)) }>Hash: { tx.TxHash }</a>
								</div>
								<a href={ templ.URL(fmt.Sprintf("/console/block/%s", fmt.Sprint(tx.BlockID))) }>Block { fmt.Sprint(tx.BlockID) }</a>
								<div>
									Type: { tx.TxType }
								</div>
								<div>Time: { humanize.Time(tx.CreatedAt.Time) } </div>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	}
}
