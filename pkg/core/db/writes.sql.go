// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: writes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearUncommittedSlaNodeReports = `-- name: ClearUncommittedSlaNodeReports :exec
delete from sla_node_reports
where sla_rollup_id is null
`

func (q *Queries) ClearUncommittedSlaNodeReports(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clearUncommittedSlaNodeReports)
	return err
}

const commitSlaNodeReport = `-- name: CommitSlaNodeReport :exec
insert into sla_node_reports (sla_rollup_id, address, blocks_proposed)
values ($1, $2, $3)
`

type CommitSlaNodeReportParams struct {
	SlaRollupID    pgtype.Int4
	Address        string
	BlocksProposed int32
}

func (q *Queries) CommitSlaNodeReport(ctx context.Context, arg CommitSlaNodeReportParams) error {
	_, err := q.db.Exec(ctx, commitSlaNodeReport, arg.SlaRollupID, arg.Address, arg.BlocksProposed)
	return err
}

const commitSlaRollup = `-- name: CommitSlaRollup :one
insert into sla_rollups (time, tx_hash, block_start, block_end)
values ($1, $2, $3, $4)
returning id
`

type CommitSlaRollupParams struct {
	Time       pgtype.Timestamp
	TxHash     string
	BlockStart int64
	BlockEnd   int64
}

func (q *Queries) CommitSlaRollup(ctx context.Context, arg CommitSlaRollupParams) (int32, error) {
	row := q.db.QueryRow(ctx, commitSlaRollup,
		arg.Time,
		arg.TxHash,
		arg.BlockStart,
		arg.BlockEnd,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteRegisteredNode = `-- name: DeleteRegisteredNode :exec
delete from core_validators
where comet_address = $1
`

func (q *Queries) DeleteRegisteredNode(ctx context.Context, cometAddress string) error {
	_, err := q.db.Exec(ctx, deleteRegisteredNode, cometAddress)
	return err
}

const exemptStorageProofs = `-- name: ExemptStorageProofs :exec
update storage_proofs
set status = 'exempt'
where block_height = $1
`

func (q *Queries) ExemptStorageProofs(ctx context.Context, blockHeight int64) error {
	_, err := q.db.Exec(ctx, exemptStorageProofs, blockHeight)
	return err
}

const faultPoSChallenge = `-- name: FaultPoSChallenge :exec
update pos_challenges
set status = 'fault'
where block_height = $1
`

func (q *Queries) FaultPoSChallenge(ctx context.Context, blockHeight int64) error {
	_, err := q.db.Exec(ctx, faultPoSChallenge, blockHeight)
	return err
}

const insertPoSChallenge = `-- name: InsertPoSChallenge :exec
insert into pos_challenges (block_height, verifier_address)
values ($1, $2)
`

type InsertPoSChallengeParams struct {
	BlockHeight     int64
	VerifierAddress string
}

func (q *Queries) InsertPoSChallenge(ctx context.Context, arg InsertPoSChallengeParams) error {
	_, err := q.db.Exec(ctx, insertPoSChallenge, arg.BlockHeight, arg.VerifierAddress)
	return err
}

const insertRegisteredNode = `-- name: InsertRegisteredNode :exec
insert into core_validators(pub_key, endpoint, eth_address, comet_address, comet_pub_key, eth_block, node_type, sp_id)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertRegisteredNodeParams struct {
	PubKey       string
	Endpoint     string
	EthAddress   string
	CometAddress string
	CometPubKey  string
	EthBlock     string
	NodeType     string
	SpID         string
}

func (q *Queries) InsertRegisteredNode(ctx context.Context, arg InsertRegisteredNodeParams) error {
	_, err := q.db.Exec(ctx, insertRegisteredNode,
		arg.PubKey,
		arg.Endpoint,
		arg.EthAddress,
		arg.CometAddress,
		arg.CometPubKey,
		arg.EthBlock,
		arg.NodeType,
		arg.SpID,
	)
	return err
}

const insertStorageProof = `-- name: InsertStorageProof :exec
insert into storage_proofs (block_height, address, encrypted_proof, decrypted_proof, status)
values ($1, $2, $3, $4, $5)
`

type InsertStorageProofParams struct {
	BlockHeight    int64
	Address        string
	EncryptedProof pgtype.Text
	DecryptedProof pgtype.Text
	Status         ProofStatus
}

func (q *Queries) InsertStorageProof(ctx context.Context, arg InsertStorageProofParams) error {
	_, err := q.db.Exec(ctx, insertStorageProof,
		arg.BlockHeight,
		arg.Address,
		arg.EncryptedProof,
		arg.DecryptedProof,
		arg.Status,
	)
	return err
}

const insertTxStat = `-- name: InsertTxStat :exec
insert into core_tx_stats (tx_type, tx_hash, block_height, created_at)
values ($1, $2, $3, $4)
on conflict (tx_hash) do nothing
`

type InsertTxStatParams struct {
	TxType      string
	TxHash      string
	BlockHeight int64
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) InsertTxStat(ctx context.Context, arg InsertTxStatParams) error {
	_, err := q.db.Exec(ctx, insertTxStat,
		arg.TxType,
		arg.TxHash,
		arg.BlockHeight,
		arg.CreatedAt,
	)
	return err
}

const storeBlock = `-- name: StoreBlock :exec
insert into core_blocks (height, chain_id, hash, proposer, created_at)
values ($1, $2, $3, $4, $5)
`

type StoreBlockParams struct {
	Height    int64
	ChainID   string
	Hash      string
	Proposer  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) StoreBlock(ctx context.Context, arg StoreBlockParams) error {
	_, err := q.db.Exec(ctx, storeBlock,
		arg.Height,
		arg.ChainID,
		arg.Hash,
		arg.Proposer,
		arg.CreatedAt,
	)
	return err
}

const storeTransaction = `-- name: StoreTransaction :exec
insert into core_transactions (block_id, index, tx_hash, transaction, created_at)
values ($1, $2, $3, $4, $5)
`

type StoreTransactionParams struct {
	BlockID     int64
	Index       int32
	TxHash      string
	Transaction []byte
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) StoreTransaction(ctx context.Context, arg StoreTransactionParams) error {
	_, err := q.db.Exec(ctx, storeTransaction,
		arg.BlockID,
		arg.Index,
		arg.TxHash,
		arg.Transaction,
		arg.CreatedAt,
	)
	return err
}

const updatePoSChallenge = `-- name: UpdatePoSChallenge :exec
update pos_challenges
set cid = $1, status = $2
where block_height = $3
`

type UpdatePoSChallengeParams struct {
	Cid         pgtype.Text
	Status      ChallengeStatus
	BlockHeight int64
}

func (q *Queries) UpdatePoSChallenge(ctx context.Context, arg UpdatePoSChallengeParams) error {
	_, err := q.db.Exec(ctx, updatePoSChallenge, arg.Cid, arg.Status, arg.BlockHeight)
	return err
}

const updateStorageProof = `-- name: UpdateStorageProof :exec
insert into storage_proofs (block_height, address, encrypted_proof, decrypted_proof, status)
values ($1, $2, $3, $4, $5)
`

type UpdateStorageProofParams struct {
	BlockHeight    int64
	Address        string
	EncryptedProof pgtype.Text
	DecryptedProof pgtype.Text
	Status         ProofStatus
}

func (q *Queries) UpdateStorageProof(ctx context.Context, arg UpdateStorageProofParams) error {
	_, err := q.db.Exec(ctx, updateStorageProof,
		arg.BlockHeight,
		arg.Address,
		arg.EncryptedProof,
		arg.DecryptedProof,
		arg.Status,
	)
	return err
}

const upsertAppState = `-- name: UpsertAppState :exec
insert into core_app_state (block_height, app_hash)
values ($1, $2)
`

type UpsertAppStateParams struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) UpsertAppState(ctx context.Context, arg UpsertAppStateParams) error {
	_, err := q.db.Exec(ctx, upsertAppState, arg.BlockHeight, arg.AppHash)
	return err
}

const upsertSlaRollupReport = `-- name: UpsertSlaRollupReport :exec
with updated as (
    update sla_node_reports 
    set blocks_proposed = blocks_proposed + 1
    where address = $1 and sla_rollup_id is null
    returning id, address, blocks_proposed, sla_rollup_id
)
insert into sla_node_reports (address, blocks_proposed, sla_rollup_id)
select $1, 1, null
where not exists (select 1 from updated)
`

func (q *Queries) UpsertSlaRollupReport(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, upsertSlaRollupReport, address)
	return err
}
