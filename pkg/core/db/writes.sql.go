// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: writes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearUncommittedSlaNodeReports = `-- name: ClearUncommittedSlaNodeReports :exec
delete from sla_node_reports
where sla_rollup_id is null
`

func (q *Queries) ClearUncommittedSlaNodeReports(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clearUncommittedSlaNodeReports)
	return err
}

const commitSlaNodeReport = `-- name: CommitSlaNodeReport :exec
insert into sla_node_reports (sla_rollup_id, address, blocks_proposed)
values ($1, $2, $3)
`

type CommitSlaNodeReportParams struct {
	SlaRollupID    pgtype.Int4
	Address        string
	BlocksProposed int32
}

func (q *Queries) CommitSlaNodeReport(ctx context.Context, arg CommitSlaNodeReportParams) error {
	_, err := q.db.Exec(ctx, commitSlaNodeReport, arg.SlaRollupID, arg.Address, arg.BlocksProposed)
	return err
}

const commitSlaRollup = `-- name: CommitSlaRollup :one
insert into sla_rollups (time, tx_hash, block_start, block_end)
values ($1, $2, $3, $4)
returning id
`

type CommitSlaRollupParams struct {
	Time       pgtype.Timestamp
	TxHash     string
	BlockStart int64
	BlockEnd   int64
}

func (q *Queries) CommitSlaRollup(ctx context.Context, arg CommitSlaRollupParams) (int32, error) {
	row := q.db.QueryRow(ctx, commitSlaRollup,
		arg.Time,
		arg.TxHash,
		arg.BlockStart,
		arg.BlockEnd,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteRegisteredNode = `-- name: DeleteRegisteredNode :exec
delete from core_validators
where comet_address = $1
`

func (q *Queries) DeleteRegisteredNode(ctx context.Context, cometAddress string) error {
	_, err := q.db.Exec(ctx, deleteRegisteredNode, cometAddress)
	return err
}

const insertAccessKey = `-- name: InsertAccessKey :exec
insert into access_keys (track_id, pub_key) values ($1, $2)
`

type InsertAccessKeyParams struct {
	TrackID string
	PubKey  string
}

func (q *Queries) InsertAccessKey(ctx context.Context, arg InsertAccessKeyParams) error {
	_, err := q.db.Exec(ctx, insertAccessKey, arg.TrackID, arg.PubKey)
	return err
}

const insertCoreERN = `-- name: InsertCoreERN :exec
insert into core_ern (
    address,
    tx_hash,
    index,
    sender,
    message_control_type,
    party_addresses,
    resource_addresses,
    release_addresses,
    deal_addresses,
    raw_message,
    raw_acknowledgment,
    block_height
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
`

type InsertCoreERNParams struct {
	Address            string
	TxHash             string
	Index              int64
	Sender             string
	MessageControlType int16
	PartyAddresses     []string
	ResourceAddresses  []string
	ReleaseAddresses   []string
	DealAddresses      []string
	RawMessage         []byte
	RawAcknowledgment  []byte
	BlockHeight        int64
}

// ERN, MEAD, PIE insert queries - using protobuf storage with new schema
func (q *Queries) InsertCoreERN(ctx context.Context, arg InsertCoreERNParams) error {
	_, err := q.db.Exec(ctx, insertCoreERN,
		arg.Address,
		arg.TxHash,
		arg.Index,
		arg.Sender,
		arg.MessageControlType,
		arg.PartyAddresses,
		arg.ResourceAddresses,
		arg.ReleaseAddresses,
		arg.DealAddresses,
		arg.RawMessage,
		arg.RawAcknowledgment,
		arg.BlockHeight,
	)
	return err
}

const insertCoreMEAD = `-- name: InsertCoreMEAD :exec
insert into core_mead (
    address,
    tx_hash,
    index,
    sender,
    resource_addresses,
    release_addresses,
    raw_message,
    raw_acknowledgment,
    block_height
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type InsertCoreMEADParams struct {
	Address           string
	TxHash            string
	Index             int64
	Sender            string
	ResourceAddresses []string
	ReleaseAddresses  []string
	RawMessage        []byte
	RawAcknowledgment []byte
	BlockHeight       int64
}

func (q *Queries) InsertCoreMEAD(ctx context.Context, arg InsertCoreMEADParams) error {
	_, err := q.db.Exec(ctx, insertCoreMEAD,
		arg.Address,
		arg.TxHash,
		arg.Index,
		arg.Sender,
		arg.ResourceAddresses,
		arg.ReleaseAddresses,
		arg.RawMessage,
		arg.RawAcknowledgment,
		arg.BlockHeight,
	)
	return err
}

const insertCorePIE = `-- name: InsertCorePIE :exec
insert into core_pie (
    address,
    tx_hash,
    index,
    sender,
    party_addresses,
    raw_message,
    raw_acknowledgment,
    block_height
) values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertCorePIEParams struct {
	Address           string
	TxHash            string
	Index             int64
	Sender            string
	PartyAddresses    []string
	RawMessage        []byte
	RawAcknowledgment []byte
	BlockHeight       int64
}

func (q *Queries) InsertCorePIE(ctx context.Context, arg InsertCorePIEParams) error {
	_, err := q.db.Exec(ctx, insertCorePIE,
		arg.Address,
		arg.TxHash,
		arg.Index,
		arg.Sender,
		arg.PartyAddresses,
		arg.RawMessage,
		arg.RawAcknowledgment,
		arg.BlockHeight,
	)
	return err
}

const insertDecodedManageEntity = `-- name: InsertDecodedManageEntity :exec
with duplicate_check as (
    insert into core_etl_tx_manage_entity (
        tx_hash,
        user_id,
        entity_type,
        entity_id,
        action,
        metadata,
        signature,
        signer,
        nonce,
        created_at
    ) values (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
    ) on conflict (tx_hash) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_manage_entity', 'tx'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedManageEntityParams struct {
	TxHash     string
	UserID     int64
	EntityType string
	EntityID   int64
	Action     string
	Metadata   string
	Signature  string
	Signer     string
	Nonce      string
	CreatedAt  pgtype.Timestamptz
}

func (q *Queries) InsertDecodedManageEntity(ctx context.Context, arg InsertDecodedManageEntityParams) error {
	_, err := q.db.Exec(ctx, insertDecodedManageEntity,
		arg.TxHash,
		arg.UserID,
		arg.EntityType,
		arg.EntityID,
		arg.Action,
		arg.Metadata,
		arg.Signature,
		arg.Signer,
		arg.Nonce,
		arg.CreatedAt,
	)
	return err
}

const insertDecodedPlay = `-- name: InsertDecodedPlay :exec
with duplicate_check as (
    insert into core_etl_tx_plays (
        tx_hash,
        user_id,
        track_id,
        played_at,
        signature,
        city,
        region,
        country,
        created_at
    ) values (
        $1, $2, $3, $4, $5, $6, $7, $8, $9
    ) on conflict (tx_hash, user_id, track_id) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_plays', 'tx_user_track'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedPlayParams struct {
	TxHash    string
	UserID    string
	TrackID   string
	PlayedAt  pgtype.Timestamptz
	Signature string
	City      pgtype.Text
	Region    pgtype.Text
	Country   pgtype.Text
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertDecodedPlay(ctx context.Context, arg InsertDecodedPlayParams) error {
	_, err := q.db.Exec(ctx, insertDecodedPlay,
		arg.TxHash,
		arg.UserID,
		arg.TrackID,
		arg.PlayedAt,
		arg.Signature,
		arg.City,
		arg.Region,
		arg.Country,
		arg.CreatedAt,
	)
	return err
}

const insertDecodedSlaRollup = `-- name: InsertDecodedSlaRollup :exec
with duplicate_check as (
    insert into core_etl_tx_sla_rollup (
        tx_hash,
        block_start,
        block_end,
        timestamp,
        created_at
    ) values (
        $1, $2, $3, $4, $5
    ) on conflict (tx_hash) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_sla_rollup', 'tx'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedSlaRollupParams struct {
	TxHash     string
	BlockStart int64
	BlockEnd   int64
	Timestamp  pgtype.Timestamptz
	CreatedAt  pgtype.Timestamptz
}

func (q *Queries) InsertDecodedSlaRollup(ctx context.Context, arg InsertDecodedSlaRollupParams) error {
	_, err := q.db.Exec(ctx, insertDecodedSlaRollup,
		arg.TxHash,
		arg.BlockStart,
		arg.BlockEnd,
		arg.Timestamp,
		arg.CreatedAt,
	)
	return err
}

const insertDecodedStorageProof = `-- name: InsertDecodedStorageProof :exec
with duplicate_check as (
    insert into core_etl_tx_storage_proof (
        tx_hash,
        height,
        address,
        cid,
        proof_signature,
        prover_addresses,
        created_at
    ) values (
        $1, $2, $3, $4, $5, $6, $7
    ) on conflict (tx_hash) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_storage_proof', 'tx'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedStorageProofParams struct {
	TxHash          string
	Height          int64
	Address         string
	Cid             pgtype.Text
	ProofSignature  []byte
	ProverAddresses []string
	CreatedAt       pgtype.Timestamptz
}

func (q *Queries) InsertDecodedStorageProof(ctx context.Context, arg InsertDecodedStorageProofParams) error {
	_, err := q.db.Exec(ctx, insertDecodedStorageProof,
		arg.TxHash,
		arg.Height,
		arg.Address,
		arg.Cid,
		arg.ProofSignature,
		arg.ProverAddresses,
		arg.CreatedAt,
	)
	return err
}

const insertDecodedStorageProofVerification = `-- name: InsertDecodedStorageProofVerification :exec
with duplicate_check as (
    insert into core_etl_tx_storage_proof_verification (
        tx_hash,
        height,
        proof,
        created_at
    ) values (
        $1, $2, $3, $4
    ) on conflict (tx_hash) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_storage_proof_verification', 'tx'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedStorageProofVerificationParams struct {
	TxHash    string
	Height    int64
	Proof     []byte
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertDecodedStorageProofVerification(ctx context.Context, arg InsertDecodedStorageProofVerificationParams) error {
	_, err := q.db.Exec(ctx, insertDecodedStorageProofVerification,
		arg.TxHash,
		arg.Height,
		arg.Proof,
		arg.CreatedAt,
	)
	return err
}

const insertDecodedValidatorDeregistration = `-- name: InsertDecodedValidatorDeregistration :exec
with duplicate_check as (
    insert into core_etl_tx_validator_deregistration (
        tx_hash,
        comet_address,
        pub_key,
        created_at
    ) values (
        $1, $2, $3, $4
    ) on conflict (tx_hash) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_validator_deregistration', 'tx'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedValidatorDeregistrationParams struct {
	TxHash       string
	CometAddress string
	PubKey       []byte
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) InsertDecodedValidatorDeregistration(ctx context.Context, arg InsertDecodedValidatorDeregistrationParams) error {
	_, err := q.db.Exec(ctx, insertDecodedValidatorDeregistration,
		arg.TxHash,
		arg.CometAddress,
		arg.PubKey,
		arg.CreatedAt,
	)
	return err
}

const insertDecodedValidatorRegistration = `-- name: InsertDecodedValidatorRegistration :exec
with duplicate_check as (
    insert into core_etl_tx_validator_registration (
        tx_hash,
        endpoint,
        comet_address,
        eth_block,
        node_type,
        sp_id,
        pub_key,
        power,
        created_at
    ) values (
        $1, $2, $3, $4, $5, $6, $7, $8, $9
    ) on conflict (tx_hash) do nothing
    returning tx_hash
)
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
select $1, 'core_etl_tx_validator_registration', 'tx'
where not exists (select 1 from duplicate_check)
on conflict (tx_hash, table_name) do nothing
`

type InsertDecodedValidatorRegistrationParams struct {
	TxHash       string
	Endpoint     string
	CometAddress string
	EthBlock     string
	NodeType     string
	SpID         string
	PubKey       []byte
	Power        int64
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) InsertDecodedValidatorRegistration(ctx context.Context, arg InsertDecodedValidatorRegistrationParams) error {
	_, err := q.db.Exec(ctx, insertDecodedValidatorRegistration,
		arg.TxHash,
		arg.Endpoint,
		arg.CometAddress,
		arg.EthBlock,
		arg.NodeType,
		arg.SpID,
		arg.PubKey,
		arg.Power,
		arg.CreatedAt,
	)
	return err
}

const insertEtlDuplicate = `-- name: InsertEtlDuplicate :exec
insert into core_etl_tx_duplicates (tx_hash, table_name, duplicate_type)
values ($1, $2, $3)
on conflict (tx_hash, table_name) do nothing
`

type InsertEtlDuplicateParams struct {
	TxHash        string
	TableName     string
	DuplicateType string
}

func (q *Queries) InsertEtlDuplicate(ctx context.Context, arg InsertEtlDuplicateParams) error {
	_, err := q.db.Exec(ctx, insertEtlDuplicate, arg.TxHash, arg.TableName, arg.DuplicateType)
	return err
}

const insertEtlTx = `-- name: InsertEtlTx :exec
insert into core_etl_tx (block_height, tx_index, tx_hash, tx_type, tx_data, created_at)
values ($1, $2, $3, $4, $5, $6)
on conflict (tx_hash) do nothing
`

type InsertEtlTxParams struct {
	BlockHeight int64
	TxIndex     int32
	TxHash      string
	TxType      string
	TxData      []byte
	CreatedAt   pgtype.Timestamptz
}

func (q *Queries) InsertEtlTx(ctx context.Context, arg InsertEtlTxParams) error {
	_, err := q.db.Exec(ctx, insertEtlTx,
		arg.BlockHeight,
		arg.TxIndex,
		arg.TxHash,
		arg.TxType,
		arg.TxData,
		arg.CreatedAt,
	)
	return err
}

const insertFailedStorageProof = `-- name: InsertFailedStorageProof :exec
insert into storage_proofs (block_height, address, status)
values ($1, $2, 'fail')
`

type InsertFailedStorageProofParams struct {
	BlockHeight int64
	Address     string
}

func (q *Queries) InsertFailedStorageProof(ctx context.Context, arg InsertFailedStorageProofParams) error {
	_, err := q.db.Exec(ctx, insertFailedStorageProof, arg.BlockHeight, arg.Address)
	return err
}

const insertManagementKey = `-- name: InsertManagementKey :exec
insert into management_keys (track_id, address) values ($1, $2)
`

type InsertManagementKeyParams struct {
	TrackID string
	Address string
}

func (q *Queries) InsertManagementKey(ctx context.Context, arg InsertManagementKeyParams) error {
	_, err := q.db.Exec(ctx, insertManagementKey, arg.TrackID, arg.Address)
	return err
}

const insertRegisteredNode = `-- name: InsertRegisteredNode :exec
insert into core_validators(pub_key, endpoint, eth_address, comet_address, comet_pub_key, eth_block, node_type, sp_id)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertRegisteredNodeParams struct {
	PubKey       string
	Endpoint     string
	EthAddress   string
	CometAddress string
	CometPubKey  string
	EthBlock     string
	NodeType     string
	SpID         string
}

func (q *Queries) InsertRegisteredNode(ctx context.Context, arg InsertRegisteredNodeParams) error {
	_, err := q.db.Exec(ctx, insertRegisteredNode,
		arg.PubKey,
		arg.Endpoint,
		arg.EthAddress,
		arg.CometAddress,
		arg.CometPubKey,
		arg.EthBlock,
		arg.NodeType,
		arg.SpID,
	)
	return err
}

const insertSoundRecording = `-- name: InsertSoundRecording :exec
insert into sound_recordings (sound_recording_id, track_id, cid, encoding_details) 
values ($1, $2, $3, $4)
`

type InsertSoundRecordingParams struct {
	SoundRecordingID string
	TrackID          string
	Cid              string
	EncodingDetails  pgtype.Text
}

func (q *Queries) InsertSoundRecording(ctx context.Context, arg InsertSoundRecordingParams) error {
	_, err := q.db.Exec(ctx, insertSoundRecording,
		arg.SoundRecordingID,
		arg.TrackID,
		arg.Cid,
		arg.EncodingDetails,
	)
	return err
}

const insertStorageProof = `-- name: InsertStorageProof :exec
insert into storage_proofs (block_height, address, cid, proof_signature, prover_addresses)
values ($1, $2, $3, $4, $5)
`

type InsertStorageProofParams struct {
	BlockHeight     int64
	Address         string
	Cid             pgtype.Text
	ProofSignature  pgtype.Text
	ProverAddresses []string
}

func (q *Queries) InsertStorageProof(ctx context.Context, arg InsertStorageProofParams) error {
	_, err := q.db.Exec(ctx, insertStorageProof,
		arg.BlockHeight,
		arg.Address,
		arg.Cid,
		arg.ProofSignature,
		arg.ProverAddresses,
	)
	return err
}

const insertStorageProofPeers = `-- name: InsertStorageProofPeers :exec
insert into storage_proof_peers (block_height, prover_addresses)
values ($1, $2)
`

type InsertStorageProofPeersParams struct {
	BlockHeight     int64
	ProverAddresses []string
}

func (q *Queries) InsertStorageProofPeers(ctx context.Context, arg InsertStorageProofPeersParams) error {
	_, err := q.db.Exec(ctx, insertStorageProofPeers, arg.BlockHeight, arg.ProverAddresses)
	return err
}

const insertTrackId = `-- name: InsertTrackId :exec
insert into track_releases (track_id) values ($1)
`

func (q *Queries) InsertTrackId(ctx context.Context, trackID string) error {
	_, err := q.db.Exec(ctx, insertTrackId, trackID)
	return err
}

const insertTxStat = `-- name: InsertTxStat :exec
insert into core_tx_stats (tx_type, tx_hash, block_height, created_at)
values ($1, $2, $3, $4)
on conflict (tx_hash) do nothing
`

type InsertTxStatParams struct {
	TxType      string
	TxHash      string
	BlockHeight int64
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) InsertTxStat(ctx context.Context, arg InsertTxStatParams) error {
	_, err := q.db.Exec(ctx, insertTxStat,
		arg.TxType,
		arg.TxHash,
		arg.BlockHeight,
		arg.CreatedAt,
	)
	return err
}

const storeBlock = `-- name: StoreBlock :exec
insert into core_blocks (height, chain_id, hash, proposer, created_at)
values ($1, $2, $3, $4, $5)
`

type StoreBlockParams struct {
	Height    int64
	ChainID   string
	Hash      string
	Proposer  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) StoreBlock(ctx context.Context, arg StoreBlockParams) error {
	_, err := q.db.Exec(ctx, storeBlock,
		arg.Height,
		arg.ChainID,
		arg.Hash,
		arg.Proposer,
		arg.CreatedAt,
	)
	return err
}

const storeTransaction = `-- name: StoreTransaction :exec
insert into core_transactions (block_id, index, tx_hash, transaction, created_at)
values ($1, $2, $3, $4, $5)
`

type StoreTransactionParams struct {
	BlockID     int64
	Index       int32
	TxHash      string
	Transaction []byte
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) StoreTransaction(ctx context.Context, arg StoreTransactionParams) error {
	_, err := q.db.Exec(ctx, storeTransaction,
		arg.BlockID,
		arg.Index,
		arg.TxHash,
		arg.Transaction,
		arg.CreatedAt,
	)
	return err
}

const updateStorageProof = `-- name: UpdateStorageProof :exec
update storage_proofs 
set proof = $1, status = $2
where block_height = $3 and address = $4
`

type UpdateStorageProofParams struct {
	Proof       pgtype.Text
	Status      ProofStatus
	BlockHeight int64
	Address     string
}

func (q *Queries) UpdateStorageProof(ctx context.Context, arg UpdateStorageProofParams) error {
	_, err := q.db.Exec(ctx, updateStorageProof,
		arg.Proof,
		arg.Status,
		arg.BlockHeight,
		arg.Address,
	)
	return err
}

const upsertAppState = `-- name: UpsertAppState :exec
insert into core_app_state (block_height, app_hash)
values ($1, $2)
`

type UpsertAppStateParams struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) UpsertAppState(ctx context.Context, arg UpsertAppStateParams) error {
	_, err := q.db.Exec(ctx, upsertAppState, arg.BlockHeight, arg.AppHash)
	return err
}

const upsertSlaRollupReport = `-- name: UpsertSlaRollupReport :exec
with updated as (
    update sla_node_reports 
    set blocks_proposed = blocks_proposed + 1
    where address = $1 and sla_rollup_id is null
    returning id, address, blocks_proposed, sla_rollup_id
)
insert into sla_node_reports (address, blocks_proposed, sla_rollup_id)
select $1, 1, null
where not exists (select 1 from updated)
`

func (q *Queries) UpsertSlaRollupReport(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, upsertSlaRollupReport, address)
	return err
}
