// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reads.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllRegisteredNodes = `-- name: GetAllRegisteredNodes :many
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key
from core_validators
`

func (q *Queries) GetAllRegisteredNodes(ctx context.Context) ([]CoreValidator, error) {
	rows, err := q.db.Query(ctx, getAllRegisteredNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreValidator
	for rows.Next() {
		var i CoreValidator
		if err := rows.Scan(
			&i.Rowid,
			&i.PubKey,
			&i.Endpoint,
			&i.EthAddress,
			&i.CometAddress,
			&i.EthBlock,
			&i.NodeType,
			&i.SpID,
			&i.CometPubKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRegisteredNodesSorted = `-- name: GetAllRegisteredNodesSorted :many
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key
from core_validators
order by comet_address
`

func (q *Queries) GetAllRegisteredNodesSorted(ctx context.Context) ([]CoreValidator, error) {
	rows, err := q.db.Query(ctx, getAllRegisteredNodesSorted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreValidator
	for rows.Next() {
		var i CoreValidator
		if err := rows.Scan(
			&i.Rowid,
			&i.PubKey,
			&i.Endpoint,
			&i.EthAddress,
			&i.CometAddress,
			&i.EthBlock,
			&i.NodeType,
			&i.SpID,
			&i.CometPubKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppStateAtHeight = `-- name: GetAppStateAtHeight :one
select block_height, app_hash
from core_app_state
where block_height = $1
limit 1
`

type GetAppStateAtHeightRow struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) GetAppStateAtHeight(ctx context.Context, blockHeight int64) (GetAppStateAtHeightRow, error) {
	row := q.db.QueryRow(ctx, getAppStateAtHeight, blockHeight)
	var i GetAppStateAtHeightRow
	err := row.Scan(&i.BlockHeight, &i.AppHash)
	return i, err
}

const getBlock = `-- name: GetBlock :one
select rowid, height, chain_id, hash, proposer, created_at from core_blocks where height = $1
`

func (q *Queries) GetBlock(ctx context.Context, height int64) (CoreBlock, error) {
	row := q.db.QueryRow(ctx, getBlock, height)
	var i CoreBlock
	err := row.Scan(
		&i.Rowid,
		&i.Height,
		&i.ChainID,
		&i.Hash,
		&i.Proposer,
		&i.CreatedAt,
	)
	return i, err
}

const getBlockTransactions = `-- name: GetBlockTransactions :many
select rowid, block_id, index, tx_hash, transaction, created_at from core_transactions where block_id = $1 order by created_at desc
`

func (q *Queries) GetBlockTransactions(ctx context.Context, blockID int64) ([]CoreTransaction, error) {
	rows, err := q.db.Query(ctx, getBlockTransactions, blockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreTransaction
	for rows.Next() {
		var i CoreTransaction
		if err := rows.Scan(
			&i.Rowid,
			&i.BlockID,
			&i.Index,
			&i.TxHash,
			&i.Transaction,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInProgressRollupReports = `-- name: GetInProgressRollupReports :many
select id, address, blocks_proposed, sla_rollup_id from sla_node_reports
where sla_rollup_id is null 
order by address
`

func (q *Queries) GetInProgressRollupReports(ctx context.Context) ([]SlaNodeReport, error) {
	rows, err := q.db.Query(ctx, getInProgressRollupReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SlaNodeReport
	for rows.Next() {
		var i SlaNodeReport
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.BlocksProposed,
			&i.SlaRollupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestAppState = `-- name: GetLatestAppState :one
select block_height, app_hash
from core_app_state
order by block_height desc
limit 1
`

type GetLatestAppStateRow struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) GetLatestAppState(ctx context.Context) (GetLatestAppStateRow, error) {
	row := q.db.QueryRow(ctx, getLatestAppState)
	var i GetLatestAppStateRow
	err := row.Scan(&i.BlockHeight, &i.AppHash)
	return i, err
}

const getLatestSlaRollup = `-- name: GetLatestSlaRollup :one
select id, tx_hash, block_start, block_end, time from sla_rollups order by time desc limit 1
`

func (q *Queries) GetLatestSlaRollup(ctx context.Context) (SlaRollup, error) {
	row := q.db.QueryRow(ctx, getLatestSlaRollup)
	var i SlaRollup
	err := row.Scan(
		&i.ID,
		&i.TxHash,
		&i.BlockStart,
		&i.BlockEnd,
		&i.Time,
	)
	return i, err
}

const getNodeByEndpoint = `-- name: GetNodeByEndpoint :one
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key
from core_validators
where endpoint = $1
limit 1
`

func (q *Queries) GetNodeByEndpoint(ctx context.Context, endpoint string) (CoreValidator, error) {
	row := q.db.QueryRow(ctx, getNodeByEndpoint, endpoint)
	var i CoreValidator
	err := row.Scan(
		&i.Rowid,
		&i.PubKey,
		&i.Endpoint,
		&i.EthAddress,
		&i.CometAddress,
		&i.EthBlock,
		&i.NodeType,
		&i.SpID,
		&i.CometPubKey,
	)
	return i, err
}

const getNodesByEndpoints = `-- name: GetNodesByEndpoints :many
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key
from core_validators
where endpoint = any($1::text[])
`

func (q *Queries) GetNodesByEndpoints(ctx context.Context, dollar_1 []string) ([]CoreValidator, error) {
	rows, err := q.db.Query(ctx, getNodesByEndpoints, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreValidator
	for rows.Next() {
		var i CoreValidator
		if err := rows.Scan(
			&i.Rowid,
			&i.PubKey,
			&i.Endpoint,
			&i.EthAddress,
			&i.CometAddress,
			&i.EthBlock,
			&i.NodeType,
			&i.SpID,
			&i.CometPubKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreviousSlaRollupFromId = `-- name: GetPreviousSlaRollupFromId :one
select id, tx_hash, block_start, block_end, time from sla_rollups
where time < (
    select time from sla_rollups sr where sr.id = $1
)
order by time desc
limit 1
`

func (q *Queries) GetPreviousSlaRollupFromId(ctx context.Context, id int32) (SlaRollup, error) {
	row := q.db.QueryRow(ctx, getPreviousSlaRollupFromId, id)
	var i SlaRollup
	err := row.Scan(
		&i.ID,
		&i.TxHash,
		&i.BlockStart,
		&i.BlockEnd,
		&i.Time,
	)
	return i, err
}

const getRecentBlocks = `-- name: GetRecentBlocks :many
select rowid, height, chain_id, hash, proposer, created_at from core_blocks order by created_at desc limit 10
`

func (q *Queries) GetRecentBlocks(ctx context.Context) ([]CoreBlock, error) {
	rows, err := q.db.Query(ctx, getRecentBlocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreBlock
	for rows.Next() {
		var i CoreBlock
		if err := rows.Scan(
			&i.Rowid,
			&i.Height,
			&i.ChainID,
			&i.Hash,
			&i.Proposer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentRollupsForAllNodes = `-- name: GetRecentRollupsForAllNodes :many
with recent_rollups as (
    select id, tx_hash, block_start, block_end, time
    from sla_rollups
    where sla_rollups.id <= $1
    order by time desc
    limit $2
)
select
    rr.id,
    rr.tx_hash,
    rr.block_start,
    rr.block_end,
    rr.time,
    nr.address,
    nr.blocks_proposed
from recent_rollups rr
left join sla_node_reports nr
on rr.id = nr.sla_rollup_id
order by rr.time
`

type GetRecentRollupsForAllNodesParams struct {
	ID    int32
	Limit int32
}

type GetRecentRollupsForAllNodesRow struct {
	ID             int32
	TxHash         string
	BlockStart     int64
	BlockEnd       int64
	Time           pgtype.Timestamp
	Address        pgtype.Text
	BlocksProposed pgtype.Int4
}

func (q *Queries) GetRecentRollupsForAllNodes(ctx context.Context, arg GetRecentRollupsForAllNodesParams) ([]GetRecentRollupsForAllNodesRow, error) {
	rows, err := q.db.Query(ctx, getRecentRollupsForAllNodes, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentRollupsForAllNodesRow
	for rows.Next() {
		var i GetRecentRollupsForAllNodesRow
		if err := rows.Scan(
			&i.ID,
			&i.TxHash,
			&i.BlockStart,
			&i.BlockEnd,
			&i.Time,
			&i.Address,
			&i.BlocksProposed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentRollupsForNode = `-- name: GetRecentRollupsForNode :many
with recent_rollups as (
    select id, tx_hash, block_start, block_end, time
    from sla_rollups
    order by time desc
    limit 30
)
select
    rr.id,
    rr.tx_hash,
    rr.block_start,
    rr.block_end,
    rr.time,
    nr.address,
    nr.blocks_proposed
from recent_rollups rr
left join sla_node_reports nr
on rr.id = nr.sla_rollup_id and nr.address = $1
order by rr.time
`

type GetRecentRollupsForNodeRow struct {
	ID             int32
	TxHash         string
	BlockStart     int64
	BlockEnd       int64
	Time           pgtype.Timestamp
	Address        pgtype.Text
	BlocksProposed pgtype.Int4
}

func (q *Queries) GetRecentRollupsForNode(ctx context.Context, address string) ([]GetRecentRollupsForNodeRow, error) {
	rows, err := q.db.Query(ctx, getRecentRollupsForNode, address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentRollupsForNodeRow
	for rows.Next() {
		var i GetRecentRollupsForNodeRow
		if err := rows.Scan(
			&i.ID,
			&i.TxHash,
			&i.BlockStart,
			&i.BlockEnd,
			&i.Time,
			&i.Address,
			&i.BlocksProposed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentTxs = `-- name: GetRecentTxs :many
select rowid, block_id, index, tx_hash, transaction, created_at from core_transactions order by created_at desc limit 10
`

func (q *Queries) GetRecentTxs(ctx context.Context) ([]CoreTransaction, error) {
	rows, err := q.db.Query(ctx, getRecentTxs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreTransaction
	for rows.Next() {
		var i CoreTransaction
		if err := rows.Scan(
			&i.Rowid,
			&i.BlockID,
			&i.Index,
			&i.TxHash,
			&i.Transaction,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegisteredNodeByCometAddress = `-- name: GetRegisteredNodeByCometAddress :one
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key from core_validators where comet_address = $1
`

func (q *Queries) GetRegisteredNodeByCometAddress(ctx context.Context, cometAddress string) (CoreValidator, error) {
	row := q.db.QueryRow(ctx, getRegisteredNodeByCometAddress, cometAddress)
	var i CoreValidator
	err := row.Scan(
		&i.Rowid,
		&i.PubKey,
		&i.Endpoint,
		&i.EthAddress,
		&i.CometAddress,
		&i.EthBlock,
		&i.NodeType,
		&i.SpID,
		&i.CometPubKey,
	)
	return i, err
}

const getRegisteredNodeByEthAddress = `-- name: GetRegisteredNodeByEthAddress :one
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key from core_validators where eth_address = $1
`

func (q *Queries) GetRegisteredNodeByEthAddress(ctx context.Context, ethAddress string) (CoreValidator, error) {
	row := q.db.QueryRow(ctx, getRegisteredNodeByEthAddress, ethAddress)
	var i CoreValidator
	err := row.Scan(
		&i.Rowid,
		&i.PubKey,
		&i.Endpoint,
		&i.EthAddress,
		&i.CometAddress,
		&i.EthBlock,
		&i.NodeType,
		&i.SpID,
		&i.CometPubKey,
	)
	return i, err
}

const getRegisteredNodesByType = `-- name: GetRegisteredNodesByType :many
select rowid, pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id, comet_pub_key
from core_validators
where node_type = $1
`

func (q *Queries) GetRegisteredNodesByType(ctx context.Context, nodeType string) ([]CoreValidator, error) {
	rows, err := q.db.Query(ctx, getRegisteredNodesByType, nodeType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreValidator
	for rows.Next() {
		var i CoreValidator
		if err := rows.Scan(
			&i.Rowid,
			&i.PubKey,
			&i.Endpoint,
			&i.EthAddress,
			&i.CometAddress,
			&i.EthBlock,
			&i.NodeType,
			&i.SpID,
			&i.CometPubKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRollupReportForNodeAndId = `-- name: GetRollupReportForNodeAndId :one
select id, address, blocks_proposed, sla_rollup_id from sla_node_reports
where address = $1 and sla_rollup_id = $2
`

type GetRollupReportForNodeAndIdParams struct {
	Address     string
	SlaRollupID pgtype.Int4
}

func (q *Queries) GetRollupReportForNodeAndId(ctx context.Context, arg GetRollupReportForNodeAndIdParams) (SlaNodeReport, error) {
	row := q.db.QueryRow(ctx, getRollupReportForNodeAndId, arg.Address, arg.SlaRollupID)
	var i SlaNodeReport
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.BlocksProposed,
		&i.SlaRollupID,
	)
	return i, err
}

const getRollupReportsForId = `-- name: GetRollupReportsForId :many
select id, address, blocks_proposed, sla_rollup_id from sla_node_reports
where sla_rollup_id = $1
order by address
`

func (q *Queries) GetRollupReportsForId(ctx context.Context, slaRollupID pgtype.Int4) ([]SlaNodeReport, error) {
	rows, err := q.db.Query(ctx, getRollupReportsForId, slaRollupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SlaNodeReport
	for rows.Next() {
		var i SlaNodeReport
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.BlocksProposed,
			&i.SlaRollupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSlaRollupWithId = `-- name: GetSlaRollupWithId :one
select id, tx_hash, block_start, block_end, time from sla_rollups where id = $1
`

func (q *Queries) GetSlaRollupWithId(ctx context.Context, id int32) (SlaRollup, error) {
	row := q.db.QueryRow(ctx, getSlaRollupWithId, id)
	var i SlaRollup
	err := row.Scan(
		&i.ID,
		&i.TxHash,
		&i.BlockStart,
		&i.BlockEnd,
		&i.Time,
	)
	return i, err
}

const getSlaRollupWithTimestamp = `-- name: GetSlaRollupWithTimestamp :one
select id, tx_hash, block_start, block_end, time from sla_rollups where time = $1
`

func (q *Queries) GetSlaRollupWithTimestamp(ctx context.Context, time pgtype.Timestamp) (SlaRollup, error) {
	row := q.db.QueryRow(ctx, getSlaRollupWithTimestamp, time)
	var i SlaRollup
	err := row.Scan(
		&i.ID,
		&i.TxHash,
		&i.BlockStart,
		&i.BlockEnd,
		&i.Time,
	)
	return i, err
}

const getStorageProof = `-- name: GetStorageProof :one
select id, block_height, address, cid, proof_signature, proof, prover_addresses, status from storage_proofs where block_height = $1 and address = $2
`

type GetStorageProofParams struct {
	BlockHeight int64
	Address     string
}

func (q *Queries) GetStorageProof(ctx context.Context, arg GetStorageProofParams) (StorageProof, error) {
	row := q.db.QueryRow(ctx, getStorageProof, arg.BlockHeight, arg.Address)
	var i StorageProof
	err := row.Scan(
		&i.ID,
		&i.BlockHeight,
		&i.Address,
		&i.Cid,
		&i.ProofSignature,
		&i.Proof,
		&i.ProverAddresses,
		&i.Status,
	)
	return i, err
}

const getStorageProofPeers = `-- name: GetStorageProofPeers :one
select prover_addresses from storage_proof_peers where block_height = $1
`

func (q *Queries) GetStorageProofPeers(ctx context.Context, blockHeight int64) ([]string, error) {
	row := q.db.QueryRow(ctx, getStorageProofPeers, blockHeight)
	var prover_addresses []string
	err := row.Scan(&prover_addresses)
	return prover_addresses, err
}

const getStorageProofs = `-- name: GetStorageProofs :many
select id, block_height, address, cid, proof_signature, proof, prover_addresses, status from storage_proofs where block_height = $1
`

func (q *Queries) GetStorageProofs(ctx context.Context, blockHeight int64) ([]StorageProof, error) {
	rows, err := q.db.Query(ctx, getStorageProofs, blockHeight)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StorageProof
	for rows.Next() {
		var i StorageProof
		if err := rows.Scan(
			&i.ID,
			&i.BlockHeight,
			&i.Address,
			&i.Cid,
			&i.ProofSignature,
			&i.Proof,
			&i.ProverAddresses,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTx = `-- name: GetTx :one
select rowid, block_id, index, tx_hash, transaction, created_at from core_transactions where lower(tx_hash) = lower($1) limit 1
`

func (q *Queries) GetTx(ctx context.Context, lower string) (CoreTransaction, error) {
	row := q.db.QueryRow(ctx, getTx, lower)
	var i CoreTransaction
	err := row.Scan(
		&i.Rowid,
		&i.BlockID,
		&i.Index,
		&i.TxHash,
		&i.Transaction,
		&i.CreatedAt,
	)
	return i, err
}

const totalBlocks = `-- name: TotalBlocks :one
select count(*) from core_blocks
`

func (q *Queries) TotalBlocks(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, totalBlocks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const totalTransactions = `-- name: TotalTransactions :one
select count(*) from core_transactions
`

func (q *Queries) TotalTransactions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, totalTransactions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const totalTransactionsByType = `-- name: TotalTransactionsByType :one
select count(*) from core_tx_stats where tx_type = $1
`

func (q *Queries) TotalTransactionsByType(ctx context.Context, txType string) (int64, error) {
	row := q.db.QueryRow(ctx, totalTransactionsByType, txType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const totalTxResults = `-- name: TotalTxResults :one
select count(tx_hash) from core_transactions
`

func (q *Queries) TotalTxResults(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, totalTxResults)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const totalValidators = `-- name: TotalValidators :one
select count(*) from core_validators
`

func (q *Queries) TotalValidators(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, totalValidators)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const txsPerHour = `-- name: TxsPerHour :many
select date_trunc('hour', created_at)::timestamp as hour, tx_type, count(*) as tx_count
from core_tx_stats 
where created_at >= now() - interval '1 day'
group by hour, tx_type 
order by hour asc
`

type TxsPerHourRow struct {
	Hour    pgtype.Timestamp
	TxType  string
	TxCount int64
}

func (q *Queries) TxsPerHour(ctx context.Context) ([]TxsPerHourRow, error) {
	rows, err := q.db.Query(ctx, txsPerHour)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TxsPerHourRow
	for rows.Next() {
		var i TxsPerHourRow
		if err := rows.Scan(&i.Hour, &i.TxType, &i.TxCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
