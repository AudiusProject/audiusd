package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/AudiusProject/audiusd/pkg/core/gen/core_gql"
)

func (r *queryGraphQLServer) GetBlock(ctx context.Context, height *int) (*core_gql.Block, error) {
	block, err := r.db.GetBlock(ctx, int64(*height))
	if err != nil {
		return nil, err
	}

	txs, err := r.db.GetBlockTransactions(ctx, block.Height)
	if err != nil {
		return nil, err
	}

	transactions := []*core_gql.Transaction{}
	for _, tx := range txs {
		transactions = append(transactions, &core_gql.Transaction{
			Index: int(tx.Index),
			Hash:  tx.TxHash,
		})
	}

	return &core_gql.Block{
		Height:       int(block.Height),
		ChainID:      block.ChainID,
		Hash:         block.Hash,
		Proposer:     block.Proposer,
		Transactions: transactions,
	}, nil
}

func (r *queryGraphQLServer) GetTransaction(ctx context.Context, hash *string) (*core_gql.Transaction, error) {
	return nil, fmt.Errorf("not implemented: GetTransaction - getTransaction")
}

func (r *GraphQLServer) Query() core_gql.QueryResolver { return &queryGraphQLServer{r} }

type queryGraphQLServer struct{ *GraphQLServer }
