// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: storage/v1/rpc.proto

package storagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AudiusProject/audiusd/pkg/gen/storage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServicePingProcedure is the fully-qualified name of the StorageService's Ping RPC.
	StorageServicePingProcedure = "/storage.v1.StorageService/Ping"
	// StorageServiceHealthCheckProcedure is the fully-qualified name of the StorageService's
	// HealthCheck RPC.
	StorageServiceHealthCheckProcedure = "/storage.v1.StorageService/HealthCheck"
	// StorageServiceUploadProcedure is the fully-qualified name of the StorageService's Upload RPC.
	StorageServiceUploadProcedure = "/storage.v1.StorageService/Upload"
	// StorageServiceGetUploadProcedure is the fully-qualified name of the StorageService's GetUpload
	// RPC.
	StorageServiceGetUploadProcedure = "/storage.v1.StorageService/GetUpload"
	// StorageServiceUpdateUploadProcedure is the fully-qualified name of the StorageService's
	// UpdateUpload RPC.
	StorageServiceUpdateUploadProcedure = "/storage.v1.StorageService/UpdateUpload"
	// StorageServiceGetUploadsProcedure is the fully-qualified name of the StorageService's GetUploads
	// RPC.
	StorageServiceGetUploadsProcedure = "/storage.v1.StorageService/GetUploads"
	// StorageServiceStreamTrackProcedure is the fully-qualified name of the StorageService's
	// StreamTrack RPC.
	StorageServiceStreamTrackProcedure = "/storage.v1.StorageService/StreamTrack"
	// StorageServiceGetImageProcedure is the fully-qualified name of the StorageService's GetImage RPC.
	StorageServiceGetImageProcedure = "/storage.v1.StorageService/GetImage"
)

// StorageServiceClient is a client for the storage.v1.StorageService service.
type StorageServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	Upload(context.Context) *connect.ClientStreamForClient[v1.UploadRequest, v1.UploadResponse]
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	UpdateUpload(context.Context, *connect.Request[v1.UpdateUploadRequest]) (*connect.Response[v1.UpdateUploadResponse], error)
	GetUploads(context.Context, *connect.Request[v1.GetUploadsRequest]) (*connect.Response[v1.GetUploadsResponse], error)
	StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest]) (*connect.ServerStreamForClient[v1.StreamTrackResponse], error)
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.ServerStreamForClient[v1.GetImageResponse], error)
}

// NewStorageServiceClient constructs a client for the storage.v1.StorageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := v1.File_storage_v1_rpc_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+StorageServicePingProcedure,
			connect.WithSchema(storageServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+StorageServiceHealthCheckProcedure,
			connect.WithSchema(storageServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		upload: connect.NewClient[v1.UploadRequest, v1.UploadResponse](
			httpClient,
			baseURL+StorageServiceUploadProcedure,
			connect.WithSchema(storageServiceMethods.ByName("Upload")),
			connect.WithClientOptions(opts...),
		),
		getUpload: connect.NewClient[v1.GetUploadRequest, v1.GetUploadResponse](
			httpClient,
			baseURL+StorageServiceGetUploadProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetUpload")),
			connect.WithClientOptions(opts...),
		),
		updateUpload: connect.NewClient[v1.UpdateUploadRequest, v1.UpdateUploadResponse](
			httpClient,
			baseURL+StorageServiceUpdateUploadProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdateUpload")),
			connect.WithClientOptions(opts...),
		),
		getUploads: connect.NewClient[v1.GetUploadsRequest, v1.GetUploadsResponse](
			httpClient,
			baseURL+StorageServiceGetUploadsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetUploads")),
			connect.WithClientOptions(opts...),
		),
		streamTrack: connect.NewClient[v1.StreamTrackRequest, v1.StreamTrackResponse](
			httpClient,
			baseURL+StorageServiceStreamTrackProcedure,
			connect.WithSchema(storageServiceMethods.ByName("StreamTrack")),
			connect.WithClientOptions(opts...),
		),
		getImage: connect.NewClient[v1.GetImageRequest, v1.GetImageResponse](
			httpClient,
			baseURL+StorageServiceGetImageProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetImage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	ping         *connect.Client[v1.PingRequest, v1.PingResponse]
	healthCheck  *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	upload       *connect.Client[v1.UploadRequest, v1.UploadResponse]
	getUpload    *connect.Client[v1.GetUploadRequest, v1.GetUploadResponse]
	updateUpload *connect.Client[v1.UpdateUploadRequest, v1.UpdateUploadResponse]
	getUploads   *connect.Client[v1.GetUploadsRequest, v1.GetUploadsResponse]
	streamTrack  *connect.Client[v1.StreamTrackRequest, v1.StreamTrackResponse]
	getImage     *connect.Client[v1.GetImageRequest, v1.GetImageResponse]
}

// Ping calls storage.v1.StorageService.Ping.
func (c *storageServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// HealthCheck calls storage.v1.StorageService.HealthCheck.
func (c *storageServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// Upload calls storage.v1.StorageService.Upload.
func (c *storageServiceClient) Upload(ctx context.Context) *connect.ClientStreamForClient[v1.UploadRequest, v1.UploadResponse] {
	return c.upload.CallClientStream(ctx)
}

// GetUpload calls storage.v1.StorageService.GetUpload.
func (c *storageServiceClient) GetUpload(ctx context.Context, req *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return c.getUpload.CallUnary(ctx, req)
}

// UpdateUpload calls storage.v1.StorageService.UpdateUpload.
func (c *storageServiceClient) UpdateUpload(ctx context.Context, req *connect.Request[v1.UpdateUploadRequest]) (*connect.Response[v1.UpdateUploadResponse], error) {
	return c.updateUpload.CallUnary(ctx, req)
}

// GetUploads calls storage.v1.StorageService.GetUploads.
func (c *storageServiceClient) GetUploads(ctx context.Context, req *connect.Request[v1.GetUploadsRequest]) (*connect.Response[v1.GetUploadsResponse], error) {
	return c.getUploads.CallUnary(ctx, req)
}

// StreamTrack calls storage.v1.StorageService.StreamTrack.
func (c *storageServiceClient) StreamTrack(ctx context.Context, req *connect.Request[v1.StreamTrackRequest]) (*connect.ServerStreamForClient[v1.StreamTrackResponse], error) {
	return c.streamTrack.CallServerStream(ctx, req)
}

// GetImage calls storage.v1.StorageService.GetImage.
func (c *storageServiceClient) GetImage(ctx context.Context, req *connect.Request[v1.GetImageRequest]) (*connect.ServerStreamForClient[v1.GetImageResponse], error) {
	return c.getImage.CallServerStream(ctx, req)
}

// StorageServiceHandler is an implementation of the storage.v1.StorageService service.
type StorageServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	Upload(context.Context, *connect.ClientStream[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	UpdateUpload(context.Context, *connect.Request[v1.UpdateUploadRequest]) (*connect.Response[v1.UpdateUploadResponse], error)
	GetUploads(context.Context, *connect.Request[v1.GetUploadsRequest]) (*connect.Response[v1.GetUploadsResponse], error)
	StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest], *connect.ServerStream[v1.StreamTrackResponse]) error
	GetImage(context.Context, *connect.Request[v1.GetImageRequest], *connect.ServerStream[v1.GetImageResponse]) error
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := v1.File_storage_v1_rpc_proto.Services().ByName("StorageService").Methods()
	storageServicePingHandler := connect.NewUnaryHandler(
		StorageServicePingProcedure,
		svc.Ping,
		connect.WithSchema(storageServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceHealthCheckHandler := connect.NewUnaryHandler(
		StorageServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(storageServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUploadHandler := connect.NewClientStreamHandler(
		StorageServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(storageServiceMethods.ByName("Upload")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetUploadHandler := connect.NewUnaryHandler(
		StorageServiceGetUploadProcedure,
		svc.GetUpload,
		connect.WithSchema(storageServiceMethods.ByName("GetUpload")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdateUploadHandler := connect.NewUnaryHandler(
		StorageServiceUpdateUploadProcedure,
		svc.UpdateUpload,
		connect.WithSchema(storageServiceMethods.ByName("UpdateUpload")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetUploadsHandler := connect.NewUnaryHandler(
		StorageServiceGetUploadsProcedure,
		svc.GetUploads,
		connect.WithSchema(storageServiceMethods.ByName("GetUploads")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceStreamTrackHandler := connect.NewServerStreamHandler(
		StorageServiceStreamTrackProcedure,
		svc.StreamTrack,
		connect.WithSchema(storageServiceMethods.ByName("StreamTrack")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetImageHandler := connect.NewServerStreamHandler(
		StorageServiceGetImageProcedure,
		svc.GetImage,
		connect.WithSchema(storageServiceMethods.ByName("GetImage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServicePingProcedure:
			storageServicePingHandler.ServeHTTP(w, r)
		case StorageServiceHealthCheckProcedure:
			storageServiceHealthCheckHandler.ServeHTTP(w, r)
		case StorageServiceUploadProcedure:
			storageServiceUploadHandler.ServeHTTP(w, r)
		case StorageServiceGetUploadProcedure:
			storageServiceGetUploadHandler.ServeHTTP(w, r)
		case StorageServiceUpdateUploadProcedure:
			storageServiceUpdateUploadHandler.ServeHTTP(w, r)
		case StorageServiceGetUploadsProcedure:
			storageServiceGetUploadsHandler.ServeHTTP(w, r)
		case StorageServiceStreamTrackProcedure:
			storageServiceStreamTrackHandler.ServeHTTP(w, r)
		case StorageServiceGetImageProcedure:
			storageServiceGetImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.Ping is not implemented"))
}

func (UnimplementedStorageServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.HealthCheck is not implemented"))
}

func (UnimplementedStorageServiceHandler) Upload(context.Context, *connect.ClientStream[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.Upload is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetUpload is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdateUpload(context.Context, *connect.Request[v1.UpdateUploadRequest]) (*connect.Response[v1.UpdateUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.UpdateUpload is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetUploads(context.Context, *connect.Request[v1.GetUploadsRequest]) (*connect.Response[v1.GetUploadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetUploads is not implemented"))
}

func (UnimplementedStorageServiceHandler) StreamTrack(context.Context, *connect.Request[v1.StreamTrackRequest], *connect.ServerStream[v1.StreamTrackResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.StreamTrack is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetImage(context.Context, *connect.Request[v1.GetImageRequest], *connect.ServerStream[v1.GetImageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetImage is not implemented"))
}
