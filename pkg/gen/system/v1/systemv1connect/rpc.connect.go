// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: system/v1/rpc.proto

package systemv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AudiusProject/audiusd/pkg/gen/system/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemServiceName is the fully-qualified name of the SystemService service.
	SystemServiceName = "system.v1.SystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemServicePingProcedure is the fully-qualified name of the SystemService's Ping RPC.
	SystemServicePingProcedure = "/system.v1.SystemService/Ping"
	// SystemServiceHealthCheckProcedure is the fully-qualified name of the SystemService's HealthCheck
	// RPC.
	SystemServiceHealthCheckProcedure = "/system.v1.SystemService/HealthCheck"
	// SystemServiceGetNodeInfoProcedure is the fully-qualified name of the SystemService's GetNodeInfo
	// RPC.
	SystemServiceGetNodeInfoProcedure = "/system.v1.SystemService/GetNodeInfo"
	// SystemServiceGetNodeStatusProcedure is the fully-qualified name of the SystemService's
	// GetNodeStatus RPC.
	SystemServiceGetNodeStatusProcedure = "/system.v1.SystemService/GetNodeStatus"
	// SystemServiceGetNodeMetricsProcedure is the fully-qualified name of the SystemService's
	// GetNodeMetrics RPC.
	SystemServiceGetNodeMetricsProcedure = "/system.v1.SystemService/GetNodeMetrics"
	// SystemServiceGetNodeConfigProcedure is the fully-qualified name of the SystemService's
	// GetNodeConfig RPC.
	SystemServiceGetNodeConfigProcedure = "/system.v1.SystemService/GetNodeConfig"
	// SystemServiceGetNodePeersProcedure is the fully-qualified name of the SystemService's
	// GetNodePeers RPC.
	SystemServiceGetNodePeersProcedure = "/system.v1.SystemService/GetNodePeers"
)

// SystemServiceClient is a client for the system.v1.SystemService service.
type SystemServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	GetNodeInfo(context.Context, *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error)
	GetNodeStatus(context.Context, *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error)
	GetNodeMetrics(context.Context, *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error)
	GetNodeConfig(context.Context, *connect.Request[v1.GetNodeConfigRequest]) (*connect.Response[v1.GetNodeConfigResponse], error)
	GetNodePeers(context.Context, *connect.Request[v1.GetNodePeersRequest]) (*connect.Response[v1.GetNodePeersResponse], error)
}

// NewSystemServiceClient constructs a client for the system.v1.SystemService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemServiceMethods := v1.File_system_v1_rpc_proto.Services().ByName("SystemService").Methods()
	return &systemServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+SystemServicePingProcedure,
			connect.WithSchema(systemServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+SystemServiceHealthCheckProcedure,
			connect.WithSchema(systemServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		getNodeInfo: connect.NewClient[v1.GetNodeInfoRequest, v1.GetNodeInfoResponse](
			httpClient,
			baseURL+SystemServiceGetNodeInfoProcedure,
			connect.WithSchema(systemServiceMethods.ByName("GetNodeInfo")),
			connect.WithClientOptions(opts...),
		),
		getNodeStatus: connect.NewClient[v1.GetNodeStatusRequest, v1.GetNodeStatusResponse](
			httpClient,
			baseURL+SystemServiceGetNodeStatusProcedure,
			connect.WithSchema(systemServiceMethods.ByName("GetNodeStatus")),
			connect.WithClientOptions(opts...),
		),
		getNodeMetrics: connect.NewClient[v1.GetNodeMetricsRequest, v1.GetNodeMetricsResponse](
			httpClient,
			baseURL+SystemServiceGetNodeMetricsProcedure,
			connect.WithSchema(systemServiceMethods.ByName("GetNodeMetrics")),
			connect.WithClientOptions(opts...),
		),
		getNodeConfig: connect.NewClient[v1.GetNodeConfigRequest, v1.GetNodeConfigResponse](
			httpClient,
			baseURL+SystemServiceGetNodeConfigProcedure,
			connect.WithSchema(systemServiceMethods.ByName("GetNodeConfig")),
			connect.WithClientOptions(opts...),
		),
		getNodePeers: connect.NewClient[v1.GetNodePeersRequest, v1.GetNodePeersResponse](
			httpClient,
			baseURL+SystemServiceGetNodePeersProcedure,
			connect.WithSchema(systemServiceMethods.ByName("GetNodePeers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemServiceClient implements SystemServiceClient.
type systemServiceClient struct {
	ping           *connect.Client[v1.PingRequest, v1.PingResponse]
	healthCheck    *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	getNodeInfo    *connect.Client[v1.GetNodeInfoRequest, v1.GetNodeInfoResponse]
	getNodeStatus  *connect.Client[v1.GetNodeStatusRequest, v1.GetNodeStatusResponse]
	getNodeMetrics *connect.Client[v1.GetNodeMetricsRequest, v1.GetNodeMetricsResponse]
	getNodeConfig  *connect.Client[v1.GetNodeConfigRequest, v1.GetNodeConfigResponse]
	getNodePeers   *connect.Client[v1.GetNodePeersRequest, v1.GetNodePeersResponse]
}

// Ping calls system.v1.SystemService.Ping.
func (c *systemServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// HealthCheck calls system.v1.SystemService.HealthCheck.
func (c *systemServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// GetNodeInfo calls system.v1.SystemService.GetNodeInfo.
func (c *systemServiceClient) GetNodeInfo(ctx context.Context, req *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error) {
	return c.getNodeInfo.CallUnary(ctx, req)
}

// GetNodeStatus calls system.v1.SystemService.GetNodeStatus.
func (c *systemServiceClient) GetNodeStatus(ctx context.Context, req *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error) {
	return c.getNodeStatus.CallUnary(ctx, req)
}

// GetNodeMetrics calls system.v1.SystemService.GetNodeMetrics.
func (c *systemServiceClient) GetNodeMetrics(ctx context.Context, req *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error) {
	return c.getNodeMetrics.CallUnary(ctx, req)
}

// GetNodeConfig calls system.v1.SystemService.GetNodeConfig.
func (c *systemServiceClient) GetNodeConfig(ctx context.Context, req *connect.Request[v1.GetNodeConfigRequest]) (*connect.Response[v1.GetNodeConfigResponse], error) {
	return c.getNodeConfig.CallUnary(ctx, req)
}

// GetNodePeers calls system.v1.SystemService.GetNodePeers.
func (c *systemServiceClient) GetNodePeers(ctx context.Context, req *connect.Request[v1.GetNodePeersRequest]) (*connect.Response[v1.GetNodePeersResponse], error) {
	return c.getNodePeers.CallUnary(ctx, req)
}

// SystemServiceHandler is an implementation of the system.v1.SystemService service.
type SystemServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	GetNodeInfo(context.Context, *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error)
	GetNodeStatus(context.Context, *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error)
	GetNodeMetrics(context.Context, *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error)
	GetNodeConfig(context.Context, *connect.Request[v1.GetNodeConfigRequest]) (*connect.Response[v1.GetNodeConfigResponse], error)
	GetNodePeers(context.Context, *connect.Request[v1.GetNodePeersRequest]) (*connect.Response[v1.GetNodePeersResponse], error)
}

// NewSystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemServiceHandler(svc SystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemServiceMethods := v1.File_system_v1_rpc_proto.Services().ByName("SystemService").Methods()
	systemServicePingHandler := connect.NewUnaryHandler(
		SystemServicePingProcedure,
		svc.Ping,
		connect.WithSchema(systemServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceHealthCheckHandler := connect.NewUnaryHandler(
		SystemServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(systemServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceGetNodeInfoHandler := connect.NewUnaryHandler(
		SystemServiceGetNodeInfoProcedure,
		svc.GetNodeInfo,
		connect.WithSchema(systemServiceMethods.ByName("GetNodeInfo")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceGetNodeStatusHandler := connect.NewUnaryHandler(
		SystemServiceGetNodeStatusProcedure,
		svc.GetNodeStatus,
		connect.WithSchema(systemServiceMethods.ByName("GetNodeStatus")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceGetNodeMetricsHandler := connect.NewUnaryHandler(
		SystemServiceGetNodeMetricsProcedure,
		svc.GetNodeMetrics,
		connect.WithSchema(systemServiceMethods.ByName("GetNodeMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceGetNodeConfigHandler := connect.NewUnaryHandler(
		SystemServiceGetNodeConfigProcedure,
		svc.GetNodeConfig,
		connect.WithSchema(systemServiceMethods.ByName("GetNodeConfig")),
		connect.WithHandlerOptions(opts...),
	)
	systemServiceGetNodePeersHandler := connect.NewUnaryHandler(
		SystemServiceGetNodePeersProcedure,
		svc.GetNodePeers,
		connect.WithSchema(systemServiceMethods.ByName("GetNodePeers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/system.v1.SystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemServicePingProcedure:
			systemServicePingHandler.ServeHTTP(w, r)
		case SystemServiceHealthCheckProcedure:
			systemServiceHealthCheckHandler.ServeHTTP(w, r)
		case SystemServiceGetNodeInfoProcedure:
			systemServiceGetNodeInfoHandler.ServeHTTP(w, r)
		case SystemServiceGetNodeStatusProcedure:
			systemServiceGetNodeStatusHandler.ServeHTTP(w, r)
		case SystemServiceGetNodeMetricsProcedure:
			systemServiceGetNodeMetricsHandler.ServeHTTP(w, r)
		case SystemServiceGetNodeConfigProcedure:
			systemServiceGetNodeConfigHandler.ServeHTTP(w, r)
		case SystemServiceGetNodePeersProcedure:
			systemServiceGetNodePeersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemServiceHandler struct{}

func (UnimplementedSystemServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.Ping is not implemented"))
}

func (UnimplementedSystemServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.HealthCheck is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetNodeInfo(context.Context, *connect.Request[v1.GetNodeInfoRequest]) (*connect.Response[v1.GetNodeInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.GetNodeInfo is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetNodeStatus(context.Context, *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.GetNodeStatus is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetNodeMetrics(context.Context, *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.GetNodeMetrics is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetNodeConfig(context.Context, *connect.Request[v1.GetNodeConfigRequest]) (*connect.Response[v1.GetNodeConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.GetNodeConfig is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetNodePeers(context.Context, *connect.Request[v1.GetNodePeersRequest]) (*connect.Response[v1.GetNodePeersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("system.v1.SystemService.GetNodePeers is not implemented"))
}
