package pages

import (
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/api/etl/v1"
	"github.com/AudiusProject/audiusd/pkg/console/templates"
	"github.com/AudiusProject/audiusd/pkg/console/templates/layouts"
)

templ Transaction(tx *v1.Transaction) {
	@layouts.Base(fmt.Sprintf("Transaction %s", tx.Hash[:8])) {
		<div class="space-y-6">
			<!-- Transaction Info Card -->
			<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
				<div class="flex justify-between items-start mb-4">
					<div>
						<h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">Transaction Details</h2>
						<div class="text-gray-500 dark:text-gray-400 mt-1">
							{ tx.Hash }
						</div>
					</div>
					<div>
						<span class="px-3 py-1 text-sm rounded-full bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
							{ tx.Type }
						</span>
					</div>
				</div>
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Block Height</label>
						<p class="text-gray-900 dark:text-gray-100">
							<a href={ templ.SafeURL(fmt.Sprintf("/block/%d", tx.BlockHeight)) } class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline">
								{ fmt.Sprintf("%d", tx.BlockHeight) }
							</a>
						</p>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Transaction Index</label>
						<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", tx.Index) }</p>
					</div>
					if tx.BlockTime != nil {
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Block Time</label>
							<p class="text-gray-900 dark:text-gray-100">
								@templates.TimeWithTooltip(tx.BlockTime.AsTime())
							</p>
						</div>
					}
					if tx.ProposerAddress != "" {
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Block Proposer</label>
							<p class="text-gray-900 dark:text-gray-100">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", tx.ProposerAddress)) } class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline">
									@templates.StringWithTooltip(tx.ProposerAddress)
								</a>
							</p>
						</div>
					}
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Transaction Type</label>
						<p class="text-gray-900 dark:text-gray-100 capitalize">{ tx.Type }</p>
					</div>
				</div>
			</div>
			<!-- Transaction Content Based on Type -->
			switch tx.Content.(type) {
				case *v1.Transaction_Plays:
					@TrackPlaysSection(tx.Content.(*v1.Transaction_Plays).Plays)
				case *v1.Transaction_ManageEntity:
					@ManageEntitySection(tx.Content.(*v1.Transaction_ManageEntity).ManageEntity)
				case *v1.Transaction_ValidatorRegistration:
					@ValidatorRegistrationSection(tx.Content.(*v1.Transaction_ValidatorRegistration).ValidatorRegistration)
				case *v1.Transaction_ValidatorDeregistration:
					@ValidatorDeregistrationSection(tx.Content.(*v1.Transaction_ValidatorDeregistration).ValidatorDeregistration)
				case *v1.Transaction_SlaRollup:
					@SlaRollupSection(tx.Content.(*v1.Transaction_SlaRollup).SlaRollup)
				case *v1.Transaction_StorageProof:
					@StorageProofSection(tx.Content.(*v1.Transaction_StorageProof).StorageProof)
				case *v1.Transaction_StorageProofVerification:
					@StorageProofVerificationSection(tx.Content.(*v1.Transaction_StorageProofVerification).StorageProofVerification)
				case *v1.Transaction_Release:
					@ReleaseSection(tx.Content.(*v1.Transaction_Release).Release)
				default:
					<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
						<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Transaction Content</h3>
						<p class="text-gray-500 dark:text-gray-400">No detailed transaction content available for this transaction type.</p>
					</div>
			}
		</div>
	}
}

templ TrackPlaysSection(plays *v1.TrackPlaysTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Track Plays ({ fmt.Sprintf("%d", len(plays.Plays)) })</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">User</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Track ID</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Location</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Played At</th>
					</tr>
				</thead>
				<tbody>
					for _, play := range plays.Plays {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								@templates.StringWithTooltip(play.Address)
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(play.TrackId)
							</td>
							<td class="py-2 px-4 text-sm">
								{ play.City }
								if play.Region != "" {
									, { play.Region }
								}
								if play.Country != "" {
									, { play.Country }
								}
							</td>
							<td class="py-2 px-4 text-sm">
								if play.PlayedAt != nil {
									@templates.TimeWithTooltip(play.PlayedAt.AsTime())
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ManageEntitySection(entities *v1.ManageEntityTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Manage Entities ({ fmt.Sprintf("%d", len(entities.Entities)) })</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Entity Type</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Entity ID</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Action</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Signer</th>
					</tr>
				</thead>
				<tbody>
					for _, entity := range entities.Entities {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								@templates.StringWithTooltip(entity.Address)
							</td>
							<td class="py-2 px-4">{ entity.EntityType }</td>
							<td class="py-2 px-4">{ fmt.Sprintf("%d", entity.EntityId) }</td>
							<td class="py-2 px-4">
								<span class="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
									{ entity.Action }
								</span>
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(entity.Signer)
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ValidatorRegistrationSection(registrations *v1.ValidatorRegistrationTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Validator Registrations ({ fmt.Sprintf("%d", len(registrations.Registrations)) })</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Comet Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Node Type</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Voting Power</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">SPID</th>
					</tr>
				</thead>
				<tbody>
					for _, reg := range registrations.Registrations {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", reg.Address)) } class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline">
									@templates.StringWithTooltip(reg.Address)
								</a>
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(reg.CometAddress)
							</td>
							<td class="py-2 px-4">{ reg.NodeType }</td>
							<td class="py-2 px-4">{ fmt.Sprintf("%d", reg.VotingPower) }</td>
							<td class="py-2 px-4">{ reg.Spid }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ValidatorDeregistrationSection(deregistrations *v1.ValidatorDeregistrationTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Validator Deregistrations ({ fmt.Sprintf("%d", len(deregistrations.Deregistrations)) })</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Comet Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Public Key</th>
					</tr>
				</thead>
				<tbody>
					for _, dereg := range deregistrations.Deregistrations {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", dereg.CometAddress)) } class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline">
									@templates.StringWithTooltip(dereg.CometAddress)
								</a>
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(fmt.Sprintf("%x", dereg.CometPubkey))
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ SlaRollupSection(slaRollup *v1.SlaRollupTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">SLA Rollup</h3>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Block Range</label>
				<p class="text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("%d - %d", slaRollup.BlockStart, slaRollup.BlockEnd) }
				</p>
			</div>
			if slaRollup.Timestamp != nil {
				<div>
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Rollup Timestamp</label>
					<p class="text-gray-900 dark:text-gray-100">
						@templates.TimeWithTooltip(slaRollup.Timestamp.AsTime())
					</p>
				</div>
			}
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Node Reports</label>
				<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", len(slaRollup.Reports)) }</p>
			</div>
		</div>
		if len(slaRollup.Reports) > 0 {
			<div class="overflow-x-auto">
				<table class="min-w-full table-auto">
					<thead>
						<tr class="border-b border-gray-200 dark:border-gray-700">
							<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Node Address</th>
							<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Blocks Proposed</th>
						</tr>
					</thead>
					<tbody>
						for _, report := range slaRollup.Reports {
							<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
								<td class="py-2 px-4">
									<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", report.Address)) } class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 hover:underline">
										@templates.StringWithTooltip(report.Address)
									</a>
								</td>
								<td class="py-2 px-4">{ fmt.Sprintf("%d", report.NumBlocksProposed) }</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
}

templ StorageProofSection(storageProof *v1.StorageProofTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Storage Proof</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Height</label>
				<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", storageProof.Height) }</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address</label>
				<p class="text-gray-900 dark:text-gray-100">
					@templates.StringWithTooltip(storageProof.Address)
				</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">CID</label>
				<p class="text-gray-900 dark:text-gray-100">
					@templates.StringWithTooltip(storageProof.Cid)
				</p>
			</div>
			<div class="md:col-span-2 lg:col-span-3">
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Prover Addresses</label>
				<div class="flex flex-wrap gap-2">
					for _, addr := range storageProof.ProverAddresses {
						<span class="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
							@templates.StringWithTooltip(addr)
						</span>
					}
				</div>
			</div>
			if storageProof.ProofSignature != nil {
				<div class="md:col-span-2 lg:col-span-3">
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Proof Signature</label>
					<p class="text-gray-900 dark:text-gray-100">
						@templates.StringWithTooltip(fmt.Sprintf("%x", storageProof.ProofSignature))
					</p>
				</div>
			}
		</div>
	</div>
}

templ StorageProofVerificationSection(storageProofVerification *v1.StorageProofVerificationTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Storage Proof Verification</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Height</label>
				<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", storageProofVerification.Height) }</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Proof</label>
				<p class="text-gray-900 dark:text-gray-100">
					@templates.StringWithTooltip(fmt.Sprintf("%x", storageProofVerification.Proof))
				</p>
			</div>
		</div>
	</div>
}

templ ReleaseSection(release *v1.ReleaseTransaction) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Release (DDEX)</h3>
		<div>
			<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Release Data</label>
			<div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-4 overflow-x-auto">
				<pre class="text-sm text-gray-900 dark:text-gray-100 whitespace-pre-wrap">{ string(release.ReleaseData) }</pre>
			</div>
		</div>
	</div>
}
