package pages

import (
	"encoding/json"
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/console/templates"
	"github.com/AudiusProject/audiusd/pkg/console/templates/layouts"
	"github.com/AudiusProject/audiusd/pkg/etl/db"
	"regexp"
)

func formatJSON(jsonStr string) string {
	var obj interface{}
	if err := json.Unmarshal([]byte(jsonStr), &obj); err != nil {
		return jsonStr // Return original if not valid JSON
	}

	formatted, err := json.MarshalIndent(obj, "", "  ")
	if err != nil {
		return jsonStr // Return original if formatting fails
	}

	return string(formatted)
}

func highlightJSON(jsonStr string) string {
	formatted := formatJSON(jsonStr)

	// Simple regex-based syntax highlighting
	// Replace strings (quoted values)
	formatted = regexp.MustCompile(`"([^"\\]*(\\.[^"\\]*)*)":`).ReplaceAllString(formatted, `<span class="json-key">"$1"</span>:`)
	formatted = regexp.MustCompile(`:\s*"([^"\\]*(\\.[^"\\]*)*)"([,\}\]])`).ReplaceAllString(formatted, `: <span class="json-string">"$1"</span>$3`)

	// Replace numbers
	formatted = regexp.MustCompile(`:\s*(-?\d+\.?\d*)([,\}\]])`).ReplaceAllString(formatted, `: <span class="json-number">$1</span>$2`)

	// Replace booleans
	formatted = regexp.MustCompile(`:\s*(true|false)([,\}\]])`).ReplaceAllString(formatted, `: <span class="json-boolean">$1</span>$2`)

	// Replace null
	formatted = regexp.MustCompile(`:\s*(null)([,\}\]])`).ReplaceAllString(formatted, `: <span class="json-null">$1</span>$2`)

	// Replace braces and brackets
	formatted = regexp.MustCompile(`([\{\}\[\]])`).ReplaceAllString(formatted, `<span class="json-brace">$1</span>`)

	return formatted
}

type TransactionProps struct {
	Transaction *db.EtlTransaction
	Proposer    string
	Content     interface{}
}

templ Transaction(props TransactionProps) {
	@layouts.Base(fmt.Sprintf("Transaction %s", props.Transaction.TxHash[:8])) {
		<div class="space-y-6">
			<!-- Transaction Info Card -->
			<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
				<div class="flex justify-between items-start mb-4">
					<div>
						<h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">Transaction Details</h2>
						<div class="text-gray-500 dark:text-gray-400 mt-1">
							{ props.Transaction.TxHash }
						</div>
					</div>
					<div>
						<span class="px-3 py-1 text-sm rounded-full bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200">
							{ props.Transaction.TxType }
						</span>
					</div>
				</div>
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
					<div>
						<label class="block text-base font-semibold text-gray-800 dark:text-gray-200 mb-1">Block Height</label>
						<p class="text-gray-900 dark:text-gray-100">
							<a href={ templ.SafeURL(fmt.Sprintf("/block/%d", props.Transaction.BlockHeight)) } class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 hover:underline">
								{ fmt.Sprintf("%d", props.Transaction.BlockHeight) }
							</a>
						</p>
					</div>
					<div>
						<label class="block text-base font-semibold text-gray-800 dark:text-gray-200 mb-1">Transaction Index</label>
						<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", props.Transaction.TxIndex) }</p>
					</div>
					if props.Transaction.CreatedAt.Valid {
						<div>
							<label class="block text-base font-semibold text-gray-800 dark:text-gray-200 mb-1">Block Time</label>
							<p class="text-gray-900 dark:text-gray-100">
								@templates.TimeWithTooltip(props.Transaction.CreatedAt.Time)
							</p>
						</div>
					}
					if props.Proposer != "" {
						<div>
							<label class="block text-base font-semibold text-gray-800 dark:text-gray-200 mb-1">Block Proposer</label>
							<p class="text-gray-900 dark:text-gray-100">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", props.Proposer)) } class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 hover:underline">
									{ props.Proposer }
								</a>
							</p>
						</div>
					}
					<div>
						<label class="block text-base font-semibold text-gray-800 dark:text-gray-200 mb-1">Transaction Type</label>
						<p class="text-gray-900 dark:text-gray-100">{ props.Transaction.TxType }</p>
					</div>
				</div>
			</div>
			<!-- Transaction Content Based on Type -->
			switch props.Content.(type) {
				case []*db.EtlPlay:
					@TrackPlaysSection(props.Content.([]*db.EtlPlay))
				case *db.EtlManageEntity:
					@ManageEntitySection(props.Content.(*db.EtlManageEntity))
				case *db.EtlValidatorRegistration:
					@ValidatorRegistrationSection(props.Content.(*db.EtlValidatorRegistration))
				case *db.EtlValidatorDeregistration:
					@ValidatorDeregistrationSection(props.Content.(*db.EtlValidatorDeregistration))
				case *db.EtlSlaRollup:
					@SlaRollupSection(props.Content.(*db.EtlSlaRollup))
				case *db.EtlStorageProof:
					@StorageProofSection(props.Content.(*db.EtlStorageProof))
				case *db.EtlStorageProofVerification:
					@StorageProofVerificationSection(props.Content.(*db.EtlStorageProofVerification))
				default:
					<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
						<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Transaction Content</h3>
						<p class="text-gray-500 dark:text-gray-400">No detailed transaction content available for this transaction type.</p>
					</div>
			}
		</div>
	}
}

templ TrackPlaysSection(plays []*db.EtlPlay) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Track Plays ({ fmt.Sprintf("%d", len(plays)) })</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">User</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Track ID</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Location</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Played At</th>
					</tr>
				</thead>
				<tbody>
					for _, play := range plays {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								@templates.StringWithTooltip(play.UserID)
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(play.TrackID)
							</td>
							<td class="py-2 px-4 text-sm">
								{ play.City }
								if play.Region != "" {
									, { play.Region }
								}
								if play.Country != "" {
									, { play.Country }
								}
							</td>
							<td class="py-2 px-4 text-sm">
								if play.PlayedAt.Valid {
									@templates.TimeWithTooltip(play.PlayedAt.Time)
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ManageEntitySection(entity *db.EtlManageEntity) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Manage Entity</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Entity Type</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Entity ID</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Action</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Signer</th>
					</tr>
				</thead>
				<tbody>
					if entity != nil {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								@templates.StringWithTooltip(entity.Address)
							</td>
							<td class="py-2 px-4">{ entity.EntityType }</td>
							<td class="py-2 px-4">{ fmt.Sprintf("%d", entity.EntityID) }</td>
							<td class="py-2 px-4">
								<span class="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
									{ entity.Action }
								</span>
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(entity.Signer)
							</td>
						</tr>
					}
				</tbody>
			</table>
			<!-- JSON View of metadata -->
			if entity.Metadata.Valid {
				<div class="mt-4">
					<h4 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">Metadata</h4>
					<div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-4 overflow-x-auto border border-gray-200 dark:border-gray-700">
						<pre class="text-sm font-mono leading-relaxed whitespace-pre-wrap">
							@templ.Raw(highlightJSON(string(entity.Metadata.String)))
						</pre>
					</div>
				</div>
			}
		</div>
	</div>
}

templ ValidatorRegistrationSection(registration *db.EtlValidatorRegistration) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Validator Registrations 1</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Comet Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Node Type</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Voting Power</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">SPID</th>
					</tr>
				</thead>
				<tbody>
					if registration != nil {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", registration.Address)) } class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 hover:underline">
									@templates.StringWithTooltip(registration.Address)
								</a>
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(registration.CometAddress)
							</td>
							<td class="py-2 px-4">{ registration.NodeType }</td>
							<td class="py-2 px-4">{ fmt.Sprintf("%d", registration.VotingPower) }</td>
							<td class="py-2 px-4">{ registration.Spid }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ValidatorDeregistrationSection(deregistration *db.EtlValidatorDeregistration) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Validator Deregistrations 1</h3>
		<div class="overflow-x-auto">
			<table class="min-w-full table-auto">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Comet Address</th>
						<th class="text-left py-2 px-4 font-medium text-gray-900 dark:text-gray-100">Public Key</th>
					</tr>
				</thead>
				<tbody>
					if deregistration != nil {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-2 px-4">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", deregistration.CometAddress)) } class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 hover:underline">
									@templates.StringWithTooltip(deregistration.CometAddress)
								</a>
							</td>
							<td class="py-2 px-4">
								@templates.StringWithTooltip(fmt.Sprintf("%x", deregistration.CometPubkey))
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ SlaRollupSection(slaRollup *db.EtlSlaRollup) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">SLA Rollup</h3>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Block Range</label>
				<p class="text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("%d - %d", slaRollup.BlockStart, slaRollup.BlockEnd) }
				</p>
			</div>
			if slaRollup.CreatedAt.Valid {
				<div>
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Rollup Timestamp</label>
					<p class="text-gray-900 dark:text-gray-100">
						@templates.TimeWithTooltip(slaRollup.CreatedAt.Time)
					</p>
				</div>
			}
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Node Reports</label>
				<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", slaRollup.ValidatorCount) }</p>
			</div>
		</div>
	</div>
}

templ StorageProofSection(storageProof *db.EtlStorageProof) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Storage Proof</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Height</label>
				<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", storageProof.BlockHeight) }</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address</label>
				<p class="text-gray-900 dark:text-gray-100">
					@templates.StringWithTooltip(storageProof.Address)
				</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">CID</label>
				<p class="text-gray-900 dark:text-gray-100">
					@templates.StringWithTooltip(storageProof.Cid)
				</p>
			</div>
			<div class="md:col-span-2 lg:col-span-3">
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Prover Addresses</label>
				<div class="flex flex-wrap gap-2">
					for _, addr := range storageProof.ProverAddresses {
						<span class="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
							@templates.StringWithTooltip(addr)
						</span>
					}
				</div>
			</div>
			if storageProof.ProofSignature != nil {
				<div class="md:col-span-2 lg:col-span-3">
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Proof Signature</label>
					<p class="text-gray-900 dark:text-gray-100">
						@templates.StringWithTooltip(fmt.Sprintf("%x", storageProof.ProofSignature))
					</p>
				</div>
			}
		</div>
	</div>
}

templ StorageProofVerificationSection(storageProofVerification *db.EtlStorageProofVerification) {
	<div class="shadow-xl rounded-lg p-6 bg-white dark:bg-gray-800">
		<h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">Storage Proof Verification</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Height</label>
				<p class="text-gray-900 dark:text-gray-100">{ fmt.Sprintf("%d", storageProofVerification.Height) }</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Proof</label>
				<p class="text-gray-900 dark:text-gray-100">
					@templates.StringWithTooltip(fmt.Sprintf("%x", storageProofVerification.Proof))
				</p>
			</div>
		</div>
	</div>
}
