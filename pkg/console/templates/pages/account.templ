package pages

import (
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/api/etl/v1"
	"github.com/AudiusProject/audiusd/pkg/console/templates"
	"github.com/AudiusProject/audiusd/pkg/console/templates/layouts"
)

func buildPaginationURL(address string, page int32, pageSize int32, currentFilter string, startDate string, endDate string) string {
	baseURL := fmt.Sprintf("/account/%s?page=%d&count=%d", address, page, pageSize)
	if currentFilter != "" && currentFilter != "all" {
		baseURL += "&relation=" + currentFilter
	}
	if startDate != "" {
		baseURL += "&start_date=" + startDate
	}
	if endDate != "" {
		baseURL += "&end_date=" + endDate
	}
	return baseURL
}

templ Account(address string, transactions []*v1.AddressTransaction, currentPage int32, hasNext bool, hasPrev bool, pageSize int32, relationTypes []string, currentFilter string, startDate string, endDate string) {
	@layouts.Base(fmt.Sprintf("Account %s", address[:6])) {
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6">
			<div class="flex justify-between items-center mb-6">
				<h2 class="text-2xl font-light text-gray-900 dark:text-gray-100">
					Account 
					<span class="font-mono text-purple-600 dark:text-purple-400">
						{ address }
					</span>
				</h2>
				<div class="text-sm text-gray-500 dark:text-gray-400">
					Page { fmt.Sprint(currentPage) } • { fmt.Sprint(pageSize) } transactions per page
				</div>
			</div>
			<div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
					<div>
						<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Address</div>
						<div class="font-mono text-sm text-gray-900 dark:text-gray-100 break-all">{ address }</div>
					</div>
					<div>
						<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Total Transactions</div>
						<div class="text-lg font-semibold text-gray-900 dark:text-gray-100">{ fmt.Sprint(len(transactions)) }</div>
					</div>
					if len(relationTypes) > 0 {
						<div>
							<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Filter by Relation</div>
							<select
								id="relationFilter"
								class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
								onchange="updateFilters()"
							>
								<option value="all" selected?={ currentFilter == "" || currentFilter == "all" }>All Relations</option>
								for _, relationType := range relationTypes {
									<option value={ relationType } selected?={ currentFilter == relationType }>{ relationType }</option>
								}
							</select>
						</div>
					}
					<div>
						<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">From Date</div>
						<input
							type="date"
							id="startDate"
							value={ startDate }
							class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							onchange="updateFilters()"
						/>
					</div>
					<div>
						<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">To Date</div>
						<input
							type="date"
							id="endDate"
							value={ endDate }
							class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							onchange="updateFilters()"
						/>
					</div>
				</div>
			</div>
			if len(transactions) > 0 {
				<div class="space-y-2">
					for _, tx := range transactions {
						<div class="flex items-center justify-between py-4 px-6 border border-gray-200 dark:border-gray-700 rounded hover:bg-purple-50 hover:border-purple-200 dark:hover:bg-gray-700 transition-colors">
							<div class="flex items-center gap-6 flex-1">
								<div class="flex-1">
									<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Hash</div>
									<a href={ templ.SafeURL(fmt.Sprintf("/transaction/%s", tx.TxHash)) } class="font-mono text-sm text-purple-600 dark:text-purple-400 hover:underline">
										@templates.StringWithTooltip(tx.TxHash)
									</a>
								</div>
								<div class="flex-1">
									<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Type</div>
									<span class="px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded">
										{ tx.TxType }
									</span>
								</div>
								<div class="flex-1">
									<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Relation</div>
									<span class="px-3 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded">
										{ tx.RelationType }
									</span>
								</div>
								<div class="flex-1">
									<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Block</div>
									<a href={ templ.SafeURL(fmt.Sprintf("/block/%d", tx.BlockHeight)) } class="text-xs text-purple-600 dark:text-purple-400 hover:underline">
										{ fmt.Sprintf("%d", tx.BlockHeight) }
									</a>
								</div>
							</div>
							<div class="text-right flex-shrink-0">
								<div class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">Time</div>
								<div class="text-sm text-gray-700 dark:text-gray-300">
									@templates.TimeWithTooltip(tx.BlockTime.AsTime())
								</div>
							</div>
						</div>
					}
				</div>
				<div class="flex justify-between items-center mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
					<div class="flex gap-3">
						if hasPrev {
							<a href={ templ.SafeURL(buildPaginationURL(address, currentPage-1, pageSize, currentFilter, startDate, endDate)) } class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded transition-colors">
								← Previous
							</a>
						} else {
							<span class="px-4 py-2 text-sm font-medium text-gray-400 dark:text-gray-600 bg-gray-50 dark:bg-gray-700 rounded cursor-not-allowed">
								← Previous
							</span>
						}
						if hasNext {
							<a href={ templ.SafeURL(buildPaginationURL(address, currentPage+1, pageSize, currentFilter, startDate, endDate)) } class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded transition-colors">
								Next →
							</a>
						} else {
							<span class="px-4 py-2 text-sm font-medium text-gray-400 dark:text-gray-600 bg-gray-50 dark:bg-gray-700 rounded cursor-not-allowed">
								Next →
							</span>
						}
					</div>
				</div>
			} else {
				<div class="text-center py-12">
					<p class="text-gray-500 dark:text-gray-400">No transactions found for this address</p>
				</div>
			}
		</div>
		<script>
			function updateFilters() {
				const startDate = document.getElementById('startDate').value;
				const endDate = document.getElementById('endDate').value;
				const relationFilter = document.getElementById('relationFilter') ? document.getElementById('relationFilter').value : '';
				
				const url = new URL(window.location);
				
				// Handle relation filter
				if (relationFilter === 'all' || relationFilter === '') {
					url.searchParams.delete('relation');
				} else {
					url.searchParams.set('relation', relationFilter);
				}
				
				// Handle date filters
				if (startDate) {
					url.searchParams.set('start_date', startDate);
				} else {
					url.searchParams.delete('start_date');
				}
				
				if (endDate) {
					url.searchParams.set('end_date', endDate);
				} else {
					url.searchParams.delete('end_date');
				}
				
				// Reset to page 1 when changing filters
				url.searchParams.set('page', '1');
				
				window.location.href = url.toString();
			}
		</script>
	}
}
