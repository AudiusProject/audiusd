package pages

import (
	"fmt"
	"github.com/AudiusProject/audiusd/pkg/console/templates"
	"github.com/AudiusProject/audiusd/pkg/console/templates/layouts"
	"github.com/AudiusProject/audiusd/pkg/etl/db"
	"strings"
)

func extractHostname(endpoint string) string {
	// Remove protocol if present
	if strings.HasPrefix(endpoint, "http://") {
		endpoint = endpoint[7:]
	} else if strings.HasPrefix(endpoint, "https://") {
		endpoint = endpoint[8:]
	}

	// Remove path if present
	if idx := strings.Index(endpoint, "/"); idx != -1 {
		endpoint = endpoint[:idx]
	}

	// Remove port if present (optional, remove this if you want to keep ports)
	if idx := strings.Index(endpoint, ":"); idx != -1 {
		endpoint = endpoint[:idx]
	}

	return endpoint
}

func meetsSlaThreshold(report *db.EtlSlaNodeReport) bool {
	// Simplified SLA check since we don't have block quota in node reports
	if report.NumBlocksProposed > 0 && report.ChallengesFailed <= (report.ChallengesReceived/5) {
		return true
	}
	return report.NumBlocksProposed == 0 // Consider no activity as meeting SLA
}

func getUptimeColor(report *db.EtlSlaNodeReport) string {
	if report.NumBlocksProposed == 0 {
		return "bg-gray-800"
	}
	if meetsSlaThreshold(report) {
		return "bg-green-500"
	}
	return "bg-red-500"
}

type ValidatorUptimeInfo struct {
	Validator     *db.EtlValidator
	RecentRollups []*db.EtlSlaNodeReport
}

type ValidatorsUptimeProps struct {
	Validators []*ValidatorUptimeInfo
}

type ValidatorsUptimeByRollupProps struct {
	Validators []*ValidatorUptimeInfo
	RollupID   int32
}

func getLatestRollupInfo(validators []*ValidatorUptimeInfo) *db.EtlSlaNodeReport {
	if len(validators) == 0 {
		return nil
	}

	for _, validator := range validators {
		if len(validator.RecentRollups) > 0 {
			return validator.RecentRollups[0] // Most recent rollup
		}
	}
	return nil
}

func getRollupInfo(validators []*ValidatorUptimeInfo, rollupId int32) *db.EtlSlaNodeReport {
	if len(validators) == 0 {
		return nil
	}

	for _, validator := range validators {
		for _, rollup := range validator.RecentRollups {
			if rollup.SlaRollupID == rollupId {
				return rollup
			}
		}
	}
	return nil
}

func getTotalValidatorsCount(validators []*ValidatorUptimeInfo) int {
	return len(validators)
}

templ ValidatorsUptime(props ValidatorsUptimeProps) {
	@layouts.Base("Validators Uptime") {
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6">
			<div class="flex items-center justify-between mb-6">
				<div>
					<h2 class="text-2xl font-light text-gray-900 dark:text-gray-100">Validators Uptime</h2>
					<p class="text-gray-500 dark:text-gray-400 text-sm mt-1">
						Recent SLA rollup performance across all validators. Green indicates meeting SLA requirements, red indicates missing SLA.
					</p>
				</div>
				<div class="flex items-center gap-6 text-sm text-gray-600 dark:text-gray-400">
					<div class="flex items-center gap-2">
						<div class="w-4 h-4 bg-green-500 rounded"></div>
						<span>Meeting SLA</span>
					</div>
					<div class="flex items-center gap-2">
						<div class="w-4 h-4 bg-red-500 rounded"></div>
						<span>Missing SLA</span>
					</div>
					<div class="flex items-center gap-2">
						<div class="w-4 h-4 bg-gray-800 rounded"></div>
						<span>Offline/Dead</span>
					</div>
				</div>
			</div>
			@ValidatorsUptimeTable(props.Validators)
		</div>
	}
}

templ ValidatorsUptimeByRollup(props ValidatorsUptimeByRollupProps) {
	@layouts.Base(fmt.Sprintf("SLA Rollup #%d Uptime", props.RollupID)) {
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6">
			<div class="flex items-center justify-between mb-6">
				<div>
					<h2 class="text-2xl font-light text-gray-900 dark:text-gray-100">SLA Rollup #{ fmt.Sprint(props.RollupID) } Uptime</h2>
					<p class="text-gray-500 dark:text-gray-400 text-sm mt-1">
						Validator performance for SLA rollup { fmt.Sprint(props.RollupID) }
					</p>
				</div>
				<div class="text-sm text-gray-500 dark:text-gray-400">
					{ fmt.Sprint(len(props.Validators)) } validators
				</div>
			</div>
			// Add summary cards section for the specific rollup
			@ValidatorsUptimeSummaryForRollup(props.Validators, props.RollupID)
			@ValidatorsUptimeTable(props.Validators)
		</div>
	}
}

templ ValidatorsUptimeSummaryForRollup(validators []*ValidatorUptimeInfo, rollupId int32) {
	if rollupInfo := getRollupInfo(validators, rollupId); rollupInfo != nil {
		<div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-lg font-semibold text-gray-900 dark:text-gray-100">
					if rollupInfo.CreatedAt.Valid {
						{ rollupInfo.CreatedAt.Time.Format("06-01-02") }
						<br/>
						{ rollupInfo.CreatedAt.Time.Format("15:04:05 MST") }
					} else {
						—
					}
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">Date Created</dd>
			</div>
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-2xl font-bold text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("#%d", rollupInfo.SlaRollupID) }
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">SLA Rollup ID</dd>
			</div>
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-2xl font-bold text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("%d", rollupInfo.NumBlocksProposed) }
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">Blocks Proposed</dd>
			</div>
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-2xl font-bold text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("%d", getTotalValidatorsCount(validators)) }
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">Active Validators</dd>
			</div>
		</div>
		// Add additional metrics row
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-2xl font-bold text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("%d", rollupInfo.ChallengesReceived) }
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">Challenges Received</dd>
			</div>
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-2xl font-bold text-gray-900 dark:text-gray-100">
					{ fmt.Sprintf("%d", rollupInfo.ChallengesFailed) }
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">Challenges Failed</dd>
			</div>
			<div class="bg-slate-100 dark:bg-gray-700 rounded-md p-4 text-center">
				<dt class="text-sm font-mono text-gray-900 dark:text-gray-100 break-all">
					if rollupInfo.TxHash != "" {
						@templates.StringWithTooltipCustom(rollupInfo.TxHash, 8, 4)
					} else {
						—
					}
				</dt>
				<dd class="text-sm text-gray-500 dark:text-gray-400 mt-1">Transaction Hash</dd>
			</div>
		</div>
	}
}

templ ValidatorsUptimeTable(validators []*ValidatorUptimeInfo) {
	if len(validators) > 0 {
		<div class="overflow-x-auto">
			<table class="min-w-full">
				<thead>
					<tr class="border-b border-gray-200 dark:border-gray-700">
						<th class="text-left py-3 px-4 font-medium text-gray-900 dark:text-gray-100">Validator</th>
						<th class="text-left py-3 px-4 font-medium text-gray-900 dark:text-gray-100">Endpoint</th>
						<th class="text-left py-3 px-4 font-medium text-gray-900 dark:text-gray-100">Status</th>
						<th class="text-left py-3 px-4 font-medium text-gray-900 dark:text-gray-100">Voting Power</th>
						<th class="text-center py-3 px-4 font-medium text-gray-900 dark:text-gray-100">Recent SLA Rollups</th>
					</tr>
				</thead>
				<tbody>
					for _, validatorInfo := range validators {
						<tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="py-4 px-4">
								<a href={ templ.SafeURL(fmt.Sprintf("/validator/%s", validatorInfo.Validator.Address)) } class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 hover:underline">
									@templates.StringWithTooltipCustom(validatorInfo.Validator.Address, 8, 4)
								</a>
							</td>
							<td class="py-4 px-4 text-sm">
								{ extractHostname(validatorInfo.Validator.Endpoint) }
							</td>
							<td class="py-4 px-4">
								switch validatorInfo.Validator.Status {
									case "active":
										<span class="px-2 py-1 text-xs rounded bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">Active</span>
									case "deregistered":
										<span class="px-2 py-1 text-xs rounded bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200">Deregistered</span>
									case "misbehavior_deregistered":
										<span class="px-2 py-1 text-xs rounded bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200">Misbehavior</span>
									default:
										<span class="px-2 py-1 text-xs rounded bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-200">Unknown</span>
								}
							</td>
							<td class="py-4 px-4 text-sm font-mono">
								{ fmt.Sprintf("%d", validatorInfo.Validator.VotingPower) }
							</td>
							<td class="py-4 px-4">
								<div class="flex items-center justify-center gap-1">
									if len(validatorInfo.RecentRollups) > 0 {
										for _, rollup := range validatorInfo.RecentRollups {
											<div
												class={ "w-3 h-6 rounded-sm", getUptimeColor(rollup) }
												title={ fmt.Sprintf("SLA #%d: %d blocks proposed, %d/%d challenges", rollup.SlaRollupID, rollup.NumBlocksProposed, rollup.ChallengesFailed, rollup.ChallengesReceived) }
											></div>
										}
										// Fill remaining slots with empty bars if less than 5 rollups
										for i := len(validatorInfo.RecentRollups); i < 5; i++ {
											<div class="w-3 h-6 bg-gray-200 dark:bg-gray-700 rounded-sm" title="No data available"></div>
										}
									} else {
										// Show placeholder bars if no uptime data available
										for i := 0; i < 5; i++ {
											<div class="w-3 h-6 bg-gray-200 dark:bg-gray-700 rounded-sm" title="No uptime data available"></div>
										}
									}
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	} else {
		<div class="text-center py-12">
			<p class="text-gray-500 dark:text-gray-400">No validator uptime data found</p>
		</div>
	}
}
