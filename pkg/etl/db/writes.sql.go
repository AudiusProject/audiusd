// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: writes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deregister_validator = `-- name: deregister_validator :exec
update etl_validators set deregistered_at = $1, updated_at = $2, status = $3 where comet_address = $4
`

type deregister_validatorParams struct {
	DeregisteredAt pgtype.Int8      `json:"deregistered_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
	Status         string           `json:"status"`
	CometAddress   string           `json:"comet_address"`
}

func (q *Queries) deregister_validator(ctx context.Context, arg deregister_validatorParams) error {
	_, err := q.db.Exec(ctx, deregister_validator,
		arg.DeregisteredAt,
		arg.UpdatedAt,
		arg.Status,
		arg.CometAddress,
	)
	return err
}

const insert_address = `-- name: insert_address :exec
insert into etl_addresses (address, pub_key, first_seen_block_height, created_at)
values ($1, $2, $3, $4)
on conflict do nothing
`

type insert_addressParams struct {
	Address              string           `json:"address"`
	PubKey               []byte           `json:"pub_key"`
	FirstSeenBlockHeight pgtype.Int8      `json:"first_seen_block_height"`
	CreatedAt            pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_address(ctx context.Context, arg insert_addressParams) error {
	_, err := q.db.Exec(ctx, insert_address,
		arg.Address,
		arg.PubKey,
		arg.FirstSeenBlockHeight,
		arg.CreatedAt,
	)
	return err
}

const insert_block = `-- name: insert_block :exec
insert into etl_blocks (proposer_address, block_height, block_time)
values ($1, $2, $3)
`

type insert_blockParams struct {
	ProposerAddress string           `json:"proposer_address"`
	BlockHeight     int64            `json:"block_height"`
	BlockTime       pgtype.Timestamp `json:"block_time"`
}

func (q *Queries) insert_block(ctx context.Context, arg insert_blockParams) error {
	_, err := q.db.Exec(ctx, insert_block, arg.ProposerAddress, arg.BlockHeight, arg.BlockTime)
	return err
}

const insert_manage_entity = `-- name: insert_manage_entity :exec
insert into etl_manage_entities (address, entity_type, entity_id, action, metadata, signature, signer, nonce, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type insert_manage_entityParams struct {
	Address     string           `json:"address"`
	EntityType  string           `json:"entity_type"`
	EntityID    int64            `json:"entity_id"`
	Action      string           `json:"action"`
	Metadata    pgtype.Text      `json:"metadata"`
	Signature   string           `json:"signature"`
	Signer      string           `json:"signer"`
	Nonce       string           `json:"nonce"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_manage_entity(ctx context.Context, arg insert_manage_entityParams) error {
	_, err := q.db.Exec(ctx, insert_manage_entity,
		arg.Address,
		arg.EntityType,
		arg.EntityID,
		arg.Action,
		arg.Metadata,
		arg.Signature,
		arg.Signer,
		arg.Nonce,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insert_play = `-- name: insert_play :exec
insert into etl_plays (user_id, track_id, city, region, country, played_at, block_height, tx_hash, listened_at, recorded_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type insert_playParams struct {
	UserID      string           `json:"user_id"`
	TrackID     string           `json:"track_id"`
	City        string           `json:"city"`
	Region      string           `json:"region"`
	Country     string           `json:"country"`
	PlayedAt    pgtype.Timestamp `json:"played_at"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
	ListenedAt  pgtype.Timestamp `json:"listened_at"`
	RecordedAt  pgtype.Timestamp `json:"recorded_at"`
}

func (q *Queries) insert_play(ctx context.Context, arg insert_playParams) error {
	_, err := q.db.Exec(ctx, insert_play,
		arg.UserID,
		arg.TrackID,
		arg.City,
		arg.Region,
		arg.Country,
		arg.PlayedAt,
		arg.BlockHeight,
		arg.TxHash,
		arg.ListenedAt,
		arg.RecordedAt,
	)
	return err
}

const insert_sla_node_report = `-- name: insert_sla_node_report :exec
insert into etl_sla_node_reports (sla_rollup_id, address, num_blocks_proposed, challenges_received, challenges_failed, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type insert_sla_node_reportParams struct {
	SlaRollupID        int32            `json:"sla_rollup_id"`
	Address            string           `json:"address"`
	NumBlocksProposed  int32            `json:"num_blocks_proposed"`
	ChallengesReceived int32            `json:"challenges_received"`
	ChallengesFailed   int32            `json:"challenges_failed"`
	BlockHeight        int64            `json:"block_height"`
	TxHash             string           `json:"tx_hash"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_sla_node_report(ctx context.Context, arg insert_sla_node_reportParams) error {
	_, err := q.db.Exec(ctx, insert_sla_node_report,
		arg.SlaRollupID,
		arg.Address,
		arg.NumBlocksProposed,
		arg.ChallengesReceived,
		arg.ChallengesFailed,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insert_sla_rollup = `-- name: insert_sla_rollup :exec
insert into etl_sla_rollups (block_start, block_end, block_height, validator_count, block_quota, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7)
`

type insert_sla_rollupParams struct {
	BlockStart     int64            `json:"block_start"`
	BlockEnd       int64            `json:"block_end"`
	BlockHeight    int64            `json:"block_height"`
	ValidatorCount int32            `json:"validator_count"`
	BlockQuota     int32            `json:"block_quota"`
	TxHash         string           `json:"tx_hash"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_sla_rollup(ctx context.Context, arg insert_sla_rollupParams) error {
	_, err := q.db.Exec(ctx, insert_sla_rollup,
		arg.BlockStart,
		arg.BlockEnd,
		arg.BlockHeight,
		arg.ValidatorCount,
		arg.BlockQuota,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insert_storage_proof = `-- name: insert_storage_proof :exec
insert into etl_storage_proofs (height, address, prover_addresses, cid, proof_signature, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type insert_storage_proofParams struct {
	Height          int64            `json:"height"`
	Address         string           `json:"address"`
	ProverAddresses []string         `json:"prover_addresses"`
	Cid             string           `json:"cid"`
	ProofSignature  []byte           `json:"proof_signature"`
	BlockHeight     int64            `json:"block_height"`
	TxHash          string           `json:"tx_hash"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_storage_proof(ctx context.Context, arg insert_storage_proofParams) error {
	_, err := q.db.Exec(ctx, insert_storage_proof,
		arg.Height,
		arg.Address,
		arg.ProverAddresses,
		arg.Cid,
		arg.ProofSignature,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insert_storage_proof_verification = `-- name: insert_storage_proof_verification :exec
insert into etl_storage_proof_verifications (height, proof, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5)
`

type insert_storage_proof_verificationParams struct {
	Height      int64            `json:"height"`
	Proof       []byte           `json:"proof"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_storage_proof_verification(ctx context.Context, arg insert_storage_proof_verificationParams) error {
	_, err := q.db.Exec(ctx, insert_storage_proof_verification,
		arg.Height,
		arg.Proof,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insert_transaction = `-- name: insert_transaction :exec
insert into etl_transactions (tx_hash, block_height, tx_index, tx_type, created_at)
values ($1, $2, $3, $4, $5)
`

type insert_transactionParams struct {
	TxHash      string           `json:"tx_hash"`
	BlockHeight int64            `json:"block_height"`
	TxIndex     int32            `json:"tx_index"`
	TxType      string           `json:"tx_type"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_transaction(ctx context.Context, arg insert_transactionParams) error {
	_, err := q.db.Exec(ctx, insert_transaction,
		arg.TxHash,
		arg.BlockHeight,
		arg.TxIndex,
		arg.TxType,
		arg.CreatedAt,
	)
	return err
}

const insert_validator_deregistration = `-- name: insert_validator_deregistration :exec
insert into etl_validator_deregistrations (comet_address, comet_pubkey, block_height, tx_hash)
values ($1, $2, $3, $4)
`

type insert_validator_deregistrationParams struct {
	CometAddress string `json:"comet_address"`
	CometPubkey  []byte `json:"comet_pubkey"`
	BlockHeight  int64  `json:"block_height"`
	TxHash       string `json:"tx_hash"`
}

func (q *Queries) insert_validator_deregistration(ctx context.Context, arg insert_validator_deregistrationParams) error {
	_, err := q.db.Exec(ctx, insert_validator_deregistration,
		arg.CometAddress,
		arg.CometPubkey,
		arg.BlockHeight,
		arg.TxHash,
	)
	return err
}

const insert_validator_misbehavior_deregistration = `-- name: insert_validator_misbehavior_deregistration :exec
insert into etl_validator_misbehavior_deregistrations (comet_address, pub_key, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5)
`

type insert_validator_misbehavior_deregistrationParams struct {
	CometAddress string           `json:"comet_address"`
	PubKey       []byte           `json:"pub_key"`
	BlockHeight  int64            `json:"block_height"`
	TxHash       string           `json:"tx_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) insert_validator_misbehavior_deregistration(ctx context.Context, arg insert_validator_misbehavior_deregistrationParams) error {
	_, err := q.db.Exec(ctx, insert_validator_misbehavior_deregistration,
		arg.CometAddress,
		arg.PubKey,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insert_validator_registration = `-- name: insert_validator_registration :exec
insert into etl_validator_registrations (address, endpoint, comet_address, eth_block, node_type, spid, comet_pubkey, voting_power, block_height, tx_hash)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type insert_validator_registrationParams struct {
	Address      string `json:"address"`
	Endpoint     string `json:"endpoint"`
	CometAddress string `json:"comet_address"`
	EthBlock     string `json:"eth_block"`
	NodeType     string `json:"node_type"`
	Spid         string `json:"spid"`
	CometPubkey  []byte `json:"comet_pubkey"`
	VotingPower  int64  `json:"voting_power"`
	BlockHeight  int64  `json:"block_height"`
	TxHash       string `json:"tx_hash"`
}

func (q *Queries) insert_validator_registration(ctx context.Context, arg insert_validator_registrationParams) error {
	_, err := q.db.Exec(ctx, insert_validator_registration,
		arg.Address,
		arg.Endpoint,
		arg.CometAddress,
		arg.EthBlock,
		arg.NodeType,
		arg.Spid,
		arg.CometPubkey,
		arg.VotingPower,
		arg.BlockHeight,
		arg.TxHash,
	)
	return err
}

const register_validator = `-- name: register_validator :exec
insert into etl_validators (address, endpoint, comet_address, node_type, spid, voting_power, status, registered_at, deregistered_at, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type register_validatorParams struct {
	Address        string           `json:"address"`
	Endpoint       string           `json:"endpoint"`
	CometAddress   string           `json:"comet_address"`
	NodeType       string           `json:"node_type"`
	Spid           string           `json:"spid"`
	VotingPower    int64            `json:"voting_power"`
	Status         string           `json:"status"`
	RegisteredAt   int64            `json:"registered_at"`
	DeregisteredAt pgtype.Int8      `json:"deregistered_at"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) register_validator(ctx context.Context, arg register_validatorParams) error {
	_, err := q.db.Exec(ctx, register_validator,
		arg.Address,
		arg.Endpoint,
		arg.CometAddress,
		arg.NodeType,
		arg.Spid,
		arg.VotingPower,
		arg.Status,
		arg.RegisteredAt,
		arg.DeregisteredAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
