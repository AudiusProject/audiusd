// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: writes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteManageEntitiesByBlockRange = `-- name: DeleteManageEntitiesByBlockRange :exec
delete from etl_manage_entities
where block_height between $1 and $2
`

type DeleteManageEntitiesByBlockRangeParams struct {
	BlockHeight   int64 `json:"block_height"`
	BlockHeight_2 int64 `json:"block_height_2"`
}

// delete manage entities by block height range (useful for reindexing)
func (q *Queries) DeleteManageEntitiesByBlockRange(ctx context.Context, arg DeleteManageEntitiesByBlockRangeParams) error {
	_, err := q.db.Exec(ctx, deleteManageEntitiesByBlockRange, arg.BlockHeight, arg.BlockHeight_2)
	return err
}

const deletePlaysByBlockRange = `-- name: DeletePlaysByBlockRange :exec
delete from etl_plays
where block_height between $1 and $2
`

type DeletePlaysByBlockRangeParams struct {
	BlockHeight   int64 `json:"block_height"`
	BlockHeight_2 int64 `json:"block_height_2"`
}

// delete plays by block height range (useful for reindexing)
func (q *Queries) DeletePlaysByBlockRange(ctx context.Context, arg DeletePlaysByBlockRangeParams) error {
	_, err := q.db.Exec(ctx, deletePlaysByBlockRange, arg.BlockHeight, arg.BlockHeight_2)
	return err
}

const insertBlock = `-- name: InsertBlock :one
insert into etl_blocks (
    proposer_address,
    block_height,
    block_time
)
values ($1, $2, $3)
returning id, proposer_address, block_height, block_time, created_at, updated_at
`

type InsertBlockParams struct {
	ProposerAddress string           `json:"proposer_address"`
	BlockHeight     int64            `json:"block_height"`
	BlockTime       pgtype.Timestamp `json:"block_time"`
}

// insert a new block record
func (q *Queries) InsertBlock(ctx context.Context, arg InsertBlockParams) (EtlBlock, error) {
	row := q.db.QueryRow(ctx, insertBlock, arg.ProposerAddress, arg.BlockHeight, arg.BlockTime)
	var i EtlBlock
	err := row.Scan(
		&i.ID,
		&i.ProposerAddress,
		&i.BlockHeight,
		&i.BlockTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertManageEntities = `-- name: InsertManageEntities :many
insert into etl_manage_entities (
    address,
    entity_type,
    entity_id,
    action,
    metadata,
    signature,
    signer,
    nonce,
    block_height,
    tx_hash
) values (
    unnest($1::text[]),
    unnest($2::text[]),
    unnest($3::bigint[]),
    unnest($4::text[]),
    unnest($5::text[]),
    unnest($6::text[]),
    unnest($7::text[]),
    unnest($8::text[]),
    unnest($9::bigint[]),
    unnest($10::text[])
)
on conflict do nothing
returning id, address, entity_type, entity_id, action, metadata, signature, signer, nonce, block_height, tx_hash, created_at, updated_at
`

type InsertManageEntitiesParams struct {
	Column1  []string `json:"column_1"`
	Column2  []string `json:"column_2"`
	Column3  []int64  `json:"column_3"`
	Column4  []string `json:"column_4"`
	Column5  []string `json:"column_5"`
	Column6  []string `json:"column_6"`
	Column7  []string `json:"column_7"`
	Column8  []string `json:"column_8"`
	Column9  []int64  `json:"column_9"`
	Column10 []string `json:"column_10"`
}

// insert multiple manage entity records with batch size control
func (q *Queries) InsertManageEntities(ctx context.Context, arg InsertManageEntitiesParams) ([]EtlManageEntity, error) {
	rows, err := q.db.Query(ctx, insertManageEntities,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
		arg.Column10,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EtlManageEntity
	for rows.Next() {
		var i EtlManageEntity
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.EntityType,
			&i.EntityID,
			&i.Action,
			&i.Metadata,
			&i.Signature,
			&i.Signer,
			&i.Nonce,
			&i.BlockHeight,
			&i.TxHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertManageEntity = `-- name: InsertManageEntity :one
insert into etl_manage_entities (
    address,
    entity_type,
    entity_id,
    action,
    metadata,
    signature,
    signer,
    nonce,
    block_height,
    tx_hash
) values (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) returning id, address, entity_type, entity_id, action, metadata, signature, signer, nonce, block_height, tx_hash, created_at, updated_at
`

type InsertManageEntityParams struct {
	Address     string      `json:"address"`
	EntityType  string      `json:"entity_type"`
	EntityID    int64       `json:"entity_id"`
	Action      string      `json:"action"`
	Metadata    pgtype.Text `json:"metadata"`
	Signature   string      `json:"signature"`
	Signer      string      `json:"signer"`
	Nonce       string      `json:"nonce"`
	BlockHeight int64       `json:"block_height"`
	TxHash      string      `json:"tx_hash"`
}

// insert a new manage entity record
func (q *Queries) InsertManageEntity(ctx context.Context, arg InsertManageEntityParams) (EtlManageEntity, error) {
	row := q.db.QueryRow(ctx, insertManageEntity,
		arg.Address,
		arg.EntityType,
		arg.EntityID,
		arg.Action,
		arg.Metadata,
		arg.Signature,
		arg.Signer,
		arg.Nonce,
		arg.BlockHeight,
		arg.TxHash,
	)
	var i EtlManageEntity
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.EntityType,
		&i.EntityID,
		&i.Action,
		&i.Metadata,
		&i.Signature,
		&i.Signer,
		&i.Nonce,
		&i.BlockHeight,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPlay = `-- name: InsertPlay :one
insert into etl_plays (
    address,
    track_id,
    city,
    region,
    country,
    played_at,
    block_height,
    tx_hash
) values (
    $1, $2, $3, $4, $5, $6, $7, $8
) returning id, address, track_id, city, region, country, played_at, block_height, tx_hash, created_at, updated_at
`

type InsertPlayParams struct {
	Address     string           `json:"address"`
	TrackID     string           `json:"track_id"`
	City        string           `json:"city"`
	Region      string           `json:"region"`
	Country     string           `json:"country"`
	PlayedAt    pgtype.Timestamp `json:"played_at"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
}

// insert a new play record
func (q *Queries) InsertPlay(ctx context.Context, arg InsertPlayParams) (EtlPlay, error) {
	row := q.db.QueryRow(ctx, insertPlay,
		arg.Address,
		arg.TrackID,
		arg.City,
		arg.Region,
		arg.Country,
		arg.PlayedAt,
		arg.BlockHeight,
		arg.TxHash,
	)
	var i EtlPlay
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.TrackID,
		&i.City,
		&i.Region,
		&i.Country,
		&i.PlayedAt,
		&i.BlockHeight,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPlays = `-- name: InsertPlays :many
insert into etl_plays (
    address,
    track_id,
    city,
    region,
    country,
    played_at,
    block_height,
    tx_hash
) values (
    unnest($1::text[]),
    unnest($2::text[]),
    unnest($3::text[]),
    unnest($4::text[]),
    unnest($5::text[]),
    unnest($6::timestamp[]),
    unnest($7::bigint[]),
    unnest($8::text[])
)
on conflict do nothing
returning id, address, track_id, city, region, country, played_at, block_height, tx_hash, created_at, updated_at
`

type InsertPlaysParams struct {
	Column1 []string           `json:"column_1"`
	Column2 []string           `json:"column_2"`
	Column3 []string           `json:"column_3"`
	Column4 []string           `json:"column_4"`
	Column5 []string           `json:"column_5"`
	Column6 []pgtype.Timestamp `json:"column_6"`
	Column7 []int64            `json:"column_7"`
	Column8 []string           `json:"column_8"`
}

// insert multiple play records with batch size control
func (q *Queries) InsertPlays(ctx context.Context, arg InsertPlaysParams) ([]EtlPlay, error) {
	rows, err := q.db.Query(ctx, insertPlays,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EtlPlay
	for rows.Next() {
		var i EtlPlay
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.TrackID,
			&i.City,
			&i.Region,
			&i.Country,
			&i.PlayedAt,
			&i.BlockHeight,
			&i.TxHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertValidatorDeregistration = `-- name: InsertValidatorDeregistration :one
insert into etl_validator_deregistrations (
    comet_address,
    comet_pubkey,
    block_height,
    tx_hash
) values (
    $1, $2, $3, $4
) returning id, comet_address, comet_pubkey, block_height, tx_hash, created_at, updated_at
`

type InsertValidatorDeregistrationParams struct {
	CometAddress string `json:"comet_address"`
	CometPubkey  []byte `json:"comet_pubkey"`
	BlockHeight  int64  `json:"block_height"`
	TxHash       string `json:"tx_hash"`
}

// insert a new validator deregistration record
func (q *Queries) InsertValidatorDeregistration(ctx context.Context, arg InsertValidatorDeregistrationParams) (EtlValidatorDeregistration, error) {
	row := q.db.QueryRow(ctx, insertValidatorDeregistration,
		arg.CometAddress,
		arg.CometPubkey,
		arg.BlockHeight,
		arg.TxHash,
	)
	var i EtlValidatorDeregistration
	err := row.Scan(
		&i.ID,
		&i.CometAddress,
		&i.CometPubkey,
		&i.BlockHeight,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertValidatorRegistration = `-- name: InsertValidatorRegistration :one
insert into etl_validator_registrations (
    address,
    endpoint,
    comet_address,
    eth_block,
    node_type,
    spid,
    comet_pubkey,
    voting_power,
    block_height,
    tx_hash
) values (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) returning id, address, endpoint, comet_address, eth_block, node_type, spid, comet_pubkey, voting_power, block_height, tx_hash, created_at, updated_at
`

type InsertValidatorRegistrationParams struct {
	Address      string `json:"address"`
	Endpoint     string `json:"endpoint"`
	CometAddress string `json:"comet_address"`
	EthBlock     string `json:"eth_block"`
	NodeType     string `json:"node_type"`
	Spid         string `json:"spid"`
	CometPubkey  []byte `json:"comet_pubkey"`
	VotingPower  int64  `json:"voting_power"`
	BlockHeight  int64  `json:"block_height"`
	TxHash       string `json:"tx_hash"`
}

// insert a new validator registration record
func (q *Queries) InsertValidatorRegistration(ctx context.Context, arg InsertValidatorRegistrationParams) (EtlValidatorRegistration, error) {
	row := q.db.QueryRow(ctx, insertValidatorRegistration,
		arg.Address,
		arg.Endpoint,
		arg.CometAddress,
		arg.EthBlock,
		arg.NodeType,
		arg.Spid,
		arg.CometPubkey,
		arg.VotingPower,
		arg.BlockHeight,
		arg.TxHash,
	)
	var i EtlValidatorRegistration
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Endpoint,
		&i.CometAddress,
		&i.EthBlock,
		&i.NodeType,
		&i.Spid,
		&i.CometPubkey,
		&i.VotingPower,
		&i.BlockHeight,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
