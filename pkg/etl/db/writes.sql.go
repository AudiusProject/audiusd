// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: writes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deregisterValidator = `-- name: DeregisterValidator :exec
update etl_validators set deregistered_at = $1, updated_at = $2, status = $3 where comet_address = $4
`

type DeregisterValidatorParams struct {
	DeregisteredAt pgtype.Int8      `json:"deregistered_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
	Status         string           `json:"status"`
	CometAddress   string           `json:"comet_address"`
}

func (q *Queries) DeregisterValidator(ctx context.Context, arg DeregisterValidatorParams) error {
	_, err := q.db.Exec(ctx, deregisterValidator,
		arg.DeregisteredAt,
		arg.UpdatedAt,
		arg.Status,
		arg.CometAddress,
	)
	return err
}

const insertAddress = `-- name: InsertAddress :exec
insert into etl_addresses (address, pub_key, first_seen_block_height, created_at)
values ($1, $2, $3, $4)
on conflict do nothing
`

type InsertAddressParams struct {
	Address              string           `json:"address"`
	PubKey               []byte           `json:"pub_key"`
	FirstSeenBlockHeight pgtype.Int8      `json:"first_seen_block_height"`
	CreatedAt            pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertAddress(ctx context.Context, arg InsertAddressParams) error {
	_, err := q.db.Exec(ctx, insertAddress,
		arg.Address,
		arg.PubKey,
		arg.FirstSeenBlockHeight,
		arg.CreatedAt,
	)
	return err
}

const insertBlock = `-- name: InsertBlock :exec
insert into etl_blocks (proposer_address, block_height, block_time)
values ($1, $2, $3)
`

type InsertBlockParams struct {
	ProposerAddress string           `json:"proposer_address"`
	BlockHeight     int64            `json:"block_height"`
	BlockTime       pgtype.Timestamp `json:"block_time"`
}

func (q *Queries) InsertBlock(ctx context.Context, arg InsertBlockParams) error {
	_, err := q.db.Exec(ctx, insertBlock, arg.ProposerAddress, arg.BlockHeight, arg.BlockTime)
	return err
}

const insertManageEntity = `-- name: InsertManageEntity :exec
insert into etl_manage_entities (address, entity_type, entity_id, action, metadata, signature, signer, nonce, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type InsertManageEntityParams struct {
	Address     string           `json:"address"`
	EntityType  string           `json:"entity_type"`
	EntityID    int64            `json:"entity_id"`
	Action      string           `json:"action"`
	Metadata    pgtype.Text      `json:"metadata"`
	Signature   string           `json:"signature"`
	Signer      string           `json:"signer"`
	Nonce       string           `json:"nonce"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertManageEntity(ctx context.Context, arg InsertManageEntityParams) error {
	_, err := q.db.Exec(ctx, insertManageEntity,
		arg.Address,
		arg.EntityType,
		arg.EntityID,
		arg.Action,
		arg.Metadata,
		arg.Signature,
		arg.Signer,
		arg.Nonce,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insertPlay = `-- name: InsertPlay :exec
insert into etl_plays (user_id, track_id, city, region, country, played_at, block_height, tx_hash, listened_at, recorded_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type InsertPlayParams struct {
	UserID      string           `json:"user_id"`
	TrackID     string           `json:"track_id"`
	City        string           `json:"city"`
	Region      string           `json:"region"`
	Country     string           `json:"country"`
	PlayedAt    pgtype.Timestamp `json:"played_at"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
	ListenedAt  pgtype.Timestamp `json:"listened_at"`
	RecordedAt  pgtype.Timestamp `json:"recorded_at"`
}

func (q *Queries) InsertPlay(ctx context.Context, arg InsertPlayParams) error {
	_, err := q.db.Exec(ctx, insertPlay,
		arg.UserID,
		arg.TrackID,
		arg.City,
		arg.Region,
		arg.Country,
		arg.PlayedAt,
		arg.BlockHeight,
		arg.TxHash,
		arg.ListenedAt,
		arg.RecordedAt,
	)
	return err
}

const insertPlays = `-- name: InsertPlays :exec
insert into etl_plays (user_id, track_id, city, region, country, played_at, block_height, tx_hash, listened_at, recorded_at)
select unnest($1::text[]), unnest($2::text[]), unnest($3::text[]), unnest($4::text[]), unnest($5::text[]), unnest($6::timestamp[]), unnest($7::bigint[]), unnest($8::text[]), unnest($9::timestamp[]), unnest($10::timestamp[])
`

type InsertPlaysParams struct {
	Column1  []string           `json:"column_1"`
	Column2  []string           `json:"column_2"`
	Column3  []string           `json:"column_3"`
	Column4  []string           `json:"column_4"`
	Column5  []string           `json:"column_5"`
	Column6  []pgtype.Timestamp `json:"column_6"`
	Column7  []int64            `json:"column_7"`
	Column8  []string           `json:"column_8"`
	Column9  []pgtype.Timestamp `json:"column_9"`
	Column10 []pgtype.Timestamp `json:"column_10"`
}

func (q *Queries) InsertPlays(ctx context.Context, arg InsertPlaysParams) error {
	_, err := q.db.Exec(ctx, insertPlays,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
		arg.Column10,
	)
	return err
}

const insertSlaNodeReport = `-- name: InsertSlaNodeReport :exec
insert into etl_sla_node_reports (sla_rollup_id, address, num_blocks_proposed, challenges_received, challenges_failed, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertSlaNodeReportParams struct {
	SlaRollupID        int32            `json:"sla_rollup_id"`
	Address            string           `json:"address"`
	NumBlocksProposed  int32            `json:"num_blocks_proposed"`
	ChallengesReceived int32            `json:"challenges_received"`
	ChallengesFailed   int32            `json:"challenges_failed"`
	BlockHeight        int64            `json:"block_height"`
	TxHash             string           `json:"tx_hash"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertSlaNodeReport(ctx context.Context, arg InsertSlaNodeReportParams) error {
	_, err := q.db.Exec(ctx, insertSlaNodeReport,
		arg.SlaRollupID,
		arg.Address,
		arg.NumBlocksProposed,
		arg.ChallengesReceived,
		arg.ChallengesFailed,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insertSlaRollup = `-- name: InsertSlaRollup :exec
insert into etl_sla_rollups (block_start, block_end, block_height, validator_count, block_quota, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7)
`

type InsertSlaRollupParams struct {
	BlockStart     int64            `json:"block_start"`
	BlockEnd       int64            `json:"block_end"`
	BlockHeight    int64            `json:"block_height"`
	ValidatorCount int32            `json:"validator_count"`
	BlockQuota     int32            `json:"block_quota"`
	TxHash         string           `json:"tx_hash"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertSlaRollup(ctx context.Context, arg InsertSlaRollupParams) error {
	_, err := q.db.Exec(ctx, insertSlaRollup,
		arg.BlockStart,
		arg.BlockEnd,
		arg.BlockHeight,
		arg.ValidatorCount,
		arg.BlockQuota,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insertSlaRollupReturningId = `-- name: InsertSlaRollupReturningId :one
insert into etl_sla_rollups (block_start, block_end, block_height, validator_count, block_quota, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7)
returning id
`

type InsertSlaRollupReturningIdParams struct {
	BlockStart     int64            `json:"block_start"`
	BlockEnd       int64            `json:"block_end"`
	BlockHeight    int64            `json:"block_height"`
	ValidatorCount int32            `json:"validator_count"`
	BlockQuota     int32            `json:"block_quota"`
	TxHash         string           `json:"tx_hash"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertSlaRollupReturningId(ctx context.Context, arg InsertSlaRollupReturningIdParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertSlaRollupReturningId,
		arg.BlockStart,
		arg.BlockEnd,
		arg.BlockHeight,
		arg.ValidatorCount,
		arg.BlockQuota,
		arg.TxHash,
		arg.CreatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertStorageProof = `-- name: InsertStorageProof :exec
insert into etl_storage_proofs (height, address, prover_addresses, cid, proof_signature, proof, status, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type InsertStorageProofParams struct {
	Height          int64            `json:"height"`
	Address         string           `json:"address"`
	ProverAddresses []string         `json:"prover_addresses"`
	Cid             string           `json:"cid"`
	ProofSignature  []byte           `json:"proof_signature"`
	Proof           []byte           `json:"proof"`
	Status          EtlProofStatus   `json:"status"`
	BlockHeight     int64            `json:"block_height"`
	TxHash          string           `json:"tx_hash"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertStorageProof(ctx context.Context, arg InsertStorageProofParams) error {
	_, err := q.db.Exec(ctx, insertStorageProof,
		arg.Height,
		arg.Address,
		arg.ProverAddresses,
		arg.Cid,
		arg.ProofSignature,
		arg.Proof,
		arg.Status,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insertStorageProofVerification = `-- name: InsertStorageProofVerification :exec
insert into etl_storage_proof_verifications (height, proof, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5)
`

type InsertStorageProofVerificationParams struct {
	Height      int64            `json:"height"`
	Proof       []byte           `json:"proof"`
	BlockHeight int64            `json:"block_height"`
	TxHash      string           `json:"tx_hash"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertStorageProofVerification(ctx context.Context, arg InsertStorageProofVerificationParams) error {
	_, err := q.db.Exec(ctx, insertStorageProofVerification,
		arg.Height,
		arg.Proof,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insertTransaction = `-- name: InsertTransaction :exec
insert into etl_transactions (tx_hash, block_height, tx_index, tx_type, created_at)
values ($1, $2, $3, $4, $5)
`

type InsertTransactionParams struct {
	TxHash      string           `json:"tx_hash"`
	BlockHeight int64            `json:"block_height"`
	TxIndex     int32            `json:"tx_index"`
	TxType      string           `json:"tx_type"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.Exec(ctx, insertTransaction,
		arg.TxHash,
		arg.BlockHeight,
		arg.TxIndex,
		arg.TxType,
		arg.CreatedAt,
	)
	return err
}

const insertValidatorDeregistration = `-- name: InsertValidatorDeregistration :exec
insert into etl_validator_deregistrations (comet_address, comet_pubkey, block_height, tx_hash)
values ($1, $2, $3, $4)
`

type InsertValidatorDeregistrationParams struct {
	CometAddress string `json:"comet_address"`
	CometPubkey  []byte `json:"comet_pubkey"`
	BlockHeight  int64  `json:"block_height"`
	TxHash       string `json:"tx_hash"`
}

func (q *Queries) InsertValidatorDeregistration(ctx context.Context, arg InsertValidatorDeregistrationParams) error {
	_, err := q.db.Exec(ctx, insertValidatorDeregistration,
		arg.CometAddress,
		arg.CometPubkey,
		arg.BlockHeight,
		arg.TxHash,
	)
	return err
}

const insertValidatorMisbehaviorDeregistration = `-- name: InsertValidatorMisbehaviorDeregistration :exec
insert into etl_validator_misbehavior_deregistrations (comet_address, pub_key, block_height, tx_hash, created_at)
values ($1, $2, $3, $4, $5)
`

type InsertValidatorMisbehaviorDeregistrationParams struct {
	CometAddress string           `json:"comet_address"`
	PubKey       []byte           `json:"pub_key"`
	BlockHeight  int64            `json:"block_height"`
	TxHash       string           `json:"tx_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertValidatorMisbehaviorDeregistration(ctx context.Context, arg InsertValidatorMisbehaviorDeregistrationParams) error {
	_, err := q.db.Exec(ctx, insertValidatorMisbehaviorDeregistration,
		arg.CometAddress,
		arg.PubKey,
		arg.BlockHeight,
		arg.TxHash,
		arg.CreatedAt,
	)
	return err
}

const insertValidatorRegistration = `-- name: InsertValidatorRegistration :exec
insert into etl_validator_registrations (address, endpoint, comet_address, eth_block, node_type, spid, comet_pubkey, voting_power, block_height, tx_hash)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type InsertValidatorRegistrationParams struct {
	Address      string `json:"address"`
	Endpoint     string `json:"endpoint"`
	CometAddress string `json:"comet_address"`
	EthBlock     string `json:"eth_block"`
	NodeType     string `json:"node_type"`
	Spid         string `json:"spid"`
	CometPubkey  []byte `json:"comet_pubkey"`
	VotingPower  int64  `json:"voting_power"`
	BlockHeight  int64  `json:"block_height"`
	TxHash       string `json:"tx_hash"`
}

func (q *Queries) InsertValidatorRegistration(ctx context.Context, arg InsertValidatorRegistrationParams) error {
	_, err := q.db.Exec(ctx, insertValidatorRegistration,
		arg.Address,
		arg.Endpoint,
		arg.CometAddress,
		arg.EthBlock,
		arg.NodeType,
		arg.Spid,
		arg.CometPubkey,
		arg.VotingPower,
		arg.BlockHeight,
		arg.TxHash,
	)
	return err
}

const registerValidator = `-- name: RegisterValidator :exec
insert into etl_validators (address, endpoint, comet_address, node_type, spid, voting_power, status, registered_at, deregistered_at, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) 
on conflict (endpoint) do nothing
`

type RegisterValidatorParams struct {
	Address        string           `json:"address"`
	Endpoint       string           `json:"endpoint"`
	CometAddress   string           `json:"comet_address"`
	NodeType       string           `json:"node_type"`
	Spid           string           `json:"spid"`
	VotingPower    int64            `json:"voting_power"`
	Status         string           `json:"status"`
	RegisteredAt   int64            `json:"registered_at"`
	DeregisteredAt pgtype.Int8      `json:"deregistered_at"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) RegisterValidator(ctx context.Context, arg RegisterValidatorParams) error {
	_, err := q.db.Exec(ctx, registerValidator,
		arg.Address,
		arg.Endpoint,
		arg.CometAddress,
		arg.NodeType,
		arg.Spid,
		arg.VotingPower,
		arg.Status,
		arg.RegisteredAt,
		arg.DeregisteredAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
