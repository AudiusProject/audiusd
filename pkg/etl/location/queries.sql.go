// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package location

import (
	"context"
	"database/sql"
)

const getCityLatLong = `-- name: GetCityLatLong :one
select latitude, longitude from cities where name = ? and state_code = ? and country_code = ? limit 1
`

type GetCityLatLongParams struct {
	Name        string `json:"name"`
	StateCode   string `json:"state_code"`
	CountryCode string `json:"country_code"`
}

type GetCityLatLongRow struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (q *Queries) GetCityLatLong(ctx context.Context, arg GetCityLatLongParams) (GetCityLatLongRow, error) {
	row := q.db.QueryRowContext(ctx, getCityLatLong, arg.Name, arg.StateCode, arg.CountryCode)
	var i GetCityLatLongRow
	err := row.Scan(&i.Latitude, &i.Longitude)
	return i, err
}

const getCountryCode = `-- name: GetCountryCode :one
select iso2 from countries where name = ? limit 1
`

func (q *Queries) GetCountryCode(ctx context.Context, name string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getCountryCode, name)
	var iso2 sql.NullString
	err := row.Scan(&iso2)
	return iso2, err
}

const getStateCode = `-- name: GetStateCode :one
select iso2 from states where name = ? and country_code = ? limit 1
`

type GetStateCodeParams struct {
	Name        string `json:"name"`
	CountryCode string `json:"country_code"`
}

func (q *Queries) GetStateCode(ctx context.Context, arg GetStateCodeParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getStateCode, arg.Name, arg.CountryCode)
	var iso2 sql.NullString
	err := row.Scan(&iso2)
	return iso2, err
}
