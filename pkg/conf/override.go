package conf

import (
	"fmt"
	"strings"
)

const remoteConfigPlaceholder = "remoteConfigFile"

/** Mappings of toml config to override .env for each node type. */

func (config *NodeConfig) ToOverrideEnv(host string, nc NetworkConfig) map[string]string {
	overrideEnv := make(map[string]string)
	overrideEnv["AUDIUS_D_GENERATED"] = "This env file was generated by audius-d. All manual changes will be lost."

	switch nc.DeployOn {
	case Devnet:
		overrideEnv["NETWORK"] = "dev"
		overrideEnv["comms_sandbox"] = "true"
	case Testnet:
		overrideEnv["NETWORK"] = "stage"
	case Mainnet:
		overrideEnv["NETWORK"] = "prod"
	}

	switch config.Type {
	case Content:
		overrideEnv["creatorNodeEndpoint"] = "https://" + host
		overrideEnv["delegateOwnerWallet"] = config.Wallet
		overrideEnv["delegatePrivateKey"] = config.PrivateKey
		overrideEnv["spOwnerWallet"] = config.RewardsWallet
		overrideEnv["ethOwnerWallet"] = config.RewardsWallet

		if config.HttpPort != 0 {
			overrideEnv["AUDIUSD_HTTP_PORT"] = fmt.Sprint(config.HttpPort)
		}
		if config.HttpsPort != 0 {
			overrideEnv["AUDIUSD_HTTPS_PORT"] = fmt.Sprint(config.HttpsPort)
		}
		if config.Storage.StorageUrl != "" {
			overrideEnv["AUDIUS_STORAGE_DRIVER_URL"] = config.Storage.StorageUrl
			if config.Storage.GoogleApplicationCredentials != "" {
				overrideEnv["GOOGLE_APPLICATION_CREDENTIALS"] = "/tmp/mediorum/" + config.Storage.GoogleApplicationCredentials
			} else if config.Storage.AwsAccessKeyId != "" {
				overrideEnv["AWS_ACCESS_KEY_ID"] = config.Storage.AwsAccessKeyId
				overrideEnv["AWS_SECRET_ACCESS_KEY"] = config.Storage.AwsSecretAccessKey
				overrideEnv["AWS_REGION"] = config.Storage.AwsRegion
			} else if config.Storage.AzureStorageAccount != "" {
				overrideEnv["AZURE_STORAGE_ACCOUNT"] = config.Storage.AzureStorageAccount
				overrideEnv["AZURE_STORAGE_KEY"] = config.Storage.AzureStorageKey
			}
		}

	case Discovery:
		if config.DbUrl != "" {
			overrideEnv["audius_db_url"] = config.DbUrl
			overrideEnv["audius_db_url_read_replica"] = config.DbUrl
		}
		overrideEnv["audius_delegate_owner_wallet"] = config.Wallet
		overrideEnv["audius_delegate_private_key"] = config.PrivateKey
		overrideEnv["audius_discprov_url"] = "https://" + host
	case Identity: // no-op
	}

	// Everything else we don't yet capture in audius-d models
	for k, v := range config.OverrideConfig {
		if v == remoteConfigPlaceholder {
			// This error message will be overwritten during orchestration if the config value is found.
			overrideEnv[k] = "ERROR: REMOTE CONFIG NOT SET"
		} else {
			overrideEnv[k] = v
		}
	}

	// register plugins and pass their configs into
	// override .env
	plugins := []string{}
	for p, pconf := range config.PluginsConfig {
		plugins = append(plugins, p)
		for c, v := range pconf {
			overrideEnv[c] = v
		}
	}
	overrideEnv["REGISTERED_PLUGINS"] = strings.Join(plugins, ",")

	return overrideEnv
}
