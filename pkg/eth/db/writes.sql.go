// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: writes.sql

package db

import (
	"context"
)

const clearRegisteredEndpoints = `-- name: ClearRegisteredEndpoints :exec
delete from eth_registered_endpoints
`

func (q *Queries) ClearRegisteredEndpoints(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clearRegisteredEndpoints)
	return err
}

const deleteRegisteredEndpoint = `-- name: DeleteRegisteredEndpoint :exec
delete from eth_registered_endpoints
where id = $1 and endpoint = $2 and owner = $3 and service_type = $4
`

type DeleteRegisteredEndpointParams struct {
	ID          int32  `json:"id"`
	Endpoint    string `json:"endpoint"`
	Owner       string `json:"owner"`
	ServiceType string `json:"service_type"`
}

func (q *Queries) DeleteRegisteredEndpoint(ctx context.Context, arg DeleteRegisteredEndpointParams) error {
	_, err := q.db.Exec(ctx, deleteRegisteredEndpoint,
		arg.ID,
		arg.Endpoint,
		arg.Owner,
		arg.ServiceType,
	)
	return err
}

const insertRegisteredEndpoint = `-- name: InsertRegisteredEndpoint :exec
insert into eth_registered_endpoints (id, service_type, owner, delegate_wallet, endpoint, blocknumber)
values ($1, $2, $3, $4, $5, $6)
`

type InsertRegisteredEndpointParams struct {
	ID             int32  `json:"id"`
	ServiceType    string `json:"service_type"`
	Owner          string `json:"owner"`
	DelegateWallet string `json:"delegate_wallet"`
	Endpoint       string `json:"endpoint"`
	Blocknumber    int64  `json:"blocknumber"`
}

func (q *Queries) InsertRegisteredEndpoint(ctx context.Context, arg InsertRegisteredEndpointParams) error {
	_, err := q.db.Exec(ctx, insertRegisteredEndpoint,
		arg.ID,
		arg.ServiceType,
		arg.Owner,
		arg.DelegateWallet,
		arg.Endpoint,
		arg.Blocknumber,
	)
	return err
}
